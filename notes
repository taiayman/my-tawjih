lib/
    main.dart: ``` import 'package:firebase_core/firebase_core.dart';
                   import 'package:flutter/material.dart';

                   void main() async {
                     WidgetsFlutterBinding.ensureInitialized();
                     await Firebase.initializeApp();
                     runApp(MyApp());
                   }

                   class MyApp extends StatelessWidget {
                     @override
                     Widget build(BuildContext context) {
                       return MaterialApp(
                         title: 'Company Management',
                         home: LoginScreen(),  // This will be the initial route
                       );
                     }
                   }
 ```
    routes.dart: ``` import 'package:flutter/material.dart';
import 'authentication/login_screen.dart';
import 'dashboard/boss/boss_dashboard.dart';
import 'dashboard/ceo/ceo_dashboard.dart';
import 'dashboard/boss/projects_screen.dart';
import 'dashboard/boss/project_details_screen.dart';
import 'dashboard/boss/companies_screen.dart';
import 'dashboard/boss/company_details_screen.dart';
import 'dashboard/boss/ceos_screen.dart';
import 'dashboard/boss/alerts_screen.dart';
import 'dashboard/ceo/manage_company_screen.dart';
import 'dashboard/ceo/manage_projects_screen.dart';
import 'dashboard/ceo/status_update_screen.dart';

final Map<String, WidgetBuilder> routes = {
  '/login': (BuildContext context) => LoginScreen(),
  '/bossDashboard': (BuildContext context) => BossDashboard(),
  '/ceoDashboard': (BuildContext context) => CEODashboard(),
  '/projectsScreen': (BuildContext context) => ProjectsScreen(),
  '/projectDetailsScreen': (BuildContext context) => ProjectDetailsScreen(projectId: ModalRoute.of(context)!.settings.arguments as String),
  '/companiesScreen': (BuildContext context) => CompaniesScreen(),
  '/companyDetailsScreen': (BuildContext context) => CompanyDetailsScreen(companyId: ModalRoute.of(context)!.settings.arguments as String),
  '/ceosScreen': (BuildContext context) => CEOScreen(),
  '/alertsScreen': (BuildContext context) => AlertsScreen(),
  '/manageCompanyScreen': (BuildContext context) => ManageCompanyScreen(),
  '/manageProjectsScreen': (BuildContext context) => ManageProjectsScreen(),
  '/statusUpdateScreen': (BuildContext context) => StatusUpdateScreen(),
};

 ```
    authentication/
        login_screen.dart: ```import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import '/dashboard/boss/boss_dashboard.dart';
import '/dashboard/ceo/ceo_dashboard.dart';
import '../../core/services/firebase_service.dart';

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseService _firebaseService = FirebaseService();
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';
  bool _isLoading = false;
  bool _isBoss = true; // Default role set to Boss

  void _signIn() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }
    _formKey.currentState!.save();
    setState(() {
      _isLoading = true;
    });
    try {
      UserCredential userCredential =
          await _auth.signInWithEmailAndPassword(
        email: _email,
        password: _password,
      );
      // Determine user role (Boss or CEO) after successful login
      final user = userCredential.user;
      if (user != null) {
        final isBoss = await _firebaseService.isUserBoss(user.uid);
        Navigator.of(context).pushReplacement(MaterialPageRoute(
          builder: (context) => isBoss ? BossDashboard() : CEODashboard(),
        ));
      }
    } on FirebaseAuthException catch (e) {
      setState(() {
        _isLoading = false;
      });
      _showErrorDialog(e.message ?? "An error occurred during sign in.");
    }
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Login Error'),
        content: Text(message),
        actions: <Widget>[
          TextButton(
            child: Text('Okay'),
            onPressed: () {
              Navigator.of(ctx).pop();
            },
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Company Management'),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.blue.shade200, Colors.blue.shade700],
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            child: Card(
              margin: EdgeInsets.all(30),
              elevation: 8,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              child: Padding(
                padding: EdgeInsets.all(24),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      FlutterLogo(size: 100),
                      SizedBox(height: 30),
                      TextFormField(
                        decoration: InputDecoration(
                          labelText: 'Email',
                          prefixIcon: Icon(Icons.email),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        keyboardType: TextInputType.emailAddress,
                        onSaved: (value) => _email = value!,
                        validator: (value) {
                          if (value!.isEmpty || !value.contains('@')) {
                            return 'Invalid email!';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 20),
                      TextFormField(
                        decoration: InputDecoration(
                          labelText: 'Password',
                          prefixIcon: Icon(Icons.lock),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                        obscureText: true,
                        onSaved: (value) => _password = value!,
                        validator: (value) {
                          if (value!.isEmpty || value.length < 6) {
                            return 'Password is too short!';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 30),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Text('Login as Boss'),
                          Switch(
                            value: _isBoss,
                            onChanged: (val) {
                              setState(() {
                                _isBoss = val;
                              });
                            },
                          ),
                          Text('Login as CEO'),
                        ],
                      ),
                      SizedBox(height: 30),
                      _isLoading
                          ? CircularProgressIndicator()
                          : ElevatedButton(
                              onPressed: _signIn,
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.blue.shade700,
                                padding: EdgeInsets.symmetric(
                                    horizontal: 50, vertical: 15),
                                textStyle: TextStyle(fontSize: 18),
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                              ),
                              child: Text(
                                'Login',
                                style: TextStyle(color: Colors.white),
                              ),
                            ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
 ```
        auth_service.dart: ``` import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthService {
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Stream to monitor authentication changes
  Stream<User?> get authChanges => _firebaseAuth.authStateChanges();

  // Get the current user
  User? get currentUser => _firebaseAuth.currentUser;

  // Sign in with Email and Password
  Future<User?> signInWithEmailAndPassword(String email, String password) async {
    try {
      final UserCredential result = await _firebaseAuth
          .signInWithEmailAndPassword(email: email, password: password);
      return result.user;
    } catch (e) {
      throw Exception('Failed to sign in: $e');
    }
  }

  // Register with Email and Password
  Future<User?> createUserWithEmailAndPassword(
      String email, String password) async {
    try {
      final UserCredential result = await _firebaseAuth
          .createUserWithEmailAndPassword(email: email, password: password);
      return result.user;
    } catch (e) {
      throw Exception('Failed to register: $e');
    }
  }

  // Sign out
  Future<void> signOut() async {
    try {
      await _firebaseAuth.signOut();
    } catch (e) {
      throw Exception('Failed to sign out: $e');
    }
  }

  // Reset Password
  Future<void> resetPassword(String email) async {
    try {
      await _firebaseAuth.sendPasswordResetEmail(email: email);
    } catch (e) {
      throw Exception('Failed to send reset password email: $e');
    }
  }

  // Check if user is a Boss
  Future<bool> isUserBoss(String userId) async {
    try {
      DocumentSnapshot userDoc =
          await _firestore.collection('users').doc(userId).get();
      if (userDoc.exists) {
        return userDoc.get('role') == 'Boss'; // Assuming 'role' field exists
      }
      return false; // User document doesn't exist
    } catch (e) {
      print('Error checking user role: $e');
      return false;
    }
  }
}
 ```
    dashboard/
        boss/
            boss_dashboard.dart: ``` import 'package:flutter/material.dart';
import 'projects_screen.dart';
import 'companies_screen.dart';
import 'ceos_screen.dart';
import 'alerts_screen.dart';

class BossDashboard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Boss Dashboard'),
      ),
      body: GridView(
        padding: EdgeInsets.all(20),
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 3 / 2,
          crossAxisSpacing: 20,
          mainAxisSpacing: 20,
        ),
        children: <Widget>[
          DashboardItem(
            title: 'Projects',
            icon: Icons.build,
            onTap: () => Navigator.of(context).push(MaterialPageRoute(
              builder: (_) => ProjectsScreen(),
            )),
          ),
          DashboardItem(
            title: 'Companies',
            icon: Icons.business,
            onTap: () => Navigator.of(context).push(MaterialPageRoute(
              builder: (_) => CompaniesScreen(),
            )),
          ),
          DashboardItem(
            title: 'CEOs',
            icon: Icons.person,
            onTap: () => Navigator.of(context).push(MaterialPageRoute(
              builder: (_) => CEOScreen(),
            )),
          ),
          DashboardItem(
            title: 'Alerts',
            icon: Icons.warning,
            onTap: () => Navigator.of(context).push(MaterialPageRoute(
              builder: (_) => AlertsScreen(),
            )),
          ),
        ],
      ),
    );
  }
}

class DashboardItem extends StatelessWidget {
  final String title;
  final IconData icon;
  final VoidCallback onTap;

  const DashboardItem({
    Key? key,
    required this.title,
    required this.icon,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Card(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Icon(icon, size: 50),
            SizedBox(height: 20),
            Text(title, style: TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
  }
}

 ```
            projects_screen.dart: ``` import 'package:flutter/material.dart';
import 'project_details_screen.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/project.dart';

class ProjectsScreen extends StatefulWidget {
  @override
  _ProjectsScreenState createState() => _ProjectsScreenState();
}

class _ProjectsScreenState extends State<ProjectsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Future<List<Project>>? projects;

  @override
  void initState() {
    super.initState();
    projects = _firebaseService.getProjects();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Projects'),
      ),
      body: FutureBuilder<List<Project>>(
        future: projects,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null || snapshot.data!.isEmpty) {
            return Center(child: Text("No projects found"));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                Project project = snapshot.data![index];
                return ListTile(
                  title: Text(project.name),
                  subtitle: Text('Budget: \$${project.budget.toStringAsFixed(2)}'),
                  onTap: () {
                    Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => ProjectDetailsScreen(projectId: project.id),
                    ));
                  },
                );
              },
            );
          }
        },
      ),
    );
  }
}

 ```
            project_details_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/project.dart';

class ProjectDetailsScreen extends StatefulWidget {
  final String projectId;

  ProjectDetailsScreen({Key? key, required this.projectId}) : super(key: key);

  @override
  _ProjectDetailsScreenState createState() => _ProjectDetailsScreenState();
}

class _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Future<Project?>? projectFuture;

  @override
  void initState() {
    super.initState();
    projectFuture = _firebaseService.getProjectById(widget.projectId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Details'),
      ),
      body: FutureBuilder<Project?>(
        future: projectFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null) {
            return Center(child: Text("No project found"));
          } else {
            Project project = snapshot.data!;
            return SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text('Project Name: ${project.name}', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 10),
                  Text('Budget: \$${project.budget.toStringAsFixed(2)}', style: Theme.of(context).textTheme.bodyText1),
                  SizedBox(height: 10),
                  Text('Start Date: ${project.startDate.toIso8601String()}', style: Theme.of(context).textTheme.bodyText1),
                  SizedBox(height: 10),
                  Text('End Date: ${project.endDate.toIso8601String()}', style: Theme.of(context).textTheme.bodyText1),
                  SizedBox(height: 10),
                  Text('Team Members: ${project.teamMembers.join(", ")}', style: Theme.of(context).textTheme.bodyText1),
                ],
              ),
            );
          }
        },
      ),
    );
  }
}

 ```
            companies_screen.dart: ``` import 'package:flutter/material.dart';
import 'company_details_screen.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/company.dart';

class CompaniesScreen extends StatefulWidget {
  @override
  _CompaniesScreenState createState() => _CompaniesScreenState();
}

class _CompaniesScreenState extends State<CompaniesScreen> {
  final FirebaseService _firebaseService = FirebaseService();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Companies'),
      ),
      body: FutureBuilder<List<Company>>(
        future: _firebaseService.getCompanies(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null || snapshot.data!.isEmpty) {
            return Center(child: Text("No companies found"));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                Company company = snapshot.data![index];
                return ListTile(
                  title: Text(company.name),
                  subtitle: Text('Employees: ${company.employees}'),
                  onTap: () {
                    Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => CompanyDetailsScreen(companyId: company.id),
                    ));
                  },
                );
              },
            );
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Optionally add functionality to add new company
          // Navigator.of(context).push(MaterialPageRoute(builder: (context) => AddCompanyScreen()));
        },
        child: Icon(Icons.add),
        tooltip: 'Add Company',
      ),
    );
  }
}

 ```
            company_details_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/models/company.dart';
import '../../core/services/firebase_service.dart';

class CompanyDetailsScreen extends StatefulWidget {
  final String companyId;

  CompanyDetailsScreen({Key? key, required this.companyId}) : super(key: key);

  @override
  _CompanyDetailsScreenState createState() => _CompanyDetailsScreenState();
}

class _CompanyDetailsScreenState extends State<CompanyDetailsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Company? company;

  @override
  void initState() {
    super.initState();
    _loadCompanyDetails();
  }

  Future<void> _loadCompanyDetails() async {
    try {
      var comp = await _firebaseService.getCompanyById(widget.companyId);
      setState(() {
        company = comp;
      });
    } catch (e) {
      print('Error fetching company details: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Company Details'),
      ),
      body: company == null
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Text('Name: ${company!.name}', style: Theme.of(context).textTheme.headline6),
              SizedBox(height: 10),
              Text('CEO: ${company!.ceoId}', style: Theme.of(context).textTheme.bodyText1),
              SizedBox(height: 10),
              Text('Employees: ${company!.employees}', style: Theme.of(context).textTheme.bodyText1),
              SizedBox(height: 10),
              Text('Capital: \$${company!.capital.toStringAsFixed(2)}', style: Theme.of(context).textTheme.bodyText1),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Implement editing functionality if required
                },
                child: Text('Edit Details'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

 ```
            ceos_screen.dart: ``` import 'package:flutter/material.dart';
import 'ceo_details_screen.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/ceo.dart';

class CEOScreen extends StatefulWidget {
  @override
  _CEOScreenState createState() => _CEOScreenState();
}

class _CEOScreenState extends State<CEOScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Future<List<CEO>>? ceosFuture;

  @override
  void initState() {
    super.initState();
    ceosFuture = _firebaseService.getCEOs();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CEOs'),
      ),
      body: FutureBuilder<List<CEO>>(
        future: ceosFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null || snapshot.data!.isEmpty) {
            return Center(child: Text("No CEOs found"));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                CEO ceo = snapshot.data![index];
                return ListTile(
                  leading: Icon(Icons.person),
                  title: Text(ceo.name),
                  subtitle: Text('Contact: ${ceo.email}'),
                  onTap: () {
                    Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => CEODetailsScreen(ceoId: ceo.id),
                    ));
                  },
                );
              },
            );
          }
        },
      ),
    );
  }
}

 ```
            alerts_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/alert.dart';

class AlertsScreen extends StatefulWidget {
  @override
  _AlertsScreenState createState() => _AlertsScreenState();
}

class _AlertsScreenState extends State<AlertsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Future<List<Alert>>? alertsFuture;

  @override
  void initState() {
    super.initState();
    alertsFuture = _firebaseService.getAlerts();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alerts'),
      ),
      body: FutureBuilder<List<Alert>>(
        future: alertsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null || snapshot.data!.isEmpty) {
            return Center(child: Text("No alerts found"));
          } else {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                Alert alert = snapshot.data![index];
                return ListTile(
                  leading: Icon(Icons.warning, color: Colors.red),
                  title: Text(alert.title),
                  subtitle: Text('Urgency: ${alert.urgency}'),
                  onTap: () {
                    // Optionally implement navigation to detailed alert page or handle it directly
                  },
                );
              },
            );
          }
        },
      ),
    );
  }
}

 ```
            ceo_details_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/ceo.dart';

class CEODetailsScreen extends StatefulWidget {
  final String ceoId;

  CEODetailsScreen({Key? key, required this.ceoId}) : super(key: key);

  @override
  _CEODetailsScreenState createState() => _CEODetailsScreenState();
}

class _CEODetailsScreenState extends State<CEODetailsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  Future<CEO?>? ceoFuture;  // Note the change to CEO?

  @override
  void initState() {
    super.initState();
    ceoFuture = _firebaseService.getCEOById(widget.ceoId); // This fetches a Future<CEO?>, matching the declaration.
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CEO Details'),
      ),
      body: FutureBuilder<CEO?>(
        future: ceoFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null) {
            return Center(child: Text("No CEO found"));
          } else {
            CEO? ceo = snapshot.data;  // CEO is nullable, handle it appropriately.
            return SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text('Name: ${ceo?.name ?? 'Not available'}', style: Theme.of(context).textTheme.headline6),
                  SizedBox(height: 10),
                  Text('Email: ${ceo?.email ?? 'Not available'}', style: Theme.of(context).textTheme.bodyText1),
                  SizedBox(height: 10),
                  Text('WhatsApp Link: ${ceo?.whatsappLink ?? 'Not available'}', style: Theme.of(context).textTheme.bodyText1),
                  SizedBox(height: 10),
                  Text('Description: ${ceo?.description ?? 'Not available'}', style: Theme.of(context).textTheme.bodyText1),
                ],
              ),
            );
          }
        },
      ),
    );
  }
}

 ```
        ceo/
            ceo_dashboard.dart: ``` import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../core/services/firebase_service.dart';
import 'manage_company_screen.dart';
import 'manage_projects_screen.dart';
import 'status_update_screen.dart';
import '../../core/models/ceo.dart'; // Import the CEO model

class CEODashboard extends StatefulWidget {
  @override
  _CEODashboardState createState() => _CEODashboardState();
}

class _CEODashboardState extends State<CEODashboard> {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseAuth _auth = FirebaseAuth.instance;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CEO Dashboard'),
      ),
      body: FutureBuilder<CEO?>(
        future: _firebaseService.getCEOById(_auth.currentUser!.uid),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("Error: ${snapshot.error}"));
          } else if (snapshot.data == null) {
            return Center(child: Text("CEO not found")); 
          } else {
            CEO ceo = snapshot.data!;
            return SingleChildScrollView(
              padding: EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Center(
                    child: Text(
                      'Welcome ${ceo.name}',
                      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                    ),
                  ),
                  SizedBox(height: 20),
                  Text(
                    'Company: ${ceo.companyId}', // Assuming CEO model has companyId
                    style: TextStyle(fontSize: 18),
                  ),
                  SizedBox(height: 20),
                  _buildActionCard(
                    title: 'Manage Company',
                    icon: Icons.business,
                    onTap: () => Navigator.of(context).push(MaterialPageRoute(
                      builder: (_) => ManageCompanyScreen(ceo: ceo), // Pass CEO data
                    )),
                  ),
                  SizedBox(height: 20),
                  _buildActionCard(
                    title: 'Manage Projects',
                    icon: Icons.work,
                    onTap: () => Navigator.of(context).push(MaterialPageRoute(
                      builder: (_) => ManageProjectsScreen(ceo: ceo),
                    )),
                  ),
                  SizedBox(height: 20),
                  _buildActionCard(
                    title: 'Update Status',
                    icon: Icons.warning,
                    onTap: () => Navigator.of(context).push(MaterialPageRoute(
                      builder: (_) => StatusUpdateScreen(ceo: ceo),
                    )),
                  ),
                  SizedBox(height: 20),
                  // Add more action cards or other widgets as needed 
                ],
              ),
            );
          }
        },
      ),
    );
  }

  Widget _buildActionCard({
    required String title,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return Card(
      child: InkWell(
        onTap: onTap,
        child: Container(
          padding: EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Icon(icon, size: 50),
              SizedBox(height: 10),
              Text(title, style: TextStyle(fontSize: 18)),
            ],
          ),
        ),
      ),
    );
  }
} ```
            manage_company_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/company.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ManageCompanyScreen extends StatefulWidget {
  @override
  _ManageCompanyScreenState createState() => _ManageCompanyScreenState();
}

class _ManageCompanyScreenState extends State<ManageCompanyScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final _formKey = GlobalKey<FormState>();
  Company? _company;

  TextEditingController _employeesController = TextEditingController();
  TextEditingController _capitalController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _fetchCompanyData();
  }

  Future<void> _fetchCompanyData() async {
    try {
      User? user = _auth.currentUser;
      if (user != null) {
        // Assuming CEO's document ID in Firestore is the same as their Auth ID
        Company? company = await _firebaseService.getCompanyById(user.uid);
        setState(() {
          _company = company;
          _employeesController.text = company!.employees.toString(); 
          _capitalController.text = company.capital.toStringAsFixed(2);
        });
      }
    } catch (e) {
      print('Error fetching company data: $e');
    }
  }

  Future<void> _updateCompanyData() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      if (_company != null) {
        try {
          await _firebaseService.updateCompany(_company!.id, {
            'employees': int.parse(_employeesController.text),
            'capital': double.parse(_capitalController.text),
          });

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Company information updated!')),
          );
        } catch (e) {
          print('Error updating company data: $e');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to update company information.')),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Manage Company'),
      ),
      body: _company == null
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: <Widget>[
                    Text(
                      'Company Name: ${_company!.name}',
                      style: Theme.of(context).textTheme.headline6,
                    ),
                    SizedBox(height: 20),
                    TextFormField(
                      controller: _employeesController,
                      decoration: InputDecoration(labelText: 'Number of Employees'),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter the number of employees';
                        }
                        return null;
                      },
                    ),
                    SizedBox(height: 20),
                    TextFormField(
                      controller: _capitalController,
                      decoration: InputDecoration(labelText: 'Capital'),
                      keyboardType: TextInputType.numberWithOptions(decimal: true),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter the company capital';
                        }
                        return null;
                      },
                    ),
                    SizedBox(height: 30),
                    ElevatedButton(
                      onPressed: _updateCompanyData,
                      child: Text('Update Information'),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
} ```
            manage_projects_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/project.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ManageProjectsScreen extends StatefulWidget {
  @override
  _ManageProjectsScreenState createState() => _ManageProjectsScreenState();
}

class _ManageProjectsScreenState extends State<ManageProjectsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final _formKey = GlobalKey<FormState>();
  TextEditingController _projectNameController = TextEditingController();
  TextEditingController _budgetController = TextEditingController();
  TextEditingController _teamMembersController = TextEditingController();
  DateTime _startDate = DateTime.now();
  DateTime _endDate = DateTime.now();

  @override
  void dispose() {
    _projectNameController.dispose();
    _budgetController.dispose();
    _teamMembersController.dispose();
    super.dispose();
  }

  Future<void> _selectStartDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != _startDate)
      setState(() {
        _startDate = picked;
      });
  }

  Future<void> _selectEndDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _endDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != _endDate)
      setState(() {
        _endDate = picked;
      });
  }

  Future<void> _addProject() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      try {
        String companyId = _auth.currentUser!.uid; // Assuming CEO ID is the same as the authenticated user ID
        Project newProject = Project(
          id: '', // The ID will be generated by Firebase
          name: _projectNameController.text,
          companyId: companyId,
          startDate: _startDate,
          endDate: _endDate,
          budget: double.parse(_budgetController.text),
          teamMembers: _teamMembersController.text.split(','),
        );
        await _firebaseService.addProject(newProject);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('Project added successfully!'),
        ));
        _projectNameController.clear();
        _budgetController.clear();
        _teamMembersController.clear();
        setState(() {
          _startDate = DateTime.now();
          _endDate = DateTime.now();
        });
      } catch (e) {
        print("Error adding project: $e");
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('Failed to add project. Please try again.'),
        ));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Manage Projects'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _projectNameController,
                decoration: InputDecoration(labelText: 'Project Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter project name';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),
              TextFormField(
                controller: _budgetController,
                decoration: InputDecoration(labelText: 'Budget'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter budget';
                  }
                  if (double.tryParse(value) == null) {
                    return 'Please enter a valid number';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),
              TextFormField(
                controller: _teamMembersController,
                decoration: InputDecoration(labelText: 'Team Members (comma separated)'),
              ),
              SizedBox(height: 16.0),
              Row(
                children: [
                  Expanded(
                    child: Text(
                      'Start Date: ${_startDate.toLocal()}'.split(' ')[0],
                    ),
                  ),
                  TextButton(
                    onPressed: () => _selectStartDate(context),
                    child: Text('Change Date'),
                  ),
                ],
              ),
              SizedBox(height: 16.0),
              Row(
                children: [
                  Expanded(
                    child: Text(
                      'End Date: ${_endDate.toLocal()}'.split(' ')[0],
                    ),
                  ),
                  TextButton(
                    onPressed: () => _selectEndDate(context),
                    child: Text('Change Date'),
                  ),
                ],
              ),
              SizedBox(height: 32.0),
              ElevatedButton(
                onPressed: _addProject,
                child: Text('Add Project'),
              ),
            ],
          ),
        ),
      ),
    );
  }
} ```
            project_details_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import '../../core/models/project.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ProjectDetailsScreen extends StatefulWidget {
  final String projectId;

  ProjectDetailsScreen({Key? key, required this.projectId}) : super(key: key);

  @override
  _ProjectDetailsScreenState createState() => _ProjectDetailsScreenState();
}

class _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  TextEditingController _projectNameController = TextEditingController();
  TextEditingController _budgetController = TextEditingController();
  TextEditingController _teamMembersController = TextEditingController();
  DateTime _startDate = DateTime.now();
  DateTime _endDate = DateTime.now();

  Future<Project?>? _loadProjectDetails() async {
    try {
      return await _firebaseService.getProjectById(widget.projectId);
    } catch (e) {
      print('Error fetching project details: $e');
      return null;
    }
  }

  @override
  void initState() {
    super.initState();
    _loadProjectDetails()?.then((project) {
      if (project != null) {
        _projectNameController.text = project.name;
        _budgetController.text = project.budget.toString();
        _teamMembersController.text = project.teamMembers.join(', ');
        _startDate = project.startDate;
        _endDate = project.endDate;
      }
    });
  }

  void _updateProject() async {
    try {
      final updatedProject = Project(
        id: widget.projectId,
        name: _projectNameController.text,
        companyId: _auth.currentUser!.uid,
        startDate: _startDate,
        endDate: _endDate,
        budget: double.parse(_budgetController.text),
        teamMembers: _teamMembersController.text.split(', '),
      );
      await _firebaseService.updateProject(updatedProject);
      Navigator.pop(context);
    } catch (e) {
      print('Error updating project: $e');
      // Handle error (e.g., show a snackbar)
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Project Details'),
      ),
      body: FutureBuilder<Project?>(
        future: _loadProjectDetails(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (snapshot.data == null) {
            return Center(child: Text('No project found'));
          } else {
            return SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  TextField(
                    controller: _projectNameController,
                    decoration: InputDecoration(labelText: 'Project Name'),
                  ),
                  SizedBox(height: 10),
                  TextField(
                    controller: _budgetController,
                    keyboardType: TextInputType.number,
                    decoration: InputDecoration(labelText: 'Budget'),
                  ),
                  SizedBox(height: 10),
                  TextField(
                    controller: _teamMembersController,
                    decoration: InputDecoration(labelText: 'Team Members (comma-separated)'),
                  ),
                  SizedBox(height: 10),
                  Row(
                    children: [
                      Text('Start Date: '),
                      SizedBox(width: 10),
                      ElevatedButton(
                        onPressed: () async {
                          final pickedDate = await showDatePicker(
                            context: context,
                            initialDate: _startDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2101),
                          );
                          if (pickedDate != null && pickedDate != _startDate) {
                            setState(() {
                              _startDate = pickedDate;
                            });
                          }
                        },
                        child: Text('${_startDate.toLocal()}'.split(' ')[0]),
                      ),
                    ],
                  ),
                  SizedBox(height: 10),
                  Row(
                    children: [
                      Text('End Date: '),
                      SizedBox(width: 10),
                      ElevatedButton(
                        onPressed: () async {
                          final pickedDate = await showDatePicker(
                            context: context,
                            initialDate: _endDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2101),
                          );
                          if (pickedDate != null && pickedDate != _endDate) {
                            setState(() {
                              _endDate = pickedDate;
                            });
                          }
                        },
                        child: Text('${_endDate.toLocal()}'.split(' ')[0]),
                      ),
                    ],
                  ),
                  SizedBox(height: 20),
                  Center(
                    child: ElevatedButton(
                      onPressed: _updateProject,
                      child: Text('Update Project'),
                    ),
                  ),
                ],
              ),
            );
          }
        },
      ),
    );
  }
} ```
            status_update_screen.dart: ``` import 'package:flutter/material.dart';
import '../../core/services/firebase_service.dart';
import 'package:firebase_auth/firebase_auth.dart';

class StatusUpdateScreen extends StatefulWidget {
  @override
  _StatusUpdateScreenState createState() => _StatusUpdateScreenState();
}

class _StatusUpdateScreenState extends State<StatusUpdateScreen> {
  final FirebaseService _firebaseService = FirebaseService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  String? _selectedStatus; // To store the selected status

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Update Company Status'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            DropdownButton<String>(
              value: _selectedStatus,
              hint: Text('Select Status'),
              items: ['Green', 'Yellow', 'Red']
                  .map((status) => DropdownMenuItem(
                        value: status,
                        child: Text(status),
                      ))
                  .toList(),
              onChanged: (value) {
                setState(() {
                  _selectedStatus = value;
                });
              },
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _selectedStatus != null ? _updateStatus : null,
              child: Text('Update Status'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _updateStatus() async {
    // 1. Get the CEO's company ID.
    User? user = _auth.currentUser;
    if (user == null) {
      // Handle the case where the user is not logged in.
      print('User not logged in!');
      return;
    }
    String? ceoId = user.uid; // Assuming the user ID is the CEO ID

    // Fetch the CEO's details from Firestore to get the companyId
    var ceo = await _firebaseService.getCEOById(ceoId);
    if (ceo == null) {
      print('CEO not found!');
      return;
    }
    String companyId = ceo.companyId; // The CEO's companyId

    // 2. Update the company's status in Firestore.
    try {
      await _firebaseService.updateCompanyStatus(companyId, _selectedStatus!);
      // You might want to display a success message or navigate back
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Company Status Updated Successfully'),
      ));
    } catch (e) {
      print('Error updating company status: $e');
      // Handle the error, display an error message
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text('Failed to update company status'),
      ));
    }
  }
} ```
    core/
        models/
            company.dart: ``` class Company {
  final String id;
  final String name;
  final String ceoId;
  final int employees;
  final double capital;
  String status; // 'Green', 'Yellow', 'Red'

  Company({
    required this.id,
    required this.name,
    required this.ceoId,
    required this.employees,
    required this.capital,
    this.status = 'Green', // Default status
  });

  factory Company.fromMap(Map<String, dynamic> data, String documentId) {
    return Company(
      id: documentId,
      name: data['name'],
      ceoId: data['ceoId'],
      employees: data['employees'],
      capital: data['capital'],
      status: data['status'] ?? 'Green', // Get status from data, default to 'Green'
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'ceoId': ceoId,
      'employees': employees,
      'capital': capital,
      'status': status, // Include status in the map
    };
  }
}

 ```
            project.dart: ``` import 'package:cloud_firestore/cloud_firestore.dart';

class Project {
  final String id;
  final String name;
  final String companyId;
  final DateTime startDate;
  final DateTime endDate;
  final double budget;
  final List<String> teamMembers;
  bool isCompleted; // Add isCompleted property

  Project({
    required this.id,
    required this.name,
    required this.companyId,
    required this.startDate,
    required this.endDate,
    required this.budget,
    required this.teamMembers,
    this.isCompleted = false, // Default to not completed
  });

  factory Project.fromMap(Map<String, dynamic> data, String documentId) {
    return Project(
      id: documentId,
      name: data['name'],
      companyId: data['companyId'],
      startDate: (data['startDate'] as Timestamp).toDate(),
      endDate: (data['endDate'] as Timestamp).toDate(),
      budget: data['budget'],
      teamMembers: List<String>.from(data['teamMembers']),
      isCompleted: data['isCompleted'] ?? false, // Get isCompleted from data
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'companyId': companyId,
      'startDate': startDate,
      'endDate': endDate,
      'budget': budget,
      'teamMembers': teamMembers,
      'isCompleted': isCompleted, // Include isCompleted in the map
    };
  }
}

 ```
            ceo.dart: ``` class CEO {
  final String id;
  final String name;
  final String email;
  final String whatsappLink;
  final String description;
  final String companyId; // Add companyId property

  CEO({
    required this.id,
    required this.name,
    required this.email,
    required this.whatsappLink,
    required this.description,
    required this.companyId, // Make companyId required
  });

  factory CEO.fromMap(Map<String, dynamic> data, String documentId) {
    return CEO(
      id: documentId,
      name: data['name'],
      email: data['email'],
      whatsappLink: data['whatsappLink'],
      description: data['description'],
      companyId: data['companyId'], // Get companyId from data
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'email': email,
      'whatsappLink': whatsappLink,
      'description': description,
      'companyId': companyId, // Include companyId in the map
    };
  }
}

 ```
            alerts.dart: ``` class Alert {
  final String id;
  final String title;
  final String description;
  final String urgency; // Can be 'High', 'Medium', or 'Low'
  final String companyId; // Optional, depending on whether you want to link alerts to specific companies

  Alert({
    required this.id,
    required this.title,
    required this.description,
    required this.urgency,
    this.companyId = '',
  });

  factory Alert.fromMap(Map<String, dynamic> data, String documentId) {
    return Alert(
      id: documentId,
      title: data['title'],
      description: data['description'],
      urgency: data['urgency'],
      companyId: data['companyId'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'urgency': urgency,
      'companyId': companyId,
    };
  }
}
 ```
        services/
            firebase_service.dart: ``` import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/ceo.dart';
import '../models/company.dart';
import '../models/project.dart';
import '../models/alert.dart'; // Ensure all model imports are correct

class FirebaseService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  // Fetching a list of companies
  Future<List<Company>> getCompanies() async {
    var snapshot = await _db.collection('companies').get();
    return snapshot.docs.map((doc) => Company.fromMap(doc.data() as Map<String, dynamic>, doc.id)).toList();
  }

  // Fetch a single company by ID
  Future<Company?> getCompanyById(String id) async {
    var doc = await _db.collection('companies').doc(id).get();
    return doc.exists ? Company.fromMap(doc.data() as Map<String, dynamic>, doc.id) : null;
  }

  // Fetching a list of projects
  Future<List<Project>> getProjects() async {
    var snapshot = await _db.collection('projects').get();
    return snapshot.docs.map((doc) => Project.fromMap(doc.data() as Map<String, dynamic>, doc.id)).toList();
  }

  // Fetch a single project by ID
  Future<Project?> getProjectById(String id) async {
    var doc = await _db.collection('projects').doc(id).get();
    return doc.exists ? Project.fromMap(doc.data() as Map<String, dynamic>, doc.id) : null;
  }

  // Fetching a list of CEOs
  Future<List<CEO>> getCEOs() async {
    var snapshot = await _db.collection('ceos').get();
    return snapshot.docs.map((doc) => CEO.fromMap(doc.data() as Map<String, dynamic>, doc.id)).toList();
  }

  // Fetch a single CEO by ID
  Future<CEO?> getCEOById(String id) async {
    var doc = await _db.collection('ceos').doc(id).get();
    return doc.exists ? CEO.fromMap(doc.data() as Map<String, dynamic>, doc.id) : null;
  }

  // Fetching a list of alerts
  Future<List<Alert>> getAlerts() async {
    var snapshot = await _db.collection('alerts').get();
    return snapshot.docs.map((doc) => Alert.fromMap(doc.data() as Map<String, dynamic>, doc.id)).toList();
  }

// Additional CRUD operations and other methods...
}
 ```
        utilities/
            constants.dart: ``` empty ```
            helpers.dart: ``` empty ```
    ui/
        widgets/
            company_card.dart: ``` empty ```
            project_card.dart: ``` empty ```
            status_badge.dart: ``` empty ```
            alert_card.dart: ``` empty ```
            ceo_card.dart: ``` empty ```
