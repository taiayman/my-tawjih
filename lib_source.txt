

    File: C:\Users\LENOVO\Desktop\business_management_app\lib\main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:business_management_app/screens/login.dart';
import 'package:business_management_app/screens/boss_dashboard.dart';
import 'package:business_management_app/screens/ceo_dashboard.dart';
import 'package:business_management_app/screens/signup.dart';
import 'package:business_management_app/screens/profile_screen.dart';
import 'package:business_management_app/screens/company_details_screen.dart';
import 'package:business_management_app/screens/add_project_screen.dart';
import 'package:business_management_app/screens/initial_screen.dart';
import 'package:business_management_app/screens/ai_chat_screen.dart';
import 'package:business_management_app/screens/settings_screen.dart';
import 'package:business_management_app/screens/notifications_screen.dart';
import 'package:business_management_app/screens/admin_screen.dart';
import 'package:business_management_app/utils/theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  bool _isDarkTheme = false;

  void _toggleTheme() {
    setState(() {
      _isDarkTheme = !_isDarkTheme;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Business Management App',
      theme: appTheme(_isDarkTheme),
      home: InitialScreen(),
      routes: {
        '/login': (context) => LoginScreen(),
        '/signup': (context) => SignUpScreen(),
        '/boss_dashboard': (context) => BossDashboard(isDarkTheme: _isDarkTheme),
        '/ceo_dashboard': (context) => CEODashboard(isDarkTheme: _isDarkTheme), // Pass theme to CEODashboard
        '/profile': (context) => ProfileScreen(),
        '/company_details': (context) => CompanyDetailsScreen(companyId: ModalRoute.of(context)!.settings.arguments as String),
        '/add_project': (context) => AddProjectScreen(
          companyId: ModalRoute.of(context)!.settings.arguments as String,
          companyName: 'companyNamePlaceholder', // Replace with the actual company name
        ),
        '/ai_chat': (context) => AIChatScreen(isDarkTheme: _isDarkTheme),
        '/settings': (context) => SettingsScreen(onThemeChanged: _toggleTheme, isDarkTheme: _isDarkTheme),
        '/admin': (context) => AdminScreen(),
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\models\company.dart
class Company {
  final String id;
  final String name;
  final String ceoId;
  final String ceoName;
  final String ceoEmail;
  final String ceoPhone;
  final String ceoWhatsApp;
  final int employeeCount;
  final List<String> projects;
  final String statusColor;
  final String imageUrl;

  Company({
    required this.id,
    required this.name,
    required this.ceoId,
    required this.ceoName,
    required this.ceoEmail,
    required this.ceoPhone,
    required this.ceoWhatsApp,
    required this.employeeCount,
    required this.projects,
    required this.statusColor,
    required this.imageUrl,
  });

  factory Company.fromMap(Map<String, dynamic> data) {
    return Company(
      id: data['id'] ?? '',
      name: data['name'] ?? 'Unnamed Company',
      ceoId: data['ceoId'] ?? '',
      ceoName: data['ceoName'] ?? 'Unknown CEO',
      ceoEmail: data['ceoEmail'] ?? '',
      ceoPhone: data['ceoPhone'] ?? '',
      ceoWhatsApp: data['ceoWhatsApp'] ?? '',
      employeeCount: data['employeeCount'] ?? 0,
      projects: List<String>.from(data['projects'] ?? []),
      statusColor: data['statusColor'] ?? 'green',
      imageUrl: data['imageUrl'] ?? 'https://via.placeholder.com/150',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'ceoId': ceoId,
      'ceoName': ceoName,
      'ceoEmail': ceoEmail,
      'ceoPhone': ceoPhone,
      'ceoWhatsApp': ceoWhatsApp,
      'employeeCount': employeeCount,
      'projects': projects,
      'statusColor': statusColor,
      'imageUrl': imageUrl,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\models\notification.dart
class Notification {
  final String id;
  final String ceoName;
  final String companyName;
  final DateTime date;
  final String message;
  final bool isRead;
  final String senderId;

  Notification({
    required this.id,
    required this.ceoName,
    required this.companyName,
    required this.date,
    required this.message,
    required this.senderId,
    this.isRead = false,
  });

  factory Notification.fromMap(Map<String, dynamic> data) {
    return Notification(
      id: data['id'] ?? '',
      ceoName: data['ceoName'] ?? 'Unknown CEO',
      companyName: data['companyName'] ?? 'Unknown Company',
      date: DateTime.tryParse(data['date']) ?? DateTime.now(),
      message: data['message'] ?? '',
      senderId: data['senderId'] ?? '',
      isRead: data['isRead'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'ceoName': ceoName,
      'companyName': companyName,
      'date': date.toIso8601String(),
      'message': message,
      'senderId': senderId,
      'isRead': isRead,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\models\project.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Project {
  final String id;
  final String name;
  final DateTime start;
  final DateTime end;
  final double budget;
  final String details;
  final String goals;
  final List<String> teamMemberNames;
  final String status;
  final String companyName; // Ensure this field is present
  final String leaderId;
  final String companyId;
  final List<String> teamMemberIds;

  Project({
    required this.id,
    required this.name,
    required this.start,
    required this.end,
    required this.budget,
    required this.details,
    required this.goals,
    required this.teamMemberNames,
    required this.status,
    required this.companyName, // Initialize this field
    required this.leaderId,
    required this.companyId,
    required this.teamMemberIds,
  });

  factory Project.fromMap(Map<String, dynamic> data) {
    return Project(
      id: data['id'] ?? '',
      name: data['name'] ?? '',
      start: _convertToDateTime(data['start']),
      end: _convertToDateTime(data['end']),
      budget: data['budget']?.toDouble() ?? 0.0,
      details: data['details'] ?? '',
      goals: data['goals'] ?? '',
      teamMemberNames: data['teamMemberNames'] != null ? List<String>.from(data['teamMemberNames']) : [],
      status: data['status'] ?? '',
      companyName: data['companyName'] ?? '', // Fetch this field
      leaderId: data['leaderId'] ?? '',
      companyId: data['companyId'] ?? '',
      teamMemberIds: data['teamMemberIds'] != null ? List<String>.from(data['teamMemberIds']) : [],
    );
  }

  static DateTime _convertToDateTime(dynamic date) {
    if (date is Timestamp) {
      return date.toDate();
    } else if (date is String) {
      return DateTime.parse(date);
    } else {
      throw Exception("Invalid date format");
    }
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'start': start.toIso8601String(),
      'end': end.toIso8601String(),
      'budget': budget,
      'details': details,
      'goals': goals,
      'teamMemberNames': teamMemberNames,
      'status': status,
      'companyName': companyName, // Include this field
      'leaderId': leaderId,
      'companyId': companyId,
      'teamMemberIds': teamMemberIds,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\models\team_member.dart
// lib/models/team_member.dart

class TeamMember {
  final String id;
  final String name;
  final String profileUrl;

  TeamMember({required this.id, required this.name, required this.profileUrl});

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'profileUrl': profileUrl,
    };
  }

  factory TeamMember.fromMap(Map<String, dynamic> map) {
    return TeamMember(
      id: map['id'],
      name: map['name'],
      profileUrl: map['profileUrl'],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\models\user.dart
class User {
  String id;
  String name;
  String email;
  String role;
  String companyId;
  String whatsapp;
  String description;
  String profileImage;

  User({
    required this.id,
    required this.name,
    required this.email,
    required this.role,
    required this.companyId,
    required this.whatsapp,
    required this.description,
    required this.profileImage,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'email': email,
      'role': role,
      'companyId': companyId,
      'whatsapp': whatsapp,
      'description': description,
      'profileImage': profileImage,
    };
  }

  factory User.fromMap(Map<String, dynamic> map) {
    return User(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      email: map['email'] ?? '',
      role: map['role'] ?? '',
      companyId: map['companyId'] ?? '',
      whatsapp: map['whatsapp'] ?? '',
      description: map['description'] ?? '',
      profileImage: map['profileImage'] ?? '',
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\add_project_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:uuid/uuid.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/services/project_service.dart';
import 'package:intl/intl.dart';

class AddProjectScreen extends StatefulWidget {
  final String companyId;
  final String companyName; // Add this line

  AddProjectScreen({required this.companyId, required this.companyName}); // Update constructor

  @override
  _AddProjectScreenState createState() => _AddProjectScreenState();
}

class _AddProjectScreenState extends State<AddProjectScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _goalsController = TextEditingController();
  final _teamMembersController = TextEditingController();
  final _startDateController = TextEditingController();
  final _endDateController = TextEditingController();
  final _budgetController = TextEditingController();
  final ProjectService _projectService = ProjectService();
  final DateFormat _dateFormat = DateFormat('yyyy-MM-dd');

  Future<void> _selectDate(BuildContext context, TextEditingController controller) async {
    DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );

    if (pickedDate != null) {
      setState(() {
        controller.text = _dateFormat.format(pickedDate);
      });
    }
  }

 void _submit() async {
  if (_formKey.currentState!.validate()) {
    final newProject = Project(
      id: Uuid().v4(),
      name: _nameController.text,
      start: DateTime.parse(_startDateController.text),
      end: DateTime.parse(_endDateController.text),
      budget: double.parse(_budgetController.text),
      details: _descriptionController.text,
      goals: _goalsController.text,
      teamMemberNames: _teamMembersController.text.split(', '),
      status: 'ongoing',
      leaderId: 'leader-id', // Replace with actual leader ID
      companyId: widget.companyId,
      companyName: widget.companyName, // Pass this line
      teamMemberIds: [],
    );

    await _projectService.addProject(newProject);
    Navigator.pop(context);
  } else {
    print('Form validation failed');
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Add Project', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              children: [
                _buildTextFormField(_nameController, 'Project Name'),
                _buildTextFormField(_descriptionController, 'Description'),
                _buildTextFormField(_goalsController, 'Goals'),
                _buildTextFormField(_teamMembersController, 'Team Members (comma separated)'),
                _buildDateFormField(_startDateController, 'Start Date', context),
                _buildDateFormField(_endDateController, 'End Date', context),
                _buildTextFormField(_budgetController, 'Budget', isNumeric: true),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _submit,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Color(0xFFD97757),
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                    textStyle: GoogleFonts.nunito(fontSize: 18),
                  ),
                  child: Text('Add Project', style: TextStyle(color: Colors.white)),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextFormField(TextEditingController controller, String labelText, {bool isNumeric = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        keyboardType: isNumeric ? TextInputType.number : TextInputType.text,
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: GoogleFonts.nunito(),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please enter a $labelText';
          }
          if (isNumeric) {
            try {
              double.parse(value);
            } catch (e) {
              return 'Invalid number format';
            }
          }
          return null;
        },
        style: GoogleFonts.nunito(),
      ),
    );
  }

  Widget _buildDateFormField(TextEditingController controller, String labelText, BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        readOnly: true,
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: GoogleFonts.nunito(),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        onTap: () => _selectDate(context, controller),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please enter a $labelText';
          }
          try {
            DateTime.parse(value);
          } catch (e) {
            return 'Invalid date format. Please use YYYY-MM-DD';
          }
          return null;
        },
        style: GoogleFonts.nunito(),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\admin_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:uuid/uuid.dart';

class AdminScreen extends StatefulWidget {
  @override
  _AdminScreenState createState() => _AdminScreenState();
}

class _AdminScreenState extends State<AdminScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final List<Map<String, dynamic>> ceoData = [
    {
      "email": "Saber@Mormove.com",
      "password": "Mormove12345",
      "companyName": "Mormove",
      "ceoName": "SABER ABDERRAHIME",
      "ceoEmail": "ceo1@example.com",
      "ceoPhone": "1234567890",
      "ceoWhatsApp": "1234567890",
      "employeeCount": 15,
      "capital": "250.000,00DH",
      "services": ["Moving", "Professional logistics", "Tools renting", "Renting moving vehicles"],
      "projects": [],
      "statusColor": "Green",
    },
    {
      "email": "Hiba@Morjib.com",
      "password": "Morjib12345",
      "companyName": "Morjib",
      "ceoName": "HIBA LMOUAACHI",
      "ceoEmail": "ceo2@example.com",
      "ceoPhone": "0987654321",
      "ceoWhatsApp": "0987654321",
      "employeeCount": 20,
      "capital": "100.000,00DH",
      "services": ["Goods delivery", "Goods preparation"],
      "projects": [],
      "statusColor": "Blue",
    },
    {
      "email": "Mounir@SMHorizon.com",
      "password": "SMHorizon12345",
      "companyName": "SMHorizon",
      "ceoName": "MOUNIR SABIR",
      "ceoEmail": "ceo3@example.com",
      "ceoPhone": "1122334455",
      "ceoWhatsApp": "1122334455",
      "employeeCount": 13,
      "capital": "50.000,00DH",
      "services": ["Marketing", "Copywriting", "Consulting", "Business Strategies (Africa & GCC)"],
      "projects": [],
      "statusColor": "Red",
    },
    {
      "email": "Hafsa@12Daba.com",
      "password": "12Daba12345",
      "companyName": "12 Daba",
      "ceoName": "HAFSA BOUAZZA",
      "ceoEmail": "ceo4@example.com",
      "ceoPhone": "2233445566",
      "ceoWhatsApp": "2233445566",
      "employeeCount": 25,
      "capital": "40.000,00DH",
      "services": ["Goods delivery", "Food delivery"],
      "projects": [],
      "statusColor": "Yellow",
    },
    {
      "email": "Hiba@Investdar.com",
      "password": "Investdar12345",
      "companyName": "Investdar",
      "ceoName": "HIBA LMOUAACHI",
      "ceoEmail": "ceo5@example.com",
      "ceoPhone": "3344556677",
      "ceoWhatsApp": "3344556677",
      "employeeCount": 9,
      "capital": "120.000,00DH",
      "services": ["Real Estate investment", "Renting Investment", "Stocks and equities"],
      "projects": [],
      "statusColor": "Purple",
    },
    {
      "email": "Mounir@xxxxxxx.com",
      "password": "xxxxxxx12345",
      "companyName": "xxxxxxx",
      "ceoName": "MOUNIR SABIR",
      "ceoEmail": "ceo6@example.com",
      "ceoPhone": "4455667788",
      "ceoWhatsApp": "4455667788",
      "employeeCount": 21,
      "capital": "1.000.000,00DH",
      "services": ["Educational field", "Online Coaching", "Online teaching"],
      "projects": [],
      "statusColor": "Orange",
    },
    {
      "email": "Mehdi@MadConsolutions.com",
      "password": "MadConsolutions12345",
      "companyName": "MadConsolutions",
      "ceoName": "MAHEDI HASAN MAJID",
      "ceoEmail": "ceo7@example.com",
      "ceoPhone": "5566778899",
      "ceoWhatsApp": "5566778899",
      "employeeCount": 32,
      "capital": "30.000,00DH",
      "services": ["APP creation", "Website creation", "Network security", "Hosting"],
      "projects": [],
      "statusColor": "Brown",
    },
  ];

  void _deleteAllData(BuildContext context) async {
    try {
      // Deleting users collection
      var usersSnapshot = await _firestore.collection('users').get();
      for (var doc in usersSnapshot.docs) {
        await _firestore.collection('users').doc(doc.id).delete();
      }

      // Deleting companies collection
      var companiesSnapshot = await _firestore.collection('companies').get();
      for (var doc in companiesSnapshot.docs) {
        await _firestore.collection('companies').doc(doc.id).delete();
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('All data deleted successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error deleting data: $e')),
      );
    }
  }

  void _addData(BuildContext context) async {
    try {
      for (var ceo in ceoData) {
        // Create user
        UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
          email: ceo['email']!,
          password: ceo['password']!,
        );

        String userId = userCredential.user!.uid;

        // Add user data to Firestore
        await _firestore.collection('users').doc(userId).set({
          'id': userId,
          'name': ceo['ceoName']!,
          'email': ceo['ceoEmail']!,
          'role': 'CEO',
          'companyId': '',
          'whatsapp': ceo['ceoWhatsApp']!,
          'description': '',
          'profileImage': '',
        });

        // Create company
        String companyId = Uuid().v4();
        await _firestore.collection('companies').doc(companyId).set({
          'id': companyId,
          'name': ceo['companyName']!,
          'ceoId': userId,
          'ceoName': ceo['ceoName']!,
          'ceoEmail': ceo['ceoEmail']!,
          'ceoPhone': ceo['ceoPhone']!,
          'ceoWhatsApp': ceo['ceoWhatsApp']!,
          'employeeCount': ceo['employeeCount']!,
          'capital': ceo['capital']!,
          'services': ceo['services']!,
          'projects': ceo['projects']!,
          'statusColor': ceo['statusColor']!,
        });

        // Update user's companyId
        await _firestore.collection('users').doc(userId).update({
          'companyId': companyId,
        });
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Data added successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error adding data: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Admin', style: GoogleFonts.rubik()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            ElevatedButton(
              onPressed: () => _deleteAllData(context),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.rubik(fontSize: 18),
              ),
              child: Text('Delete All Data', style: TextStyle(color: Colors.white)),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _addData(context),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.rubik(fontSize: 18),
              ),
              child: Text('Add Data', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\ai_chat_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';

class AIChatScreen extends StatefulWidget {
  final bool isDarkTheme;

  AIChatScreen({required this.isDarkTheme});

  @override
  _AIChatScreenState createState() => _AIChatScreenState();
}

class _AIChatScreenState extends State<AIChatScreen> {
  final TextEditingController _controller = TextEditingController();
  List<Map<String, String>> _messages = [];
  bool _isLoading = false;

  Future<Map<String, dynamic>> fetchFirestoreData() async {
    FirebaseFirestore firestore = FirebaseFirestore.instance;

    // Fetch companies
    QuerySnapshot companySnapshot = await firestore.collection('companies').get();
    List<Map<String, dynamic>> companies = companySnapshot.docs
        .map((doc) => doc.data() as Map<String, dynamic>)
        .toList();

    // Fetch CEOs
    QuerySnapshot ceoSnapshot = await firestore.collection('ceos').get();
    List<Map<String, dynamic>> ceos = ceoSnapshot.docs
        .map((doc) => doc.data() as Map<String, dynamic>)
        .toList();

    // Fetch projects
    QuerySnapshot projectSnapshot = await firestore.collection('projects').get();
    List<Map<String, dynamic>> projects = projectSnapshot.docs
        .map((doc) => doc.data() as Map<String, dynamic>)
        .toList();

    return {
      'companies': companies,
      'ceos': ceos,
      'projects': projects,
    };
  }

  Future<void> _sendMessage(String message) async {
    setState(() {
      _messages.add({"role": "user", "content": message});
      _isLoading = true;
    });

    // Fetch Firestore data
    final firestoreData = await fetchFirestoreData();

    // Create a system message to include the context
    final contextMessage = {
      "role": "system",
      "content": "Context: Companies - ${firestoreData['companies']}, CEOs - ${firestoreData['ceos']}, Projects - ${firestoreData['projects']}"
    };

    final apiKey = 'sk-proj-zuC8iJMN0OAjBE2fdrvST3BlbkFJg6uJPDSNJzbwkzyQ0mri';
    final url = 'https://api.openai.com/v1/chat/completions';

    final payload = {
      "model": "gpt-3.5-turbo",
      "messages": [
        contextMessage,
        {"role": "user", "content": message}
      ]
    };

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $apiKey',
        },
        body: json.encode(payload),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final content = data['choices'][0]['message']['content'];
        setState(() {
          _messages.add({"role": "ai", "content": content});
        });
      } else {
        setState(() {
          _messages.add({"role": "error", "content": 'Error: ${response.statusCode}\n${response.body}'});
        });
      }
    } catch (e) {
      setState(() {
        _messages.add({"role": "error", "content": 'Error: $e'});
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Widget _buildMessage(Map<String, String> message) {
    bool isUser = message['role'] == 'user';
    bool isAI = message['role'] == 'ai';
    return Align(
      alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        padding: EdgeInsets.all(12),
        margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        decoration: BoxDecoration(
          color: isUser ? const Color.fromARGB(255, 255, 255, 255) : (isAI ? const Color.fromARGB(255, 227, 227, 227) : Colors.red[100]),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Text(
          message['content'] ?? '',
          style: GoogleFonts.nunito(
            fontSize: 16,
            color: isUser ? const Color.fromARGB(255, 0, 0, 0) : (isAI ? Colors.black : Colors.red[900]),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'AI Chat',
          style: GoogleFonts.nunito(color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
        elevation: 0,
        // Remove the back button
        automaticallyImplyLeading: false,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              widget.isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
              widget.isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
            ],
          ),
        ),
        child: Column(
          children: [
            Expanded(
              child: ListView.builder(
                itemCount: _messages.length,
                itemBuilder: (context, index) {
                  return _buildMessage(_messages[index]);
                },
              ),
            ),
            if (_isLoading)
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: CircularProgressIndicator(),
              ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(24),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.5),
                      spreadRadius: 2,
                      blurRadius: 5,
                      offset: Offset(0, 3),
                    ),
                  ],
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _controller,
                        decoration: InputDecoration(
                          hintText: 'Enter your question',
                          border: InputBorder.none,
                          contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 15),
                        ),
                        style: GoogleFonts.nunito(fontSize: 16),
                      ),
                    ),
                    GestureDetector(
                      onTap: () {
                        if (_controller.text.isNotEmpty) {
                          _sendMessage(_controller.text);
                          _controller.clear();
                        }
                      },
                      child: Container(
                        padding: EdgeInsets.all(9),
                        decoration: BoxDecoration(
                          color: Color(0xFFD97757),
                          borderRadius: BorderRadius.circular(24),
                        ),
                        child: Icon(
                          Icons.send,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    SizedBox(width: 8),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\boss_dashboard.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/company.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/services/company_service.dart';
import 'package:business_management_app/services/project_service.dart';
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/widgets/company_card.dart';
import 'package:business_management_app/widgets/latest_project_card.dart';
import 'package:business_management_app/widgets/ceo_card.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:business_management_app/screens/project_details_screen.dart';
import 'package:business_management_app/screens/ai_chat_screen.dart';
import 'package:business_management_app/screens/settings_screen.dart';
import 'package:business_management_app/screens/notifications_screen.dart';
import 'package:business_management_app/screens/ceo_profile_screen.dart';
import 'package:business_management_app/models/user.dart' as AppUser;
import 'package:business_management_app/services/notification_service.dart';
import 'package:business_management_app/models/notification.dart' as CustomNotification;

class BossDashboard extends StatefulWidget {
  final bool isDarkTheme;

  BossDashboard({required this.isDarkTheme});

  @override
  _BossDashboardState createState() => _BossDashboardState();
}

class _BossDashboardState extends State<BossDashboard> {
  final CompanyService _companyService = CompanyService();
  final ProjectService _projectService = ProjectService();
  final UserService _userService = UserService();
  final NotificationService _notificationService = NotificationService();
  List<Company> _companies = [];
  List<Project> _projects = [];
  List<AppUser.User> _ceos = [];
  bool _hasUnreadNotifications = false;
  int _selectedIndex = 0;
  late bool _isDarkTheme;

  @override
  void initState() {
    super.initState();
    _isDarkTheme = widget.isDarkTheme;
    _loadCompanies();
    _loadProjects();
    _loadCEOs();
    _checkForUnreadNotifications();
  }

  Future<void> _loadCompanies() async {
    List<Company> companies = await _companyService.getAllCompanies();
    setState(() {
      _companies = companies;
    });
  }

  Future<void> _loadProjects() async {
    List<Project> projects = await _projectService.getAllProjects();
    setState(() {
      _projects = projects;
    });
  }

  Future<void> _loadCEOs() async {
    List<AppUser.User> ceos = await _userService.getAllCEOs();
    setState(() {
      _ceos = ceos;
    });
  }

  Future<void> _checkForUnreadNotifications() async {
    List<CustomNotification.Notification> notifications = await _notificationService.getAllNotifications();
    bool hasUnread = notifications.any((notification) => !notification.isRead);
    setState(() {
      _hasUnreadNotifications = hasUnread;
    });
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  void _handleNotificationsRead() {
    setState(() {
      _hasUnreadNotifications = false;
    });
  }

  List<Widget> _widgetOptions() {
    return <Widget>[
      Scaffold(
        appBar: AppBar(
          title: Text(
            'Boss Dashboard',
           style: GoogleFonts.nunito(color: Colors.white)),
          backgroundColor: Color(0xFFD97757),
          automaticallyImplyLeading: false, // Remove the back button
        ),
        body: BossDashboardContent(
          companies: _companies,
          projects: _projects,
          ceos: _ceos,
          isDarkTheme: _isDarkTheme,
        ),
        backgroundColor: _isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8), // Ensure background color is set here
      ),
      AIChatScreen(isDarkTheme: _isDarkTheme),
      NotificationsScreen(onNotificationsRead: _handleNotificationsRead, isDarkTheme: _isDarkTheme),
      SettingsScreen(
        onThemeChanged: () => setState(() => _isDarkTheme = !_isDarkTheme),
        isDarkTheme: _isDarkTheme,
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: _isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8), // Background color
      body: _widgetOptions().elementAt(_selectedIndex),
      bottomNavigationBar: BottomNavigationBar(
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.chat),
            label: 'AI Chat',
          ),
          BottomNavigationBarItem(
            icon: Stack(
              children: [
                Icon(Icons.notifications),
                if (_hasUnreadNotifications)
                  Positioned(
                    right: 0,
                    child: Container(
                      padding: EdgeInsets.all(1),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(6),
                      ),
                      constraints: BoxConstraints(
                        minWidth: 12,
                        minHeight: 12,
                      ),
                      child: Text(
                        '',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 8,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  )
              ],
            ),
            label: 'Notifications',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Color(0xFFD97757),
        unselectedItemColor: Colors.grey,
        onTap: _onItemTapped,
      ),
    );
  }
}

class BossDashboardContent extends StatelessWidget {
  final List<Company> companies;
  final List<Project> projects;
  final List<AppUser.User> ceos;
  final bool isDarkTheme;

  BossDashboardContent({
    required this.companies,
    required this.projects,
    required this.ceos,
    required this.isDarkTheme,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      color: isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8), // Ensure the background color is set here as well
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // My Companies section
           Padding(
  padding: const EdgeInsets.all(16.0),
  child: Text(
    'My Companies',
    style: GoogleFonts.nunito(
      fontSize: 24,
      fontWeight: FontWeight.bold,
      color: isDarkTheme ? Colors.white : Colors.black, // Change text color based on dark mode
    ),
  ),
),
            SizedBox(height: 0),
            // Company carousel
            CarouselSlider(
              options: CarouselOptions(
                height: 240.0,
                viewportFraction: 0.8,
                enlargeCenterPage: true,
                enableInfiniteScroll: true,
                scrollDirection: Axis.horizontal,
                autoPlay: false, // Disable automatic sliding
                autoPlayInterval: Duration(seconds: 3),
                autoPlayAnimationDuration: Duration(milliseconds: 800),
              ),
              items: companies.map((company) {
                return GestureDetector(
                  onTap: () {
                    Navigator.pushNamed(
                      context,
                      '/company_details',
                      arguments: company.id,
                    );
                  },
                  child: CompanyCard(company: company, isDarkTheme: isDarkTheme),
                );
              }).toList(),
            ),
            SizedBox(height: 32),
            // Latest projects section
           Padding(
  padding: const EdgeInsets.all(16.0),
  child: Text(
    'Latest Projects',
    style: GoogleFonts.nunito(
      fontSize: 24,
      fontWeight: FontWeight.bold,
      color: isDarkTheme ? Colors.white : Colors.black, // Change text color based on dark mode
    ),
  ),
),
            SizedBox(height: 0),
            // Project carousel
            CarouselSlider(
              options: CarouselOptions(
                height: 200.0,
                viewportFraction: 0.8,
                enlargeCenterPage: true,
                enableInfiniteScroll: true,
                scrollDirection: Axis.horizontal,
                autoPlay: true,
                autoPlayInterval: Duration(seconds: 3),
                autoPlayAnimationDuration: Duration(milliseconds: 800),
              ),
              items: projects.map((project) {
                return GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) =>
                            ProjectDetailsScreen(project: project, isDarkTheme: isDarkTheme),
                      ),
                    );
                  },
                  child: LatestProjectCard(project: project, isDarkTheme: isDarkTheme),
                );
              }).toList(),
            ),
            SizedBox(height: 32),
            
            // CEOs section
            Padding(
  padding: const EdgeInsets.all(16.0),
  child: Text(
    'CEOs',
    style: GoogleFonts.nunito(
      fontSize: 24,
      fontWeight: FontWeight.bold,
      color: isDarkTheme ? Colors.white : Colors.black, // Change text color based on dark mode
    ),
  ),
),
            SizedBox(height: 0),
            // CEO list
            Container(
              height: 150, // Adjust height as needed
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: ceos.length,
                itemBuilder: (context, index) {
                  return Container(
                    width: 120, // Adjust width as needed
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 8.0),
                      child: GestureDetector(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => CEOProfileScreen(ceo: ceos[index], isDarkTheme: isDarkTheme),
                            ),
                          );
                        },
                        child: CEOCard(user: ceos[index], isDarkTheme: isDarkTheme),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\ceo_dashboard.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/company.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/services/company_service.dart';
import 'package:business_management_app/services/project_service.dart';
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/models/user.dart' as AppUser;
import 'package:business_management_app/screens/add_project_screen.dart';
import 'package:business_management_app/screens/edit_project_screen.dart';
import 'package:business_management_app/screens/project_details_screen.dart';
import 'package:business_management_app/screens/report_issue_screen.dart';
import 'package:business_management_app/screens/send_notification_screen.dart';
import 'package:business_management_app/widgets/project_card.dart';
import 'package:business_management_app/utils/theme.dart'; // Import theme
import 'package:business_management_app/screens/profile_screen.dart';

class CEODashboard extends StatefulWidget {
  final bool isDarkTheme;

  CEODashboard({required this.isDarkTheme});

  @override
  _CEODashboardState createState() => _CEODashboardState();
}

class _CEODashboardState extends State<CEODashboard> {
  final CompanyService _companyService = CompanyService();
  final ProjectService _projectService = ProjectService();
  final UserService _userService = UserService();
  List<Project> _projects = [];
  Company? _selectedCompany;
  AppUser.User? _user;
  bool _isDarkTheme = false;

  @override
  void initState() {
    super.initState();
    _isDarkTheme = widget.isDarkTheme; 
    _loadUserAndCompany();
  }

  Future<void> _loadUserAndCompany() async {
    try {
      AppUser.User? user = await _userService.getCurrentUser();
      if (user == null || user.companyId.isEmpty) {
        throw Exception("User or company ID not found.");
      }

      print('User company ID: ${user.companyId}');
      setState(() {
        _user = user;
      });

      Company company = await _companyService.getCompanyById(user.companyId);
      setState(() {
        _selectedCompany = company;
      });

      _loadProjects(company.id);
    } catch (e) {
      print('Error loading user and company: $e');
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error'),
            content: Text('There was an error loading your data. Please try again later.'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('OK'),
              ),
            ],
          );
        },
      );
    }
  }

  Future<void> _loadProjects(String companyId) async {
    try {
      List<Project> projects = await _projectService.getProjectsForCompany(companyId);
      setState(() {
        _projects = projects;
      });
    } catch (e) {
      print('Error loading projects: $e');
    }
  }

  void _deleteProject(String projectId) async {
    await _projectService.deleteProject(projectId);
    _loadProjects(_selectedCompany!.id);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: appTheme(_isDarkTheme).backgroundColor, // Use appTheme for background
      appBar: AppBar(
        title: Text('CEO Dashboard'),
        backgroundColor: appTheme(_isDarkTheme).primaryColor, // Use appTheme for primary color
        actions: [
          IconButton(
            icon: Icon(Icons.account_circle),
            onPressed: () {
              Navigator.pushNamed(context, '/profile');
            },
          ),
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () {
              // Handle logout
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            if (_user != null) _buildProfileHeader(),
            _buildActionButtons(),
            if (_selectedCompany != null) _buildProjectsSection(),
          ],
        ),
      ),
      floatingActionButton: _selectedCompany != null
          ? FloatingActionButton(
              onPressed: () {
                if (_selectedCompany != null) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AddProjectScreen(
                        companyId: _selectedCompany!.id,
                        companyName: _selectedCompany!.name, // Provide the company name here
                      ),
                    ),
                  ).then((value) => _loadProjects(_selectedCompany!.id));
                }
              },
              backgroundColor: appTheme(_isDarkTheme).primaryColor, // Use appTheme for primary color
              child: Icon(Icons.add, color: Colors.white),
            )
          : null,
    );
  }

  Widget _buildProfileHeader() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          CircleAvatar(
            backgroundImage: NetworkImage(_user?.profileImage ?? 'https://via.placeholder.com/150'),
            radius: 30,
          ),
          SizedBox(width: 16),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                _user?.name ?? 'Unknown',
                style: GoogleFonts.nunito(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              Text(
                'the CEO of ${_selectedCompany?.name ?? 'no company selected'}',
                style: GoogleFonts.nunito(fontSize: 16, color: Colors.grey),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          _buildActionButton('Add a project', () {
            if (_selectedCompany != null) {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => AddProjectScreen(
                    companyId: _selectedCompany!.id,
                    companyName: _selectedCompany!.name, // Provide the company name here
                  ),
                ),
              ).then((value) => _loadProjects(_selectedCompany!.id));
            }
          }, Icons.add),
          _buildActionButton('Report an issue', () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => ReportIssueScreen()),
            );
          }, Icons.report),
          _buildActionButton('Send a notification', () {
            if (_user != null && _selectedCompany != null) {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => SendNotificationScreen(
                  ceoName: _user!.name,
                  companyName: _selectedCompany!.name,
                )),
              );
            }
          }, Icons.notification_add),
        ],
      ),
    );
  }

  Widget _buildActionButton(String title, VoidCallback onPressed, IconData icon) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme(_isDarkTheme).primaryColor, // Use appTheme for primary color
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
          textStyle: GoogleFonts.nunito(fontSize: 18),
        ),
        onPressed: onPressed,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: Colors.white),
            SizedBox(width: 8),
            Text(title, style: TextStyle(color: Colors.white)),
          ],
        ),
      ),
    );
  }

  Widget _buildProjectsSection() {
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            'Projects',
            style: GoogleFonts.nunito(fontSize: 24, fontWeight: FontWeight.bold),
          ),
        ),
        _buildProjectsList(),
      ],
    );
  }

  Widget _buildProjectsList() {
    return Container(
      height: 400, // Adjust the height as needed
      child: ListView.builder(
        shrinkWrap: true,
        itemCount: _projects.length,
        itemBuilder: (context, index) {
          return ProjectCard(
            project: _projects[index],
            onView: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ProjectDetailsScreen(
                    project: _projects[index],
                    isDarkTheme: _isDarkTheme, // Pass isDarkTheme here
                  ),
                ),
              );
            },
            onUpdate: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EditProjectScreen(project: _projects[index]),
                ),
              ).then((value) => _loadProjects(_selectedCompany!.id));
            },
            onDelete: () {
              _deleteProject(_projects[index].id);
            },
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\ceo_profile_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/user.dart';
import 'package:url_launcher/url_launcher.dart';

class CEOProfileScreen extends StatelessWidget {
  final User ceo;
  final bool isDarkTheme;

  CEOProfileScreen({required this.ceo, required this.isDarkTheme});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('CEO Profile', style: GoogleFonts.nunito(color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Center(
              child: CircleAvatar(
                radius: 50,
                backgroundImage: NetworkImage(ceo.profileImage),
              ),
            ),
            SizedBox(height: 16),
            Text(
              ceo.name,
              style: GoogleFonts.nunito(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: isDarkTheme ? Colors.white : Colors.black,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Email: ${ceo.email}',
              style: GoogleFonts.nunito(
                fontSize: 16,
                color: isDarkTheme ? Colors.white : Colors.black,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'WhatsApp: ${ceo.whatsapp}',
              style: GoogleFonts.nunito(
                fontSize: 16,
                color: isDarkTheme ? Colors.white : Colors.black,
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                _sendEmail(ceo.email);
              },
              icon: Icon(Icons.email, color: Colors.white),
              label: Text('Email', style: GoogleFonts.nunito(fontSize: 18, color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD97757),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.nunito(fontSize: 18),
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                _openWhatsApp(ceo.whatsapp);
              },
              icon: Icon(Icons.message, color: Colors.white),
              label: Text('WhatsApp', style: GoogleFonts.nunito(fontSize: 18, color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD97757),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.nunito(fontSize: 18),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _sendEmail(String email) {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: email,
    );
    launch(emailUri.toString());
  }

  void _openWhatsApp(String phone) {
    final Uri whatsappUri = Uri(
      scheme: 'https',
      path: 'api.whatsapp.com/send',
      queryParameters: {'phone': phone},
    );
    launch(whatsappUri.toString());
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\company_details_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/company.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/services/company_service.dart';
import 'package:business_management_app/services/project_service.dart';
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/models/user.dart' as AppUser;

class CompanyDetailsScreen extends StatelessWidget {
  final String companyId;

  CompanyDetailsScreen({required this.companyId});

  final CompanyService _companyService = CompanyService();
  final ProjectService _projectService = ProjectService();
  final UserService _userService = UserService();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Company Details', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: FutureBuilder<Company>(
        future: _companyService.getCompanyById(companyId),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error loading company details'));
          } else {
            Company? company = snapshot.data;
            return company != null ? _buildCompanyDetails(context, company) : Center(child: Text('Company not found'));
          }
        },
      ),
    );
  }

  Widget _buildCompanyDetails(BuildContext context, Company company) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            company.name,
            style: GoogleFonts.nunito(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          ClipRRect(
            borderRadius: BorderRadius.circular(10.0),
            child: Image.network(company.imageUrl, height: 150, width: double.infinity, fit: BoxFit.cover),
          ),
          SizedBox(height: 8),
          Text(
            'CEO: ${company.ceoName}',
            style: GoogleFonts.nunito(fontSize: 16),
          ),
          Text(
            'Email: ${company.ceoEmail}',
            style: GoogleFonts.nunito(fontSize: 16),
          ),
          Text(
            'Phone: ${company.ceoPhone}',
            style: GoogleFonts.nunito(fontSize: 16),
          ),
          Text(
            'WhatsApp: ${company.ceoWhatsApp}',
            style: GoogleFonts.nunito(fontSize: 16),
          ),
          SizedBox(height: 16),
          Text(
            'Projects',
            style: GoogleFonts.nunito(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          Expanded(
            child: FutureBuilder<List<Project>>(
              future: _projectService.getProjectsForCompany(company.id),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator());
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error loading projects'));
                } else {
                  List<Project>? projects = snapshot.data;
                  return projects != null && projects.isNotEmpty
                      ? ListView.builder(
                          itemCount: projects.length,
                          itemBuilder: (context, index) {
                            var project = projects[index];
                            return Card(
                              margin: EdgeInsets.symmetric(vertical: 8.0),
                              child: ListTile(
                                title: Text(project.name, style: GoogleFonts.nunito()),
                                subtitle: Text('Budget: \$${project.budget}', style: GoogleFonts.nunito()),
                              ),
                            );
                          },
                        )
                      : Center(child: Text('No projects found'));
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\contact_ceo_screen.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/company.dart';

class ContactCEOScreen extends StatelessWidget {
  final Company company;

  ContactCEOScreen({required this.company});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Contact CEO'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Name: ${company.ceoName}',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 8),
            Text(
              'Email: ${company.ceoEmail}',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 8),
            Text(
              'Phone: ${company.ceoPhone}',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 8),
            Text(
              'WhatsApp: ${company.ceoWhatsApp}',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\edit_project_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/services/project_service.dart';

class EditProjectScreen extends StatefulWidget {
  final Project project;

  EditProjectScreen({required this.project});

  @override
  _EditProjectScreenState createState() => _EditProjectScreenState();
}

class _EditProjectScreenState extends State<EditProjectScreen> {
  final _nameController = TextEditingController();
  final _budgetController = TextEditingController();
  final _detailsController = TextEditingController();
  final _goalsController = TextEditingController(); // Add a controller for goals
  final _teamMembersController = TextEditingController(); // Add a controller for team members
  final ProjectService _projectService = ProjectService();

  @override
  void initState() {
    super.initState();
    _nameController.text = widget.project.name;
    _budgetController.text = widget.project.budget.toString();
    _detailsController.text = widget.project.details;
    _goalsController.text = widget.project.goals; // Initialize goals
    _teamMembersController.text = widget.project.teamMemberNames.join(', '); // Initialize team members
  }

  void _editProject() async {
    final name = _nameController.text;
    final budget = double.tryParse(_budgetController.text) ?? 0;
    final details = _detailsController.text;
    final goals = _goalsController.text; // Get goals
    final teamMembers = _teamMembersController.text.split(', '); // Split team members by comma and space

    Project updatedProject = Project(
      id: widget.project.id,
      name: name,
      start: widget.project.start,
      end: widget.project.end,
      budget: budget,
      details: details,
      goals: goals, // Set goals
      teamMemberNames: teamMembers, // Set team members
      status: widget.project.status,
      leaderId: widget.project.leaderId,
      companyId: widget.project.companyId,
      companyName: widget.project.companyName, // Provide the company name here
      teamMemberIds: widget.project.teamMemberIds,
    );

    await _projectService.updateProject(updatedProject);
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Edit Project', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            _buildTextFormField(_nameController, 'Project Name'),
            _buildTextFormField(_budgetController, 'Budget', keyboardType: TextInputType.number),
            _buildTextFormField(_detailsController, 'Details'),
            _buildTextFormField(_goalsController, 'Goals'), // Add goals field
            _buildTextFormField(_teamMembersController, 'Team Members (comma separated)'), // Add team members field
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _editProject,
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD97757),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.nunito(fontSize: 18),
              ),
              child: Text('Save Changes', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTextFormField(TextEditingController controller, String labelText, {TextInputType keyboardType = TextInputType.text}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        keyboardType: keyboardType,
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: GoogleFonts.nunito(),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        style: GoogleFonts.nunito(),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\initial_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class InitialScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Welcome', style: GoogleFonts.nunito(color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Image.asset('assets/logo.png', height: 150),
              SizedBox(height: 40),
              ElevatedButton(
                onPressed: () {
                  Navigator.pushNamed(context, '/login', arguments: 'Boss');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD97757),
                  padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  textStyle: GoogleFonts.nunito(fontSize: 18, fontWeight: FontWeight.bold),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
                child: Text('I am a Boss', style: TextStyle(color: Colors.white)),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.pushNamed(context, '/login', arguments: 'CEO');
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD97757),
                  padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  textStyle: GoogleFonts.nunito(fontSize: 18, fontWeight: FontWeight.bold),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
                child: Text('I am a CEO', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\login.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/services/auth_service.dart';
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/models/user.dart';

class LoginScreen extends StatefulWidget {
  final String? initialRole;

  const LoginScreen({Key? key, this.initialRole}) : super(key: key);

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final AuthService _authService = AuthService();
  final UserService _userService = UserService();
  String? _role;

  // Hardcoded credentials for the boss
  final String _bossEmail = 'boss@example.com';
  final String _bossPassword = 'boss1234';

  @override
  void initState() {
    super.initState();
    _role = widget.initialRole;
  }

  void _login() async {
    final email = _emailController.text;
    final password = _passwordController.text;

    // Check if the entered credentials match the hardcoded boss credentials
    if (email == _bossEmail && password == _bossPassword) {
      Navigator.pushReplacementNamed(context, '/boss_dashboard');
      return;
    }

    // Proceed with normal authentication for other users
    bool success = await _authService.login(email, password);
    if (success) {
      User? user = await _userService.getCurrentUser();
      if (user != null) {
        if (user.role == 'Boss' || _role == 'Boss') {
          Navigator.pushReplacementNamed(context, '/boss_dashboard');
        } else if (user.role == 'CEO' || _role == 'CEO') {
          Navigator.pushReplacementNamed(context, '/ceo_dashboard');
        }
      } else {
        // Handle the case where user is null
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('User not found')),
        );
      }
    } else {
      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Login failed')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Login', style: GoogleFonts.nunito(color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Center( // Center the entire body content
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Image.asset('assets/images/your_logo.png'), // Replace with your logo asset
                Image.asset('assets/manager.png', height: 250, width: 250), // Set height and width
                SizedBox(height: 20), // Add some space between the image and the form
                _buildTextField(_emailController, 'Email'),
                SizedBox(height: 16),
                _buildTextField(_passwordController, 'Password', obscureText: true),
                SizedBox(height: 30),
                ElevatedButton(
                  onPressed: _login,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Color(0xFFD97757),
                    padding: EdgeInsets.symmetric(horizontal: 40, vertical: 16),
                    textStyle: GoogleFonts.nunito(fontSize: 18),
                  ),
                  child: Text('Login', style: TextStyle(color: Colors.white)),
                ),
                
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String labelText,
      {bool obscureText = false}) {
    return TextFormField(
      controller: controller,
      obscureText: obscureText,
      style: GoogleFonts.nunito(),
      decoration: InputDecoration(
        labelText: labelText,
        labelStyle: GoogleFonts.nunito(),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12.0),
        ),
        filled: true,
        fillColor: Colors.white,
        contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\messages_screen.dart
import 'package:flutter/material.dart';

class MessagesScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Messages'),
      ),
      body: Center(
        child: Text('Messaging functionality coming soon...'),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\notifications_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/notification.dart' as CustomNotification;
import 'package:business_management_app/services/notification_service.dart';

class NotificationsScreen extends StatefulWidget {
  final VoidCallback onNotificationsRead;
  final bool isDarkTheme;

  NotificationsScreen({required this.onNotificationsRead, required this.isDarkTheme});

  @override
  _NotificationsScreenState createState() => _NotificationsScreenState();
}

class _NotificationsScreenState extends State<NotificationsScreen> {
  final NotificationService _notificationService = NotificationService();
  List<CustomNotification.Notification> _notifications = [];

  @override
  void initState() {
    super.initState();
    _loadNotifications();
  }

  Future<void> _loadNotifications() async {
    try {
      List<CustomNotification.Notification> notifications = await _notificationService.getAllNotifications();
      setState(() {
        _notifications = notifications;
      });

      // Mark all notifications as read
      for (var notification in notifications) {
        if (!notification.isRead) {
          await _notificationService.markNotificationAsRead(notification.id);
        }
      }

      // Call the callback to update the boss dashboard state
      widget.onNotificationsRead();
    } catch (e) {
      print('Error loading notifications: $e');
    }
  }

  Future<void> _deleteNotification(String notificationId) async {
    try {
      await _notificationService.deleteNotification(notificationId);
      setState(() {
        _notifications.removeWhere((notification) => notification.id == notificationId);
      });
    } catch (e) {
      print('Error deleting notification: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final textColor = widget.isDarkTheme ? Colors.white : Colors.black;
    final subtitleColor = widget.isDarkTheme ? Colors.grey[400] : Colors.grey;

    return Scaffold(
      appBar: AppBar(
  title: Text('Notifications', style: GoogleFonts.nunito(color: Colors.white)), // Change text color to white
  backgroundColor: Color(0xFFD97757),
  automaticallyImplyLeading: false, // Remove the back icon
),
      backgroundColor: widget.isDarkTheme ? Color(0xFF2c2b28) : Color(0xFFF2F0E8),
      body: ListView.builder(
        itemCount: _notifications.length,
        itemBuilder: (context, index) {
          final notification = _notifications[index];
          return Card(
            color: widget.isDarkTheme ? Color(0xFF393937) : Colors.white,
            margin: EdgeInsets.all(8.0),
            child: FutureBuilder(
              future: _notificationService.getSenderDetails(notification.senderId),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return ListTile(
                    title: Text('Loading...', style: GoogleFonts.nunito(fontSize: 18, fontWeight: FontWeight.bold, color: textColor)),
                  );
                } else if (snapshot.hasError) {
                  return ListTile(
                    title: Text(
                      'Unknown Sender',
                      style: GoogleFonts.nunito(fontSize: 18, fontWeight: FontWeight.bold, color: textColor),
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(notification.message, style: GoogleFonts.nunito(fontSize: 16, color: textColor)),
                        Text(notification.date.toLocal().toString(), style: GoogleFonts.nunito(fontSize: 14, color: subtitleColor)),
                      ],
                    ),
                    trailing: IconButton(
                      icon: Icon(Icons.delete, color: Colors.red),
                      onPressed: () {
                        _deleteNotification(notification.id);
                      },
                    ),
                  );
                } else {
                  var senderDetails = snapshot.data as Map<String, String>?;
                  return Stack(
                    children: [
                      ListTile(
                        title: Text(senderDetails?['name'] ?? 'Unknown', style: GoogleFonts.nunito(fontSize: 18, fontWeight: FontWeight.bold, color: textColor)),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(senderDetails?['company'] ?? 'Unknown', style: GoogleFonts.nunito(fontSize: 16, color: textColor)),
                            Text(notification.message, style: GoogleFonts.nunito(fontSize: 16, color: textColor)),
                            Text(notification.date.toLocal().toString(), style: GoogleFonts.nunito(fontSize: 14, color: subtitleColor)),
                          ],
                        ),
                      ),
                      Positioned(
                        top: 0,
                        right: 0,
                        child: IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () {
                            _deleteNotification(notification.id);
                          },
                        ),
                      ),
                    ],
                  );
                }
              },
            ),
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\profile_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/models/user.dart' as AppUser;
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/services/auth_service.dart';

class ProfileScreen extends StatefulWidget {
  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final UserService _userService = UserService();
  final AuthService _authService = AuthService();
  AppUser.User? _user;
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _whatsappController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _profileImageController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadUserProfile();
  }

  Future<void> _loadUserProfile() async {
    AppUser.User? user = await _userService.getCurrentUser();
    setState(() {
      _user = user;
      if (user != null) {
        _nameController.text = user.name;
        _emailController.text = user.email;
        _whatsappController.text = user.whatsapp ?? '';
        _descriptionController.text = user.description ?? '';
        _profileImageController.text = user.profileImage ?? '';
      }
    });
  }

  void _saveProfile() async {
    if (_user != null) {
      AppUser.User updatedUser = AppUser.User(
        id: _user!.id,
        name: _nameController.text,
        email: _emailController.text,
        role: _user!.role,
        companyId: _user!.companyId,
        whatsapp: _whatsappController.text,
        description: _descriptionController.text,
        profileImage: _profileImageController.text,
      );
      await _userService.updateUser(updatedUser);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Profile updated successfully')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Profile', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              _buildTextField(_nameController, 'Name'),
              _buildTextField(_emailController, 'Email', readOnly: true),
              _buildTextField(_whatsappController, 'WhatsApp'),
              _buildTextField(_descriptionController, 'Description'),
              _buildTextField(_profileImageController, 'Profile Image URL'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _saveProfile,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD97757),
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  textStyle: GoogleFonts.nunito(fontSize: 18),
                ),
                child: Text('Save', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String labelText, {bool readOnly = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextField(
        controller: controller,
        readOnly: readOnly,
        style: GoogleFonts.nunito(),
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: GoogleFonts.nunito(),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\project_details_screen.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/models/team_member.dart';
import 'package:business_management_app/services/project_service.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart'; // Import the intl package for date formatting

class ProjectDetailsScreen extends StatefulWidget {
  final Project project;
  final bool isDarkTheme;

  ProjectDetailsScreen({required this.project, required this.isDarkTheme});

  @override
  _ProjectDetailsScreenState createState() => _ProjectDetailsScreenState();
}

class _ProjectDetailsScreenState extends State<ProjectDetailsScreen> {
  final ProjectService _projectService = ProjectService();
  List<TeamMember> _teamMembers = [];

  @override
  void initState() {
    super.initState();
    _fetchTeamMembers();
  }

  Future<void> _fetchTeamMembers() async {
    if (widget.project.teamMemberIds.isNotEmpty) {
      List<TeamMember> teamMembers = await _projectService.getTeamMembers(widget.project.teamMemberIds);
      setState(() {
        _teamMembers = teamMembers;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: widget.isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text(widget.project.name, style: GoogleFonts.nunito(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildSectionTitle('Description'),
              SizedBox(height: 8),
              Text(widget.project.details, style: GoogleFonts.nunito(fontSize: 16, color: widget.isDarkTheme ? Colors.white : Colors.black)),
              SizedBox(height: 16),
              _buildSectionTitle('Goals'),
              SizedBox(height: 8),
              Text(widget.project.goals, style: GoogleFonts.nunito(fontSize: 16, color: widget.isDarkTheme ? Colors.white : Colors.black)),
              SizedBox(height: 16),
              _buildSectionTitle('Start and End Date'),
              SizedBox(height: 8),
              Text(
                '${DateFormat('yyyy/MM/dd').format(widget.project.start.toLocal())} to ${DateFormat('yyyy/MM/dd').format(widget.project.end.toLocal())}',
                style: GoogleFonts.nunito(fontSize: 16, color: widget.isDarkTheme ? Colors.white : Colors.black),
              ),
              SizedBox(height: 16),
              _buildSectionTitle('Budget'),
              SizedBox(height: 8),
              Text('\$${widget.project.budget}', style: GoogleFonts.nunito(fontSize: 16, color: widget.isDarkTheme ? Colors.white : Colors.black)),
              SizedBox(height: 16),
              _buildSectionTitle('Team Members'),
              SizedBox(height: 8),
              _buildTeamMembersWrap(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: GoogleFonts.nunito(fontSize: 20, fontWeight: FontWeight.bold, color: widget.isDarkTheme ? Colors.white : Colors.black),
    );
  }

  Widget _buildTeamMembersWrap() {
    return Wrap(
      spacing: 8.0,
      runSpacing: 8.0,
      children: widget.project.teamMemberNames.map((name) {
        return Container(
          padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          decoration: BoxDecoration(
            color: widget.isDarkTheme ? Color(0xFF444444) : Colors.white,
            borderRadius: BorderRadius.circular(24.0),
            border: Border.all(color: widget.isDarkTheme ? Colors.grey[700]! : Colors.grey[300]!, width: 1),
          ),
          child: Text(
            name,
            style: GoogleFonts.nunito(fontSize: 16, color: widget.isDarkTheme ? Colors.white : Colors.black),
          ),
        );
      }).toList(),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\report_issue_screen.dart
// lib/screens/report_issue_screen.dart

import 'package:flutter/material.dart';

class ReportIssueScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Report an Issue'),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: 'Issue Title',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8.0),
                ),
                filled: true,
                fillColor: Colors.white,
              ),
            ),
            SizedBox(height: 20),
            TextField(
              decoration: InputDecoration(
                labelText: 'Issue Description',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8.0),
                ),
                filled: true,
                fillColor: Colors.white,
              ),
              maxLines: 5,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Handle issue reporting logic here
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD97757),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
              ),
              child: Text('Submit Issue', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\send_notification_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:uuid/uuid.dart';
import 'package:business_management_app/models/notification.dart' as CustomNotification;
import 'package:business_management_app/services/notification_service.dart';
import 'package:business_management_app/services/user_service.dart';

class SendNotificationScreen extends StatefulWidget {
  final String ceoName;
  final String companyName;

  SendNotificationScreen({required this.ceoName, required this.companyName});

  @override
  _SendNotificationScreenState createState() => _SendNotificationScreenState();
}

class _SendNotificationScreenState extends State<SendNotificationScreen> {
  final _notificationController = TextEditingController();
  final NotificationService _notificationService = NotificationService();
  final UserService _userService = UserService();

  void _sendNotification() async {
    final notificationMessage = _notificationController.text;
    print('Sending notification from ${widget.ceoName} of ${widget.companyName}');

    final currentUser = await _userService.getCurrentUser();

    if (currentUser == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('User not found')),
      );
      return;
    }

    final senderId = currentUser.id; // Assuming getCurrentUser() returns a User object with an id field

    final notification = CustomNotification.Notification(
      id: Uuid().v4(),
      ceoName: widget.ceoName,
      companyName: widget.companyName,
      date: DateTime.now(),
      message: notificationMessage,
      senderId: senderId, // Automatically get the senderId from the current user
    );

    await _notificationService.addNotification(notification);
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Send a Notification', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _notificationController,
              decoration: InputDecoration(
                labelText: 'Notification message',
                labelStyle: GoogleFonts.nunito(),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8.0),
                ),
                filled: true,
                fillColor: Colors.white,
              ),
              maxLines: 5,
              style: GoogleFonts.nunito(),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendNotification,
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD97757),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                textStyle: GoogleFonts.nunito(fontSize: 18),
              ),
              child: Text('Send Notification', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\settings_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class SettingsScreen extends StatefulWidget {
  final VoidCallback onThemeChanged;
  final bool isDarkTheme;

  SettingsScreen({required this.onThemeChanged, required this.isDarkTheme});

  @override
  _SettingsScreenState createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  bool _notificationsEnabled = true;

  void _toggleNotifications(bool value) {
    setState(() {
      _notificationsEnabled = value;
    });
    // Here, you would also update the notification settings
  }

  void _logout() {
    // Implement your logout functionality here
    print('User logged out');
  }

  @override
  Widget build(BuildContext context) {
    final textColor = widget.isDarkTheme ? Colors.white : Colors.black;

    return Scaffold(
      backgroundColor: widget.isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text(
          'Settings',
          style: GoogleFonts.nunito(color: Colors.white)),
        backgroundColor: Color(0xFFD97757),
        automaticallyImplyLeading: false, // Remove the back icon
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            ListTile(
              title: Text(
                'Dark Theme',
                style: GoogleFonts.nunito(fontSize: 18, color: textColor),
              ),
              trailing: Switch(
                value: widget.isDarkTheme,
                onChanged: (value) {
                  widget.onThemeChanged();
                },
                activeColor: Color(0xFFD97757),
              ),
            ),
            Divider(),
            ListTile(
              title: Text(
                'Enable Notifications',
                style: GoogleFonts.nunito(fontSize: 18, color: textColor),
              ),
              trailing: Switch(
                value: _notificationsEnabled,
                onChanged: _toggleNotifications,
                activeColor: Color(0xFFD97757),
              ),
            ),
            Divider(),
            ListTile(
              title: Text(
                'Account',
                style: GoogleFonts.nunito(fontSize: 18, color: textColor),
              ),
              onTap: () {
                // Navigate to account management screen
              },
            ),
            Divider(),
            ListTile(
              title: Text(
                'Privacy Policy',
                style: GoogleFonts.nunito(fontSize: 18, color: textColor),
              ),
              onTap: () {
                // Navigate to privacy policy screen
              },
            ),
            Divider(),
            ListTile(
              title: Text(
                'Logout',
                style: GoogleFonts.nunito(fontSize: 18, color: textColor),
              ),
              trailing: Icon(Icons.logout, color: Color(0xFFD97757)),
              onTap: _logout,
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\screens\signup.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:business_management_app/services/auth_service.dart';
import 'package:business_management_app/services/user_service.dart';
import 'package:business_management_app/models/user.dart';
import 'package:business_management_app/models/company.dart';
import 'package:business_management_app/services/company_service.dart';

class SignUpScreen extends StatefulWidget {
  @override
  _SignUpScreenState createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _nameController = TextEditingController();
  final _whatsappController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _profileImageController = TextEditingController(); // Assume URL for simplicity
  final CompanyService _companyService = CompanyService();
  final AuthService _authService = AuthService();
  final UserService _userService = UserService();
  String _selectedCompanyId = '';
  List<Company> _companies = [];

  @override
  void initState() {
    super.initState();
    _loadCompanies();
  }

  Future<void> _loadCompanies() async {
    List<Company> companies = await _companyService.getAllCompanies();
    setState(() {
      _companies = companies;
    });
  }

  void _signUp() async {
    final email = _emailController.text;
    final password = _passwordController.text;
    final name = _nameController.text;
    final whatsapp = _whatsappController.text;
    final description = _descriptionController.text;
    final profileImage = _profileImageController.text;

    if (_selectedCompanyId.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select a company')),
      );
      return;
    }

    bool success = await _authService.signUp(email, password);
    if (success) {
      User newUser = User(
        id: _authService.getCurrentUser()!.uid,
        name: name,
        email: email,
        role: 'CEO',
        companyId: _selectedCompanyId,
        whatsapp: whatsapp,
        description: description,
        profileImage: profileImage,
      );
      await _userService.addUser(newUser);
      // Navigate to CEO Dashboard
      Navigator.pushReplacementNamed(context, '/ceo_dashboard');
    } else {
      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Sign up failed')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF2F0E8),
      appBar: AppBar(
        title: Text('Sign Up', style: GoogleFonts.nunito()),
        backgroundColor: Color(0xFFD97757),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              _buildTextField(_emailController, 'Email'),
              _buildTextField(_passwordController, 'Password', obscureText: true),
              _buildTextField(_nameController, 'Name'),
              _buildTextField(_whatsappController, 'WhatsApp'),
              _buildTextField(_descriptionController, 'Description'),
              _buildTextField(_profileImageController, 'Profile Image URL'),
              _buildDropdown(),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _signUp,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD97757),
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  textStyle: GoogleFonts.nunito(fontSize: 18),
                ),
                child: Text('Sign Up', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String labelText, {bool obscureText = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextField(
        controller: controller,
        obscureText: obscureText,
        style: GoogleFonts.nunito(),
        decoration: InputDecoration(
          labelText: labelText,
          labelStyle: GoogleFonts.nunito(),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
      ),
    );
  }

  Widget _buildDropdown() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: DropdownButtonFormField<String>(
        value: _selectedCompanyId.isNotEmpty ? _selectedCompanyId : null,
        hint: Text('Select Company', style: GoogleFonts.nunito()),
        decoration: InputDecoration(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8.0),
          ),
          filled: true,
          fillColor: Colors.white,
        ),
        items: _companies.map((Company company) {
          return DropdownMenuItem<String>(
            value: company.id,
            child: Text(company.name, style: GoogleFonts.nunito()),
          );
        }).toList(),
        onChanged: (String? newValue) {
          setState(() {
            _selectedCompanyId = newValue!;
          });
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\services\auth_service.dart
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:business_management_app/models/user.dart' as app_user;

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final CollectionReference _userCollection = FirebaseFirestore.instance.collection('users');

  // Login with email and password
  Future<bool> login(String email, String password) async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(email: email, password: password);
      return userCredential.user != null;
    } catch (e) {
      print(e.toString());
      return false;
    }
  }

  // Sign up with email and password
  Future<bool> signUp(String email, String password) async {
    try {
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      return userCredential.user != null;
    } catch (e) {
      print(e.toString());
      return false;
    }
  }

  // Logout
  Future<void> logout() async {
    await _auth.signOut();
  }

  // Get current user
  User? getCurrentUser() {
    return _auth.currentUser;
  }

  // Get user details by ID
  Future<app_user.User> getUserDetails(String userId) async {
    try {
      DocumentSnapshot doc = await _userCollection.doc(userId).get();
      if (doc.exists) {
        return app_user.User.fromMap(doc.data() as Map<String, dynamic>);
      } else {
        throw Exception('User not found');
      }
    } catch (e) {
      throw Exception('Error getting user details: $e');
    }
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\services\company_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:business_management_app/models/company.dart';

class CompanyService {
  final CollectionReference _companyCollection = FirebaseFirestore.instance.collection('companies');

  Future<Company> getCompanyById(String companyId) async {
    try {
      DocumentSnapshot doc = await _companyCollection.doc(companyId).get();
      if (doc.exists) {
        return Company.fromMap(doc.data() as Map<String, dynamic>);
      } else {
        throw Exception('Company not found');
      }
    } catch (e) {
      print('Error getting company by ID $companyId: $e');
      throw e;
    }
  }

  Future<List<Company>> getAllCompanies() async {
    try {
      QuerySnapshot querySnapshot = await _companyCollection.get();
      return querySnapshot.docs.map((doc) => Company.fromMap(doc.data() as Map<String, dynamic>)).toList();
    } catch (e) {
      throw Exception('Error getting all companies: $e');
    }
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\services\notification_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:business_management_app/models/notification.dart';

class NotificationService {
  final CollectionReference _notificationCollection = FirebaseFirestore.instance.collection('notifications');
  final CollectionReference _userCollection = FirebaseFirestore.instance.collection('users');

  Future<List<Notification>> getAllNotifications() async {
    QuerySnapshot querySnapshot = await _notificationCollection.get();
    return querySnapshot.docs.map((doc) => Notification.fromMap(doc.data() as Map<String, dynamic>)).toList();
  }

  Future<void> markNotificationAsRead(String notificationId) async {
    await _notificationCollection.doc(notificationId).update({'isRead': true});
  }

  Future<Map<String, String>?> getSenderDetails(String senderId) async {
    DocumentSnapshot senderDoc = await _userCollection.doc(senderId).get();
    if (senderDoc.exists) {
      var data = senderDoc.data() as Map<String, dynamic>;
      return {
        'name': data['name'] ?? 'Unknown',
        'company': data['company'] ?? 'Unknown',
      };
    } else {
      return null;
    }
  }

  Future<void> deleteNotification(String notificationId) async {
    await _notificationCollection.doc(notificationId).delete();
  }

  Future<void> addNotification(Notification notification) async {
    await _notificationCollection.doc(notification.id).set(notification.toMap());
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\services\project_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/models/team_member.dart';

class ProjectService {
  final CollectionReference _projectCollection = FirebaseFirestore.instance.collection('projects');
  final CollectionReference _teamMemberCollection = FirebaseFirestore.instance.collection('team_members');

  Future<void> addProject(Project project) async {
    await _projectCollection.doc(project.id).set(project.toMap());
  }

  Future<Project> getProject(String id) async {
    DocumentSnapshot doc = await _projectCollection.doc(id).get();
    return Project.fromMap(doc.data() as Map<String, dynamic>);
  }

  Future<void> updateProject(Project project) async {
    await _projectCollection.doc(project.id).update(project.toMap());
  }

  Future<void> deleteProject(String id) async {
    await _projectCollection.doc(id).delete();
  }

  Future<List<Project>> getProjectsForCompany(String companyId) async {
    QuerySnapshot querySnapshot = await _projectCollection.where('companyId', isEqualTo: companyId).get();
    return querySnapshot.docs.map((doc) => Project.fromMap(doc.data() as Map<String, dynamic>)).toList();
  }

  Future<List<Project>> getAllProjects() async {
    QuerySnapshot querySnapshot = await _projectCollection.get();
    return querySnapshot.docs.map((doc) => Project.fromMap(doc.data() as Map<String, dynamic>)).toList();
  }

  Future<List<Project>> getLatestProjects() async {
    QuerySnapshot querySnapshot = await _projectCollection.orderBy('date', descending: true).limit(10).get();
    return querySnapshot.docs.map((doc) => Project.fromMap(doc.data() as Map<String, dynamic>)).toList();
  }

  Future<List<TeamMember>> getTeamMembers(List<String> memberIds) async {
    if (memberIds.isEmpty) return [];
    QuerySnapshot querySnapshot = await _teamMemberCollection.where(FieldPath.documentId, whereIn: memberIds).get();
    return querySnapshot.docs.map((doc) => TeamMember.fromMap(doc.data() as Map<String, dynamic>)).toList();
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\services\user_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart' as FirebaseAuthUser;
import 'package:business_management_app/models/user.dart';

class UserService {
  final FirebaseAuthUser.FirebaseAuth _auth = FirebaseAuthUser.FirebaseAuth.instance;
  final CollectionReference _userCollection = FirebaseFirestore.instance.collection('users');

  Future<User?> getCurrentUser() async {
    try {
      final firebaseUser = _auth.currentUser!;
      final userData = await _userCollection.doc(firebaseUser.uid).get();
      if (userData.exists) {
        return User.fromMap(userData.data() as Map<String, dynamic>);
      } else {
        print('User data not found for ID: ${firebaseUser.uid}');
        return null;
      }
    } catch (e) {
      print('Error getting current user: $e');
      return null;
    }
  }

  Future<void> addUser(User user) async {
    await _userCollection.doc(user.id).set(user.toMap());
  }

  Future<User> getUser(String userId) async {
    final userData = await _userCollection.doc(userId).get();
    return User.fromMap(userData.data() as Map<String, dynamic>);
  }

  Future<void> updateUser(User user) async {
    await _userCollection.doc(user.id).update(user.toMap());
  }

  Future<List<User>> getAllCEOs() async {
    QuerySnapshot querySnapshot = await _userCollection.where('role', isEqualTo: 'CEO').get();
    return querySnapshot.docs
        .map((doc) => User.fromMap(doc.data() as Map<String, dynamic>))
        .toList();
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\utils\constants.dart


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\utils\theme.dart
import 'package:flutter/material.dart';

ThemeData appTheme(bool isDarkTheme) {
  return ThemeData(
    primaryColor: Color(0xFFD97757),
    backgroundColor: isDarkTheme ? Color(0xFF2C2B28) : Color(0xFFF2F0E8),
    brightness: isDarkTheme ? Brightness.dark : Brightness.light,
    textTheme: TextTheme(
      bodyText1: TextStyle(color: isDarkTheme ? Colors.white : Colors.black),
      bodyText2: TextStyle(color: isDarkTheme ? Colors.white : Colors.black),
    ),
  );
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\widgets\ceo_card.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/user.dart';
import 'package:google_fonts/google_fonts.dart';

class CEOCard extends StatelessWidget {
  final User user;
  final bool isDarkTheme;

  CEOCard({required this.user, required this.isDarkTheme});

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        CircleAvatar(
          backgroundImage: NetworkImage(user.profileImage ?? 'https://via.placeholder.com/150'),
          radius: 40,
        ),
        SizedBox(height: 8),
        Container(
          width: 80,
          child: Text(
            user.name,
            style: GoogleFonts.nunito(
              textStyle: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: isDarkTheme ? Colors.white : Colors.black, // Change text color based on dark mode
              ),
            ),
            textAlign: TextAlign.center,
            overflow: TextOverflow.ellipsis,
            maxLines: 1,
          ),
        ),
      ],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\widgets\company_card.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/company.dart';
import 'package:google_fonts/google_fonts.dart';

class CompanyCard extends StatelessWidget {
  final Company company;
  final bool isDarkTheme;

  CompanyCard({required this.company, required this.isDarkTheme});

  @override
  Widget build(BuildContext context) {
    return Card(
      color: isDarkTheme ? Color.fromARGB(255, 60, 59, 57) : Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16.0),
      ),
      elevation: 0.0,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(16.0),
              topRight: Radius.circular(16.0),
            ),
            child: Image.network(
              company.imageUrl, // Use the company's image URL
              height: 115.0, // Adjust the height as needed
              width: double.infinity,
              fit: BoxFit.cover,
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Flexible(
                      child: Text(
                        company.name,
                        style: GoogleFonts.nunito(
                          textStyle: TextStyle(
                            fontSize: 18.0,
                            fontWeight: FontWeight.bold,
                            color: isDarkTheme ? Colors.white : Colors.black,
                          ),
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    CircleAvatar(
                      radius: 12.0,
                      backgroundColor: _getStatusColor(company.statusColor),
                    ),
                  ],
                ),
                SizedBox(height: 4.0),
                Text(
                  'Employees: ${company.employeeCount}',
                  style: GoogleFonts.nunito(
                    textStyle: TextStyle(
                      fontSize: 16.0,
                      color: isDarkTheme ? Colors.white : Colors.black,
                    ),
                  ),
                ),
              ],
            ),
          ),
          SizedBox(height: 8.0), // Adjust height to prevent overflow
        ],
      ),
    );
  }

  Color _getStatusColor(String statusColor) {
    switch (statusColor) {
      case 'red':
        return Colors.red;
      case 'yellow':
        return Colors.yellow;
      case 'green':
        return Colors.green;
      default:
        return Colors.green; // Default to green
    }
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\widgets\latest_project_card.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/project.dart';
import 'package:business_management_app/screens/project_details_screen.dart';
import 'package:google_fonts/google_fonts.dart';

class LatestProjectCard extends StatelessWidget {
  final Project project;
  final bool isDarkTheme;

  LatestProjectCard({required this.project, required this.isDarkTheme});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => ProjectDetailsScreen(
              project: project,
              isDarkTheme: isDarkTheme, // Pass the isDarkTheme value
            ),
          ),
        );
      },
      child: Card(
        margin: EdgeInsets.all(8.0),
        color: isDarkTheme ?  Color.fromARGB(255, 60, 59, 57) : Colors.white,
        elevation: 0,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16.0),
        ),
        child: Padding(
          padding: const EdgeInsets.only(bottom: 2.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              ListTile(
                title: Text(
                  project.name,
                  style: GoogleFonts.nunito(
                    textStyle: TextStyle(
                      fontSize: 18.0,
                      fontWeight: FontWeight.bold,
                      color: isDarkTheme ? Colors.white : Colors.black,
                    ),
                  ),
                ),
                subtitle: Text(
                  'Budget: \$${project.budget}',
                  style: GoogleFonts.nunito(
                    textStyle: TextStyle(
                      fontSize: 16.0,
                      color: isDarkTheme ? Colors.white : Colors.black,
                    ),
                  ),
                ),
              ),
              Spacer(),
              Padding(
                padding: const EdgeInsets.only(bottom: 10.0, right: 15.0),
                child: Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    project.companyName,
                    style: GoogleFonts.nunito(
                      textStyle: TextStyle(
                        color: isDarkTheme ? Colors.grey : Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\widgets\project_card.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/project.dart';

class ProjectCard extends StatelessWidget {
  final Project project;
  final VoidCallback onView;
  final VoidCallback onUpdate;
  final VoidCallback onDelete;

  ProjectCard({
    required this.project,
    required this.onView,
    required this.onUpdate,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16.0), // Margin left and right
      child: Card(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16.0),
          // Remove the side BorderSide to remove the outline
        ),
        elevation: 0.0, // Set elevation to 0.0 to remove the shadow
        color: Color.fromARGB(255, 255, 255, 255), // Card background color
        child: Container(
          padding: EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    project.name,
                    style: TextStyle(
                      fontSize: 18.0,
                      fontWeight: FontWeight.bold,
                      color: const Color.fromARGB(255, 31, 31, 31),
                    ),
                  ),
                  IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    onPressed: onDelete,
                  ),
                ],
              ),
              SizedBox(height: 8.0),
              Text(
                project.details,
                style: TextStyle(
                  fontSize: 14.0,
                  color: const Color.fromARGB(179, 75, 75, 75),
                ),
              ),
              SizedBox(height: 16.0),
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: onView,
                      style: OutlinedButton.styleFrom(
                        side: BorderSide(color: Color(0xFFD97757)),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(80.0),
                        ),
                        padding: EdgeInsets.symmetric(vertical: 12.0),
                      ),
                      child: Text(
                        'View',
                        style: TextStyle(color: Color(0xFFD97757)),
                      ),
                    ),
                  ),
                  SizedBox(width: 16.0),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: onUpdate,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Color(0xFFD97757),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(80.0),
                        ),
                        padding: EdgeInsets.symmetric(vertical: 12.0),
                      ),
                      child: Text(
                        'Update',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\business_management_app\lib\widgets\user_profile.dart
import 'package:flutter/material.dart';
import 'package:business_management_app/models/user.dart';

class UserProfile extends StatelessWidget {
  final User user;

  UserProfile({required this.user});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.all(8.0),
      child: ListTile(
        title: Text(user.name, style: Theme.of(context).textTheme.headline6),
        subtitle: Text('Email: ${user.email}'),
        trailing: Text(user.role),
        onTap: () {
          // Handle card tap
        },
      ),
    );
  }
}

