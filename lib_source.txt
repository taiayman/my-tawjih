

    File: C:\Users\LENOVO\Desktop\taleb\lib\app.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:go_router/go_router.dart';
import 'package:taleb_edu_platform/routes.dart';
import 'package:taleb_edu_platform/theme.dart';

class TalebApp extends ConsumerWidget {
  const TalebApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final router = ref.watch(routerProvider);

    return MaterialApp.router(
      title: 'Taleb Educational Platform'.tr(),
      theme: lightTheme,
      darkTheme: darkTheme,
      themeMode: ThemeMode.system,
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
      locale: context.locale,
      routeInformationParser: router.routeInformationParser,
      routerDelegate: router.routerDelegate,
      routeInformationProvider: router.routeInformationProvider,
      builder: (context, child) {
        return Scaffold(
          body: Column(
            children: [
              Container(
                padding: EdgeInsets.all(16),
                child: Row(
                  children: [
                    Image.asset(
                      'assets/images/logo.png',
                      height: 50,
                    ),
                    SizedBox(width: 10),
                    Text(
                      'Taleb Educational Platform',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              Expanded(child: child!),
            ],
          ),
        );
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\config.dart
// lib/config.dart

class Config {
  static const String fcmServerKey = 'BH-xxG4bUNZZCT7zs-b8oMv8N9sCigpOnCjj-J-CK5XfYnd43mSBdxpgcTs8LxVzM7htrWpyNzf6s_kkP0ZrKqo';
  
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:taleb_edu_platform/routes.dart';
import 'package:taleb_edu_platform/services/notification_service.dart';
import 'package:taleb_edu_platform/services/firebase_service.dart';
import 'package:taleb_edu_platform/services/auth_service.dart';
import 'package:taleb_edu_platform/theme.dart';
import 'package:taleb_edu_platform/providers/language_provider.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await EasyLocalization.ensureInitialized();
  await Firebase.initializeApp();

  // Initialize OneSignal
  OneSignal.shared.setAppId("3b76c84e-346f-4ee7-8e8f-ae54a407bc92");
  OneSignal.shared.promptUserForPushNotificationPermission().then((accepted) {
    print("Accepted permission: $accepted");
  });

  // Set up OneSignal notification handler
  OneSignal.shared.setNotificationWillShowInForegroundHandler((OSNotificationReceivedEvent event) {
    event.complete(event.notification);
  });

  // Set up background message handler
  OneSignal.shared.setNotificationOpenedHandler((OSNotificationOpenedResult result) {
    // Handle notification opened event
    print("Opened notification: ${result.notification.jsonRepresentation()}");
  });

  final container = ProviderContainer();

  // Initialize Firebase
  try {
    await FirebaseService().initializeFirebase();
  } catch (e) {
    print('Failed to initialize Firebase: $e');
  }

  runApp(
    EasyLocalization(
      supportedLocales: [Locale('ar'), Locale('en'), Locale('fr')],
      path: 'assets/translations',
      fallbackLocale: Locale('ar'),
      child: ProviderScope(
        parent: container,
        child: MyApp(),
      ),
    ),
  );
}

class MyApp extends ConsumerStatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends ConsumerState<MyApp> {
  @override
  void initState() {
    super.initState();
    _loadSavedLanguage();
    _setupOneSignal();
  }

  Future<void> _loadSavedLanguage() async {
    final languageNotifier = ref.read(languageProvider.notifier);
    await languageNotifier.loadSavedLanguage();
  }

  void _setupOneSignal() {
    final notificationService = ref.read(notificationServiceProvider);
    notificationService.setupOneSignalHandlers();
  }

  @override
  Widget build(BuildContext context) {
    final router = ref.watch(routerProvider);
    final currentLocale = ref.watch(languageProvider);

    return MaterialApp.router(
      routerConfig: router,
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
      locale: currentLocale,
      title: 'Taleb Educational Platform'.tr(),
      theme: lightTheme,
      debugShowCheckedModeBanner: false,
      builder: (context, child) {
        return MediaQuery(
          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),
          child: child!,
        );
      },
    );
  }
}

// This function will handle incoming notifications when the app is terminated
Future<void> backgroundMessageHandler(OSNotificationReceivedEvent notification) async {
  // Handle background message here
  print("Received notification in background: ${notification.notification.body}");

  // You can perform tasks here like updating local storage or sending an API request
  // Be cautious about what you do here as the app is not fully initialized in this state
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\routes.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/providers/auth_provider.dart';
import 'package:taleb_edu_platform/screens/home_screen.dart';
import 'package:taleb_edu_platform/screens/mostajadat_screen.dart';
import 'package:taleb_edu_platform/screens/signin_screen.dart';
import 'package:taleb_edu_platform/screens/signup_screen.dart';
import 'package:taleb_edu_platform/screens/profile_screen.dart';
import 'package:taleb_edu_platform/screens/splash_screen.dart';
import 'package:taleb_edu_platform/screens/error_screen.dart';
import 'package:taleb_edu_platform/services/auth_service.dart';

final routerProvider = Provider<GoRouter>((ref) {
  final authState = ref.watch(authStateProvider);

  return GoRouter(
    initialLocation: '/',
    debugLogDiagnostics: true,
    routes: [
      GoRoute(
        path: '/',
        builder: (context, state) => SplashScreen(),
      ),
      GoRoute(
        path: '/signin',
        builder: (context, state) => SignInScreen(),
      ),
      GoRoute(
        path: '/signup',
        builder: (context, state) => SignUpScreen(),
      ),
    GoRoute(
  path: '/mostajadat',
  builder: (context, state) => MostajadatScreen(),
),

      GoRoute(
        path: '/home',
        builder: (context, state) => HomeScreen(),
      ),
      GoRoute(
        path: '/profile',
        builder: (context, state) => ProfileScreen(),
      ),
     
    
    ],
    redirect: (context, state) {
      final isLoggedIn = authState.valueOrNull != null;
      final isOnLoginPage = state.location == '/signin';
      final isOnSignUpPage = state.location == '/signup';
      final isOnRegistrationPage = state.location == '/register';
      final isOnSplashScreen = state.location == '/';

      if (isOnSplashScreen) return null;

      if (!isLoggedIn && !isOnLoginPage && !isOnSignUpPage && !isOnRegistrationPage) {
        return '/signin';
      }

      if (isLoggedIn && (isOnLoginPage || isOnSignUpPage || isOnRegistrationPage)) {
        return '/home';
      }

      return null;
    },
    errorBuilder: (context, state) => ErrorScreen(
      error: state.error.toString(),
    ),
  );
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\theme.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

final Color primaryColor = Color(0xFF3498db);
final Color secondaryColor = Color(0xFFe74c3c);
final Color accentColor = Color(0xFFf39c12);
final Color backgroundColorLight = Color(0xFFecf0f1);
final Color backgroundColorDark = Color.fromARGB(255, 255, 255, 255);
final Color textColorLight = Color.fromARGB(255, 255, 255, 255);
final Color textColorDark = Color(0xFFecf0f1);

ThemeData lightTheme = ThemeData(
  primaryColor: primaryColor,
  colorScheme: ColorScheme.light(
    primary: primaryColor,
    secondary: secondaryColor,
  ),
  backgroundColor: backgroundColorLight,
  scaffoldBackgroundColor: backgroundColorLight,
  textTheme: GoogleFonts.robotoTextTheme(
    TextTheme(
      headline1: TextStyle(color: textColorLight, fontFamily: 'Poppins', fontWeight: FontWeight.bold),
      headline2: TextStyle(color: textColorLight, fontFamily: 'Poppins', fontWeight: FontWeight.bold),
      bodyText1: TextStyle(color: textColorLight),
      bodyText2: TextStyle(color: textColorLight),
    ),
  ),
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      foregroundColor: Colors.white,
      backgroundColor: primaryColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
    ),
  ),
);

ThemeData darkTheme = ThemeData(
  primaryColor: primaryColor,
  colorScheme: ColorScheme.dark(
    primary: primaryColor,
    secondary: secondaryColor,
  ),
  backgroundColor: backgroundColorDark,
  scaffoldBackgroundColor: backgroundColorDark,
  textTheme: GoogleFonts.robotoTextTheme(
    TextTheme(
      headline1: TextStyle(color: textColorDark, fontFamily: 'Poppins', fontWeight: FontWeight.bold),
      headline2: TextStyle(color: textColorDark, fontFamily: 'Poppins', fontWeight: FontWeight.bold),
      bodyText1: TextStyle(color: textColorDark),
      bodyText2: TextStyle(color: textColorDark),
    ),
  ),
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      foregroundColor: Colors.white,
      backgroundColor: primaryColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
    ),
  ),
);


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\achievement_model.dart


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\announcement_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Announcement {
  final String id;
  final String title;
  final String description;
  final String category;
  final DateTime date;
  final String schoolImageUrl;
  final String schoolName;
  final String fullText;
  final String? officialDocumentUrl;
  final String? registrationLink;
  final Map<String, dynamic>? applicationDetails;

  Announcement({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.date,
    required this.schoolImageUrl,
    required this.schoolName,
    required this.fullText,
    this.officialDocumentUrl,
    this.registrationLink,
    this.applicationDetails,
  });

  factory Announcement.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Announcement(
      id: doc.id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      category: data['category'] ?? '',
      date: (data['date'] as Timestamp).toDate(),
      schoolImageUrl: data['schoolImageUrl'] ?? '',
      schoolName: data['schoolName'] ?? '',
      fullText: data['fullText'] ?? '',
      officialDocumentUrl: data['officialDocumentUrl'],
      registrationLink: data['registrationLink'],
      applicationDetails: data['applicationDetails'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'category': category,
      'date': Timestamp.fromDate(date),
      'schoolImageUrl': schoolImageUrl,
      'schoolName': schoolName,
      'fullText': fullText,
      'officialDocumentUrl': officialDocumentUrl,
      'registrationLink': registrationLink,
      'applicationDetails': applicationDetails,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\education_pathway.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class EducationPathway {
  final String id;
  final String name;
  final String description;
  final String imageUrl;
  final List<Specialization> specializations;

  EducationPathway({
    required this.id,
    required this.name,
    required this.description,
    required this.imageUrl,
    required this.specializations,
  });

  factory EducationPathway.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return EducationPathway(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      specializations: (data['specializations'] as List? ?? [])
          .map((spec) => Specialization.fromFirestore(spec))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'imageUrl': imageUrl,
      'specializations': specializations.map((spec) => spec.toMap()).toList(),
    };
  }
}

class Specialization {
  final String id;
  final String name;
  final String description;
  final List<University> universities;

  Specialization({
    required this.id,
    required this.name,
    required this.description,
    required this.universities,
  });

  factory Specialization.fromFirestore(Map<String, dynamic> data) {
    return Specialization(
      id: data['id'] ?? '',
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      universities: (data['universities'] as List? ?? [])
          .map((uni) => University.fromFirestore(uni))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'universities': universities.map((uni) => uni.toMap()).toList(),
    };
  }
}

class University {
  final String id;
  final String name;
  final String description;
  final String website;
  final String imageUrl;
  final double? imageHeight;
  final double? titleFontSize;
  final Color? titleColor;
  final TextAlign? titleAlignment;
  final Color? detailsColor;
  final double? detailsFontSize;
  final double? descriptionFontSize;
  final Color? descriptionColor;
  final TextAlign? descriptionAlignment;
  final List<ContentBlock> contentBlocks;
  final List<ButtonLink> buttonLinks;
  final List<IconLink> iconLinks;

  University({
    required this.id,
    required this.name,
    required this.description,
    required this.website,
    this.imageUrl = '',
    this.imageHeight,
    this.titleFontSize,
    this.titleColor,
    this.titleAlignment,
    this.detailsColor,
    this.detailsFontSize,
    this.descriptionFontSize,
    this.descriptionColor,
    this.descriptionAlignment,
    this.contentBlocks = const [],
    this.buttonLinks = const [],
    this.iconLinks = const [],
  });

  factory University.fromFirestore(Map<String, dynamic> data) {
    return University(
      id: data['id'] ?? '',
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      website: data['website'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      imageHeight: data['imageHeight'] != null ? (data['imageHeight'] as num).toDouble() : null,
      titleFontSize: data['titleFontSize'] != null ? (data['titleFontSize'] as num).toDouble() : null,
      titleColor: data['titleColor'] != null ? Color(data['titleColor'] as int) : null,
      titleAlignment: data['titleAlignment'] != null ? TextAlign.values[data['titleAlignment']] : null,
      detailsColor: data['detailsColor'] != null ? Color(data['detailsColor'] as int) : null,
      detailsFontSize: data['detailsFontSize'] != null ? (data['detailsFontSize'] as num).toDouble() : null,
      descriptionFontSize: data['descriptionFontSize'] != null ? (data['descriptionFontSize'] as num).toDouble() : null,
      descriptionColor: data['descriptionColor'] != null ? Color(data['descriptionColor'] as int) : null,
      descriptionAlignment: data['descriptionAlignment'] != null ? TextAlign.values[data['descriptionAlignment']] : null,
      contentBlocks: _parseContentBlocks(data['contentBlocks']),
      buttonLinks: (data['buttonLinks'] as List<dynamic>? ?? [])
          .map((link) => ButtonLink.fromMap(link))
          .toList(),
      iconLinks: (data['iconLinks'] as List<dynamic>? ?? [])
          .map((link) => IconLink.fromMap(link))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'website': website,
      'imageUrl': imageUrl,
      'imageHeight': imageHeight,
      'titleFontSize': titleFontSize,
      'titleColor': titleColor?.value,
      'titleAlignment': titleAlignment?.index,
      'detailsColor': detailsColor?.value,
      'detailsFontSize': detailsFontSize,
      'descriptionFontSize': descriptionFontSize,
      'descriptionColor': descriptionColor?.value,
      'descriptionAlignment': descriptionAlignment?.index,
      'contentBlocks': contentBlocks.map((block) => block.toMap()).toList(),
      'buttonLinks': buttonLinks.map((link) => link.toMap()).toList(),
      'iconLinks': iconLinks.map((link) => link.toMap()).toList(),
    };
  }
  
  static List<ContentBlock> _parseContentBlocks(dynamic contentBlocksData) {
    if (contentBlocksData is List) {
      return contentBlocksData.map((blockData) {
        if (blockData is Map<String, dynamic>) {
          switch (blockData['type']) {
            case 'text':
              return TextBlock.fromMap(blockData);
            case 'image':
              return ImageBlock.fromMap(blockData);
            case 'code':
              return CodeBlock.fromMap(blockData);
            case 'blockquote':
              return BlockquoteBlock.fromMap(blockData);
            default:
              return TextBlock(
                text: 'Unknown Block Type',
                textStyle: TextStyle(),
                alignment: TextAlign.left,
              );
          }
        } else {
          return TextBlock(
            text: 'Invalid Block Data',
            textStyle: TextStyle(),
            alignment: TextAlign.left,
          );
        }
      }).toList();
    }
    return [];
  }
}

//Content Blocks for University

enum ContentType { text, image, code, blockquote }

abstract class ContentBlock {
  ContentType type;

  ContentBlock({required this.type});

  Map<String, dynamic> toMap();

  factory ContentBlock.fromMap(Map<String, dynamic> map) {
    switch (map['type']) {
      case 'text':
        return TextBlock.fromMap(map);
      case 'image':
        return ImageBlock.fromMap(map);
      case 'code':
        return CodeBlock.fromMap(map);
      case 'blockquote':
        return BlockquoteBlock.fromMap(map);
      default:
        return TextBlock(
          text: 'Unknown Block Type',
          textStyle: TextStyle(),
          alignment: TextAlign.left,
        );
    }
  }
}

class TextBlock extends ContentBlock {
  String text;
  TextStyle textStyle;
  TextEditingController controller = TextEditingController();
  TextAlign alignment;

  TextBlock({
    required this.text,
    this.textStyle = const TextStyle(),
    this.alignment = TextAlign.left,
  }) : super(type: ContentType.text) {
    controller.text = text;
  }

  factory TextBlock.fromMap(Map<String, dynamic> map) {
    return TextBlock(
      text: map['text'] ?? '',
      textStyle: TextStyle(
        fontSize: (map['textStyle']['fontSize'] as num?)?.toDouble(),
        fontWeight: _parseFontWeight(map['textStyle']['fontWeight']),
        fontStyle: _parseFontStyle(map['textStyle']['fontStyle']),
        color: Color(map['textStyle']['color'] as int? ?? 0xFF000000),
        decoration: _parseTextDecoration(map['textStyle']['decoration']),
      ),
      alignment: TextAlign.values[map['alignment'] as int? ?? 0],
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'text',
      'text': text,
      'textStyle': {
        'fontSize': textStyle.fontSize,
        'fontWeight': textStyle.fontWeight?.index,
        'fontStyle': textStyle.fontStyle?.index,
        'color': textStyle.color?.value,
        'decoration': textStyle.decoration?.toString(),
      },
      'alignment': alignment.index,
    };
  }

  static FontWeight? _parseFontWeight(dynamic value) {
    if (value is int) {
      return FontWeight.values[value];
    }
    return null;
  }

  static FontStyle? _parseFontStyle(dynamic value) {
    if (value is int) {
      return FontStyle.values[value];
    }
    return null;
  }

  static TextDecoration? _parseTextDecoration(dynamic value) {
    if (value is String) {
      switch (value) {
        case 'TextDecoration.none':
          return TextDecoration.none;
        case 'TextDecoration.underline':
          return TextDecoration.underline;
        case 'TextDecoration.overline':
          return TextDecoration.overline;
        case 'TextDecoration.lineThrough':
          return TextDecoration.lineThrough;
        default:
          return TextDecoration.none;
      }
    }
    return null;
  }
}

class ImageBlock extends ContentBlock {
  String? imageUrl;

  ImageBlock({this.imageUrl}) : super(type: ContentType.image);

  factory ImageBlock.fromMap(Map<String, dynamic> map) {
    return ImageBlock(
      imageUrl: map['imageUrl'],
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'image',
      'imageUrl': imageUrl,
    };
  }
}

class CodeBlock extends ContentBlock {
  String text;
  TextEditingController controller = TextEditingController();

  CodeBlock({required this.text}) : super(type: ContentType.code) {
    controller.text = text;
  }

  factory CodeBlock.fromMap(Map<String, dynamic> map) {
    return CodeBlock(
      text: map['text'] ?? '',
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'code',
      'text': text,
    };
  }
}

class BlockquoteBlock extends ContentBlock {
  String text;
  TextEditingController controller = TextEditingController();

  BlockquoteBlock({required this.text}) : super(type: ContentType.blockquote) {
    controller.text = text;
  }

  factory BlockquoteBlock.fromMap(Map<String, dynamic> map) {
    return BlockquoteBlock(
      text: map['text'] ?? '',
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'blockquote',
      'text': text,
    };
  }
}

// ButtonLink and IconLink for University

class ButtonLink {
  final String text;
  final String url;

  ButtonLink({required this.text, required this.url});

  factory ButtonLink.fromMap(Map<String, dynamic> map) {
    return ButtonLink(
      text: map['text'] ?? '',
      url: map['url'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'text': text,
      'url': url,
    };
  }
}

class IconLink {
  final String iconUrl; // Changed from iconName to iconUrl
  final String url;

  IconLink({required this.iconUrl, required this.url});

  factory IconLink.fromMap(Map<String, dynamic> map) {
    return IconLink(
      iconUrl: map['iconUrl'] ?? '', // Changed from iconName to iconUrl
      url: map['url'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'iconUrl': iconUrl, // Changed from iconName to iconUrl
      'url': url,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\guidance_category_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class GuidanceCategory {
  final String id;
  final String name;
  List<GuidanceSubcategory> subcategories;

  GuidanceCategory({
    required this.id,
    required this.name,
    required this.subcategories,
  });

  factory GuidanceCategory.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return GuidanceCategory(
      id: doc.id,
      name: data['name'] ?? '',
      subcategories: [],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
    };
  }
}

class GuidanceSubcategory {
  final String id;
  final String name;
  List<GuidanceItem> items;

  GuidanceSubcategory({
    required this.id,
    required this.name,
    required this.items,
  });

  factory GuidanceSubcategory.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return GuidanceSubcategory(
      id: doc.id,
      name: data['name'] ?? '',
      items: [],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
    };
  }
}

class GuidanceItem {
  final String id;
  final String name;
  final String description;
  final String? imageUrl;

  GuidanceItem({
    required this.id,
    required this.name,
    required this.description,
    this.imageUrl,
  });

  factory GuidanceItem.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return GuidanceItem(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      imageUrl: data['imageUrl'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'imageUrl': imageUrl,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\institution_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Institution {
  final String id;
  final String name;
  final String description;
  final List<UniversityCategory> categories;

  Institution({
    required this.id,
    required this.name,
    required this.description,
    required this.categories,
  });

  factory Institution.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Institution(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      categories: (data['categories'] as List? ?? [])
          .map((c) => UniversityCategory.fromMap(c))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'categories': categories.map((c) => c.toMap()).toList(),
    };
  }
}

class UniversityCategory {
  final String id;
  final String name;
  final List<Faculty> faculties;

  UniversityCategory({
    required this.id,
    required this.name,
    required this.faculties,
  });

  factory UniversityCategory.fromMap(Map<String, dynamic> map) {
    return UniversityCategory(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      faculties: (map['faculties'] as List? ?? [])
          .map((f) => Faculty.fromMap(f))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'faculties': faculties.map((f) => f.toMap()).toList(),
    };
  }
}

class Faculty {
  final String id;
  final String name;
  final String description;

  Faculty({
    required this.id,
    required this.name,
    required this.description,
  });

  factory Faculty.fromMap(Map<String, dynamic> map) {
    return Faculty(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      description: map['description'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'description': description,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\message_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Message {
  final String id;
  final String text;
  final DateTime timestamp;
  final bool isFromUser;
  final String userId; // Add the userId property

  Message({
    required this.id,
    required this.text,
    required this.timestamp,
    required this.isFromUser,
    required this.userId, // Add userId to the constructor
  });

  factory Message.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Message(
      id: doc.id,
      text: data['text'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      isFromUser: data['isFromUser'] ?? false,
      userId: data['userId'] ?? '', // Retrieve userId from Firestore
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'text': text,
      'timestamp': Timestamp.fromDate(timestamp),
      'isFromUser': isFromUser,
      'userId': userId, // Add userId to the map
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\mostajadat_modal.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class Mostajadat {
  final String id;
  final String title;
  final String description;
  final String details;
  final String category;
  final DateTime date;
  final DateTime? deadlineDate;
  final String imageUrl;
  final double titleFontSize;
  final Color titleColor;
  final TextAlign titleAlignment;
  final double descriptionFontSize;
  final Color descriptionColor;
  final TextAlign descriptionAlignment;
  final double detailsFontSize;
  final Color detailsColor;
  final TextAlign detailsAlignment;
  final double categoryFontSize;
  final Color categoryColor;
  final TextAlign categoryAlignment;
  final double dateFontSize;
  final Color dateColor;
  final TextAlign dateAlignment;
  final double imageWidth;
  final double imageHeight;
  final String type;
  final String? cardImagePath;
  final List<ContentBlock> contentBlocks;
  final List<ButtonLink> buttonLinks;
  final List<IconLink> iconLinks;

  Mostajadat({
    required this.id,
    required this.title,
    required this.description,
    required this.details,
    required this.category,
    required this.date,
    this.deadlineDate,
    required this.imageUrl,
    this.titleFontSize = 24.0,
    this.titleColor = Colors.black,
    this.titleAlignment = TextAlign.center,
    this.descriptionFontSize = 18.0,
    this.descriptionColor = Colors.black,
    this.descriptionAlignment = TextAlign.left,
    this.detailsFontSize = 16.0,
    this.detailsColor = Colors.black,
    this.detailsAlignment = TextAlign.left,
    this.categoryFontSize = 16.0,
    this.categoryColor = Colors.black,
    this.categoryAlignment = TextAlign.left,
    this.dateFontSize = 16.0,
    this.dateColor = Colors.black,
    this.dateAlignment = TextAlign.left,
    this.imageWidth = 200.0,
    this.imageHeight = 200.0,
    required this.type,
    this.cardImagePath,
    required this.contentBlocks,
    this.buttonLinks = const [],
    this.iconLinks = const [],
  });

  factory Mostajadat.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Mostajadat(
      id: doc.id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      details: data['details'] ?? '',
      category: data['category'] ?? 'general',
      date: (data['date'] is Timestamp)
          ? (data['date'] as Timestamp).toDate()
          : DateTime.now(),
      deadlineDate: (data['deadlineDate'] is Timestamp)
          ? (data['deadlineDate'] as Timestamp).toDate()
          : null,
      imageUrl: data['imageUrl'] ?? '',
      titleFontSize: data['titleFontSize'] as double? ?? 24.0,
      titleColor: Color(data['titleColor'] as int? ?? 0xFF000000),
      titleAlignment: TextAlign.values[data['titleAlignment'] as int? ?? 1],
      descriptionFontSize: data['descriptionFontSize'] as double? ?? 18.0,
      descriptionColor: Color(data['descriptionColor'] as int? ?? 0xFF000000),
      descriptionAlignment:
          TextAlign.values[data['descriptionAlignment'] as int? ?? 0],
      detailsFontSize: data['detailsFontSize'] as double? ?? 16.0,
      detailsColor: Color(data['detailsColor'] as int? ?? 0xFF000000),
      detailsAlignment: TextAlign.values[data['detailsAlignment'] as int? ?? 0],
      categoryFontSize: data['categoryFontSize'] as double? ?? 16.0,
      categoryColor: Color(data['categoryColor'] as int? ?? 0xFF000000),
      categoryAlignment:
          TextAlign.values[data['categoryAlignment'] as int? ?? 0],
      dateFontSize: data['dateFontSize'] as double? ?? 16.0,
      dateColor: Color(data['dateColor'] as int? ?? 0xFF000000),
      dateAlignment: TextAlign.values[data['dateAlignment'] as int? ?? 0],
      imageWidth: data['imageWidth'] as double? ?? 200.0,
      imageHeight: data['imageHeight'] as double? ?? 200.0,
      type: data['type'] ?? 'general',
      cardImagePath: data['cardImagePath'],
      contentBlocks: _parseContentBlocks(data['contentBlocks']),
      buttonLinks: (data['buttonLinks'] as List<dynamic>? ?? [])
          .map((link) => ButtonLink.fromMap(link))
          .toList(),
      iconLinks: (data['iconLinks'] as List<dynamic>? ?? [])
          .map((link) => IconLink.fromMap(link))
          .toList(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'details': details,
      'category': category,
      'date': Timestamp.fromDate(date),
      'deadlineDate':
          deadlineDate != null ? Timestamp.fromDate(deadlineDate!) : null,
      'imageUrl': imageUrl,
      'titleFontSize': titleFontSize,
      'titleColor': titleColor.value,
      'titleAlignment': titleAlignment.index,
      'descriptionFontSize': descriptionFontSize,
      'descriptionColor': descriptionColor.value,
      'descriptionAlignment': descriptionAlignment.index,
      'detailsFontSize': detailsFontSize,
      'detailsColor': detailsColor.value,
      'detailsAlignment': detailsAlignment.index,
      'categoryFontSize': categoryFontSize,
      'categoryColor': categoryColor.value,
      'categoryAlignment': categoryAlignment.index,
      'dateFontSize': dateFontSize,
      'dateColor': dateColor.value,
      'dateAlignment': dateAlignment.index,
      'imageWidth': imageWidth,
      'imageHeight': imageHeight,
      'type': type,
      'cardImagePath': cardImagePath,
      'contentBlocks': contentBlocks.map((block) => block.toMap()).toList(),
      'buttonLinks': buttonLinks.map((link) => link.toMap()).toList(),
      'iconLinks': iconLinks.map((link) => link.toMap()).toList(),
    };
  }

  static List<ContentBlock> _parseContentBlocks(dynamic contentBlocksData) {
    if (contentBlocksData is List) {
      return contentBlocksData.map((blockData) {
        if (blockData is Map<String, dynamic>) {
          switch (blockData['type']) {
            case 'text':
              return TextBlock.fromMap(blockData);
            case 'image':
              return ImageBlock.fromMap(blockData);
            case 'code':
              return CodeBlock.fromMap(blockData);
            case 'blockquote':
              return BlockquoteBlock.fromMap(blockData);
            default:
              return TextBlock(
                  text: 'Unknown Block Type',
                  textStyle: TextStyle(),
                  alignment: TextAlign.left);
          }
        } else {
          return TextBlock(
              text: 'Invalid Block Data',
              textStyle: TextStyle(),
              alignment: TextAlign.left);
        }
      }).toList();
    }
    return [];
  }
}

enum ContentType { text, image, code, blockquote }

abstract class ContentBlock {
  ContentType type;

  ContentBlock({required this.type});

  Map<String, dynamic> toMap();

  factory ContentBlock.fromMap(Map<String, dynamic> map) {
    switch (map['type']) {
      case 'text':
        return TextBlock.fromMap(map);
      case 'image':
        return ImageBlock.fromMap(map);
      case 'code':
        return CodeBlock.fromMap(map);
      case 'blockquote':
        return BlockquoteBlock.fromMap(map);
      default:
        return TextBlock(
            text: 'Unknown Block Type',
            textStyle: TextStyle(),
            alignment: TextAlign.left);
    }
  }
}

class TextBlock extends ContentBlock {
  String text;
  TextStyle textStyle;
  TextEditingController controller = TextEditingController();
  TextAlign alignment;

  TextBlock({
    required this.text,
    this.textStyle = const TextStyle(),
    this.alignment = TextAlign.left,
  }) : super(type: ContentType.text) {
    controller.text = text;
  }

  factory TextBlock.fromMap(Map<String, dynamic> map) {
    return TextBlock(
      text: map['text'] ?? '',
      textStyle: TextStyle(
        fontSize: (map['textStyle']['fontSize'] as num?)?.toDouble(),
        fontWeight: _parseFontWeight(map['textStyle']['fontWeight']),
        fontStyle: _parseFontStyle(map['textStyle']['fontStyle']),
        color: Color(map['textStyle']['color'] as int? ?? 0xFF000000),
        decoration: _parseTextDecoration(map['textStyle']['decoration']),
      ),
      alignment: TextAlign.values[map['alignment'] as int? ?? 0],
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'text',
      'text': text,
      'textStyle': {
        'fontSize': textStyle.fontSize,
        'fontWeight': textStyle.fontWeight?.index,
        'fontStyle': textStyle.fontStyle?.index,
        'color': textStyle.color?.value,
        'decoration': textStyle.decoration?.toString(),
      },
      'alignment': alignment.index,
    };
  }

  static FontWeight? _parseFontWeight(dynamic value) {
    if (value is int) {
      return FontWeight.values[value];
    }
    return null;
  }

  static FontStyle? _parseFontStyle(dynamic value) {
    if (value is int) {
      return FontStyle.values[value];
    }
    return null;
  }

  static TextDecoration? _parseTextDecoration(dynamic value) {
    if (value is String) {
      switch (value) {
        case 'TextDecoration.none':
          return TextDecoration.none;
        case 'TextDecoration.underline':
          return TextDecoration.underline;
        case 'TextDecoration.overline':
          return TextDecoration.overline;
        case 'TextDecoration.lineThrough':
          return TextDecoration.lineThrough;
        default:
          return TextDecoration.none;
      }
    }
    return null;
  }
}

class ImageBlock extends ContentBlock {
  String? imageUrl;

  ImageBlock({this.imageUrl}) : super(type: ContentType.image);

  factory ImageBlock.fromMap(Map<String, dynamic> map) {
    return ImageBlock(
      imageUrl: map['imageUrl'],
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'image',
      'imageUrl': imageUrl,
    };
  }
}

class CodeBlock extends ContentBlock {
  String text;
  TextEditingController controller = TextEditingController();

  CodeBlock({required this.text}) : super(type: ContentType.code) {
    controller.text = text;
  }

  factory CodeBlock.fromMap(Map<String, dynamic> map) {
    return CodeBlock(
      text: map['text'] ?? '',
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'code',
      'text': text,
    };
  }
}

class BlockquoteBlock extends ContentBlock {
  String text;
  TextEditingController controller = TextEditingController();

  BlockquoteBlock({required this.text}) : super(type: ContentType.blockquote) {
    controller.text = text;
  }

  factory BlockquoteBlock.fromMap(Map<String, dynamic> map) {
    return BlockquoteBlock(
      text: map['text'] ?? '',
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'blockquote',
      'text': text,
    };
  }
}

class ButtonLink {
  final String text;
  final String url;

  ButtonLink({required this.text, required this.url});

  factory ButtonLink.fromMap(Map<String, dynamic> map) {
    return ButtonLink(
      text: map['text'] ?? '',
      url: map['url'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'text': text,
      'url': url,
    };
  }
}

class IconLink {
  final String iconUrl;  // Changed from iconName to iconUrl
  final String url;

  IconLink({required this.iconUrl, required this.url});

  factory IconLink.fromMap(Map<String, dynamic> map) {
    return IconLink(
      iconUrl: map['iconUrl'] ?? '',  // Changed from iconName to iconUrl
      url: map['url'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'iconUrl': iconUrl,  // Changed from iconName to iconUrl
      'url': url,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\news_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class News {
  final String id;
  final String title;
  final String summary;
  final String content;
  final DateTime date;
  final String? imageUrl;
  final List<Reaction> reactions;
  final List<Map<String, dynamic>> comments;

  News({
    required this.id,
    required this.title,
    required this.summary,
    required this.content,
    required this.date,
    this.imageUrl,
    required this.reactions,
    required this.comments,
  });

  factory News.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return News(
      id: doc.id,
      title: data['title'] ?? '',
      summary: data['summary'] ?? '',
      content: data['content'] ?? '',
      date: (data['date'] as Timestamp).toDate(),
      imageUrl: data['imageUrl'],
      reactions: _parseReactions(data['reactions']),
      comments: _parseComments(data['comments']),
    );
  }

  static List<Reaction> _parseReactions(dynamic reactionsData) {
    if (reactionsData is List) {
      return reactionsData
          .map((r) => r is Map<String, dynamic> ? Reaction.fromMap(r) : Reaction(emoji: '', userId: ''))
          .toList();
    }
    return [];
  }

  static List<Map<String, dynamic>> _parseComments(dynamic commentsData) {
    if (commentsData is List) {
      return commentsData
          .map((c) => c is Map<String, dynamic> ? c : <String, dynamic>{})
          .toList();
    }
    return [];
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'summary': summary,
      'content': content,
      'date': Timestamp.fromDate(date),
      'imageUrl': imageUrl,
      'reactions': reactions.map((r) => r.toMap()).toList(),
      'comments': comments,
    };
  }
}

class Reaction {
  final String emoji;
  final String userId;

  Reaction({required this.emoji, required this.userId});

  factory Reaction.fromMap(Map<String, dynamic> map) {
    return Reaction(
      emoji: map['emoji'] as String? ?? '',
      userId: map['userId'] as String? ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'emoji': emoji,
      'userId': userId,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\opportunity_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class Opportunity {
  final String id;
  final String title;
  final String description;
  final String imageUrl;
  final DateTime deadline;
  final String category;
  final String organizationName;

  Opportunity({
    required this.id,
    required this.title,
    required this.description,
    required this.imageUrl,
    required this.deadline,
    required this.category,
    required this.organizationName,
  });

  factory Opportunity.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return Opportunity(
      id: doc.id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      deadline: (data['deadline'] as Timestamp).toDate(),
      category: data['category'] ?? '',
      organizationName: data['organizationName'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'imageUrl': imageUrl,
      'deadline': Timestamp.fromDate(deadline),
      'category': category,
      'organizationName': organizationName,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\school_model.dart
// File: lib/models/school_model.dart

import 'package:cloud_firestore/cloud_firestore.dart';

class School {
  final String id;
  final String name;
  final String description;
  final String category;
  final String imageUrl;
  final List<String> programs;
  final Map<String, dynamic> admissionRequirements;

  School({
    required this.id,
    required this.name,
    required this.description,
    required this.category,
    required this.imageUrl,
    required this.programs,
    required this.admissionRequirements,
  });

  factory School.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return School(
      id: doc.id,
      name: data['name'] ?? '',
      description: data['description'] ?? '',
      category: data['category'] ?? '',
      imageUrl: data['imageUrl'] ?? '',
      programs: List<String>.from(data['programs'] ?? []),
      admissionRequirements: Map<String, dynamic>.from(data['admissionRequirements'] ?? {}),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'category': category,
      'imageUrl': imageUrl,
      'programs': programs,
      'admissionRequirements': admissionRequirements,
    };
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\support_message.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class SupportMessage {
  final String id;
  final String senderId;
  final String content;
  final DateTime timestamp;
  final bool isAdminMessage;

  SupportMessage({
    required this.id,
    required this.senderId,
    required this.content,
    required this.timestamp,
    this.isAdminMessage = false,
  });

  factory SupportMessage.fromFirestore(DocumentSnapshot doc) {
    Map data = doc.data() as Map<String, dynamic>;
    return SupportMessage(
      id: doc.id,
      senderId: data['senderId'] ?? '',
      content: data['content'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      isAdminMessage: data['isAdminMessage'] ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'senderId': senderId,
      'content': content,
      'timestamp': Timestamp.fromDate(timestamp),
      'isAdminMessage': isAdminMessage,
    };
  }

  SupportMessage copyWith({
    String? id,
    String? senderId,
    String? content,
    DateTime? timestamp,
    bool? isAdminMessage,
  }) {
    return SupportMessage(
      id: id ?? this.id,
      senderId: senderId ?? this.senderId,
      content: content ?? this.content,
      timestamp: timestamp ?? this.timestamp,
      isAdminMessage: isAdminMessage ?? this.isAdminMessage,
    );
  }

  @override
  String toString() {
    return 'SupportMessage(id: $id, senderId: $senderId, content: $content, timestamp: $timestamp, isAdminMessage: $isAdminMessage)';
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\support_ticket.dart
import 'package:flutter/foundation.dart';

enum TicketStatus { open, inProgress, resolved, closed }

class SupportTicket {
  final String id;
  final String userId;
  final List<TicketMessage> messages;
  final TicketStatus status;
  final DateTime createdAt;
  final DateTime updatedAt;

  SupportTicket({
    required this.id,
    required this.userId,
    required this.messages,
    required this.status,
    required this.createdAt,
    required this.updatedAt,
  });

  SupportTicket copyWith({
    String? id,
    String? userId,
    List<TicketMessage>? messages,
    TicketStatus? status,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return SupportTicket(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      messages: messages ?? this.messages,
      status: status ?? this.status,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }
}

class TicketMessage {
  final String senderId;
  final String content;
  final DateTime timestamp;

  TicketMessage({
    required this.senderId,
    required this.content,
    required this.timestamp,
  });
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\models\user_model.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class UserModel {
  final String id;
  final String name;
  final String email;
  final String? photoUrl;
  final String? bio;
  final List<String> interests;
  final List<String> appliedOpportunities;
  final DateTime createdAt;
  final DateTime lastLogin;
  final String? fcmToken;
  final String username;
  final String? gender;
  final String? branch;
  final String? regionPoint;
  final String? nationalPoint;

  UserModel({
    required this.id,
    required this.name,
    required this.email,
    this.photoUrl,
    this.bio,
    this.interests = const [],
    this.appliedOpportunities = const [],
    required this.createdAt,
    required this.lastLogin,
    this.fcmToken,
    required this.username,
    this.gender,
    this.branch,
    this.regionPoint,
    this.nationalPoint,
  });

  factory UserModel.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>? ?? {};
    return UserModel(
      id: doc.id,
      name: data['name'] ?? '',
      email: data['email'] ?? '',
      photoUrl: data['photoUrl'],
      bio: data['bio'],
      interests: List<String>.from(data['interests'] ?? []),
      appliedOpportunities: List<String>.from(data['appliedOpportunities'] ?? []),
      createdAt: (data['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
      lastLogin: (data['lastLogin'] as Timestamp?)?.toDate() ?? DateTime.now(),
      fcmToken: data['fcmToken'],
      username: data['username'] ?? '',
      gender: data['gender'],
      branch: data['branch'],
      regionPoint: data['regionPoint'],
      nationalPoint: data['nationalPoint'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'email': email,
      'photoUrl': photoUrl,
      'bio': bio,
      'interests': interests,
      'appliedOpportunities': appliedOpportunities,
      'createdAt': Timestamp.fromDate(createdAt),
      'lastLogin': Timestamp.fromDate(lastLogin),
      'fcmToken': fcmToken,
      'username': username,
      'gender': gender,
      'branch': branch,
      'regionPoint': regionPoint,
      'nationalPoint': nationalPoint,
    };
  }

  UserModel copyWith({
    String? name,
    String? email,
    String? photoUrl,
    String? bio,
    List<String>? interests,
    List<String>? appliedOpportunities,
    DateTime? createdAt,
    DateTime? lastLogin,
    String? fcmToken,
    String? username,
    String? gender,
    String? branch,
    String? regionPoint,
    String? nationalPoint,
  }) {
    return UserModel(
      id: this.id,
      name: name ?? this.name,
      email: email ?? this.email,
      photoUrl: photoUrl ?? this.photoUrl,
      bio: bio ?? this.bio,
      interests: interests ?? this.interests,
      appliedOpportunities: appliedOpportunities ?? this.appliedOpportunities,
      createdAt: createdAt ?? this.createdAt,
      lastLogin: lastLogin ?? this.lastLogin,
      fcmToken: fcmToken ?? this.fcmToken,
      username: username ?? this.username,
      gender: gender ?? this.gender,
      branch: branch ?? this.branch,
      regionPoint: regionPoint ?? this.regionPoint,
      nationalPoint: nationalPoint ?? this.nationalPoint,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\announcement_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';

class AnnouncementNotifier extends StateNotifier<AsyncValue<List<Announcement>>> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  DocumentSnapshot? _lastDocument;
  bool _hasMore = true;
  final int _pageSize = 10;

  AnnouncementNotifier() : super(AsyncValue.loading()) {
    loadInitial();
  }

  Future<void> loadInitial() async {
    state = AsyncValue.loading();
    _lastDocument = null;
    _hasMore = true;
    await _loadAnnouncements();
  }

  Future<void> loadMore() async {
    if (!_hasMore) return;
    await _loadAnnouncements();
  }

  Future<void> _loadAnnouncements() async {
    try {
      Query query = _firestore.collection('announcements')
          .orderBy('date', descending: true)
          .limit(_pageSize);

      if (_lastDocument != null) {
        query = query.startAfterDocument(_lastDocument!);
      }

      final querySnapshot = await query.get();

      if (querySnapshot.docs.isEmpty) {
        _hasMore = false;
        return;
      }

      final newAnnouncements = querySnapshot.docs
          .map((doc) => Announcement.fromFirestore(doc))
          .toList();

      _lastDocument = querySnapshot.docs.last;

      state = AsyncValue.data([
        ...state.value ?? [],
        ...newAnnouncements,
      ]);

      _hasMore = querySnapshot.docs.length == _pageSize;
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> refresh() async {
    await loadInitial();
  }

  Future<void> addAnnouncement(Announcement announcement) async {
    await _firestore.collection('announcements').add(announcement.toMap());
    await loadInitial();
  }

  Future<void> updateAnnouncement(Announcement announcement) async {
    await _firestore.collection('announcements').doc(announcement.id).update(announcement.toMap());
    state = AsyncValue.data(state.value?.map((a) => a.id == announcement.id ? announcement : a).toList() ?? []);
  }

  Future<void> deleteAnnouncement(String id) async {
    await _firestore.collection('announcements').doc(id).delete();
    state = AsyncValue.data(state.value?.where((a) => a.id != id).toList() ?? []);
  }
}

final announcementNotifierProvider = StateNotifierProvider<AnnouncementNotifier, AsyncValue<List<Announcement>>>((ref) {
  return AnnouncementNotifier();
});

// Use this provider to access the announcements
final announcementsProvider = Provider<AsyncValue<List<Announcement>>>((ref) {
  return ref.watch(announcementNotifierProvider);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\application_provider.dart
// File: lib/providers/application_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

class ApplicationNotifier extends StateNotifier<AsyncValue<void>> {
  final FirestoreService _firestoreService;

  ApplicationNotifier(this._firestoreService) : super(AsyncValue.data(null));

  Future<void> submitApplication({
    required String announcementId,
    required String name,
    required String email,
    required String phone,
    required String motivation,
  }) async {
    state = AsyncValue.loading();
    try {
      await _firestoreService.addApplication({
        'announcementId': announcementId,
        'name': name,
        'email': email,
        'phone': phone,
        'motivation': motivation,
        'timestamp': DateTime.now(),
      });
      state = AsyncValue.data(null);
    } catch (e, stackTrace) {
      state = AsyncValue.error(e, stackTrace);
    }
  }
}

final applicationProvider = StateNotifierProvider<ApplicationNotifier, AsyncValue<void>>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return ApplicationNotifier(firestoreService);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\auth_provider.dart
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/user_model.dart';
import 'package:taleb_edu_platform/services/auth_service.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';
import 'package:taleb_edu_platform/services/notification_service.dart';

class AuthState {
  final User? firebaseUser;
  final UserModel? userModel;

  const AuthState({this.firebaseUser, this.userModel});

  bool get isAuthenticated => firebaseUser != null;
}

class AuthNotifier extends StateNotifier<AuthState> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirestoreService _firestoreService = FirestoreService();

  AuthNotifier() : super(AuthState()) {
    _auth.authStateChanges().listen(_onAuthStateChanged);
  }

  Future<void> _onAuthStateChanged(User? firebaseUser) async {
    if (firebaseUser == null) {
      state = AuthState(firebaseUser: null, userModel: null);
    } else {
      print('Current user ID: ${firebaseUser.uid}');
      try {
        final doc = await _firestoreService.getDocument('users', firebaseUser.uid);
        UserModel? userModel;
        if (doc.exists) {
          userModel = UserModel.fromFirestore(doc);
        } else {
          userModel = await _createUserDocument(firebaseUser);
        }
        state = AuthState(firebaseUser: firebaseUser, userModel: userModel);
      } catch (e) {
        print('Error retrieving or creating user document: $e');
        state = AuthState(firebaseUser: firebaseUser, userModel: null);
      }
    }
  }

  Future<UserModel> _createUserDocument(User firebaseUser) async {
    final newUser = UserModel(
      id: firebaseUser.uid,
      name: firebaseUser.displayName ?? 'New User',
      email: firebaseUser.email ?? '',
      photoUrl: firebaseUser.photoURL,
      createdAt: DateTime.now(),
      lastLogin: DateTime.now(),
      username: '',
    );
    try {
      await _firestoreService.setDocument('users', firebaseUser.uid, newUser.toMap());
      print('Created new user document for ${firebaseUser.uid}');
      return newUser;
    } catch (e) {
      print('Error creating user document: $e');
      throw Exception('Failed to create user document: $e');
    }
  }

  Future<void> signIn(String email, String password) async {
    try {
      await _auth.signInWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      print('Error signing in: $e');
      rethrow;
    }
  }

  Future<void> signUp(String email, String password, String username) async {
    try {
      final UserCredential credential = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      final user = UserModel(
        id: credential.user!.uid,
        name: username,
        email: email,
        username: username,
        createdAt: DateTime.now(),
        lastLogin: DateTime.now(),
      );
      await _firestoreService.setDocument('users', user.id, user.toMap());
    } catch (e) {
      print('Error signing up: $e');
      rethrow;
    }
  }

  Future<void> signOut() async {
    try {
      await _auth.signOut();
    } catch (e) {
      print('Error signing out: $e');
      rethrow;
    }
  }

  Future<void> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
    } catch (e) {
      print('Error resetting password: $e');
      rethrow;
    }
  }

  Future<void> updateProfile(UserModel updatedUser) async {
    try {
      await _firestoreService.updateDocument('users', updatedUser.id, updatedUser.toMap());
      state = AuthState(firebaseUser: state.firebaseUser, userModel: updatedUser);
    } catch (e) {
      print('Error updating profile: $e');
      rethrow;
    }
  }
}

final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  return AuthNotifier();
});

final authServiceProvider = Provider<AuthService>((ref) {
  final notificationService = ref.watch(notificationServiceProvider);
  return AuthService(notificationService);
});

final authStateProvider = StreamProvider<User?>((ref) {
  return ref.watch(authServiceProvider).authStateChanges;
});

final currentUserProvider = FutureProvider<UserModel?>((ref) async {
  final authService = ref.watch(authServiceProvider);
  return authService.getCurrentUser();
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\data_providers.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/news_model.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

final firestoreServiceProvider = Provider<FirestoreService>((ref) => FirestoreService());

final recentNewsProvider = StreamProvider<List<News>>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return firestoreService.getCollectionStream('news').map((snapshot) =>
      snapshot.docs.map((doc) => News.fromFirestore(doc)).toList());
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\education_pathway_provider.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';

class EducationPathwayNotifier extends StateNotifier<AsyncValue<List<EducationPathway>>> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  EducationPathwayNotifier() : super(AsyncValue.loading()) {
    loadPathways();
  }

  Future<void> deleteUniversity(String pathwayId, String specializationId, String universityId) async {
    try {
      final pathwayDoc = await _firestore.collection('education_pathways').doc(pathwayId).get();
      if (!pathwayDoc.exists) {
        throw Exception('Pathway not found');
      }

      final pathwayData = pathwayDoc.data() as Map<String, dynamic>;
      final specializations = (pathwayData['specializations'] as List? ?? []).map((spec) => Specialization.fromFirestore(spec)).toList();

      final specializationIndex = specializations.indexWhere((spec) => spec.id == specializationId);
      if (specializationIndex == -1) {
        throw Exception('Specialization not found');
      }

      specializations[specializationIndex].universities.removeWhere((uni) => uni.id == universityId);

      await _firestore.collection('education_pathways').doc(pathwayId).update({
        'specializations': specializations.map((spec) => spec.toMap()).toList(),
      });

      await loadPathways();
    } catch (e, stack) {
      print('Error deleting university: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> loadPathways() async {
    try {
      final querySnapshot = await _firestore.collection('education_pathways').get();
      final pathways = querySnapshot.docs.map((doc) => EducationPathway.fromFirestore(doc)).toList();
      state = AsyncValue.data(pathways);
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> addPathway(EducationPathway pathway) async {
    try {
      final docRef = await _firestore.collection('education_pathways').add(pathway.toMap());
      await loadPathways();
    } catch (e, stack) {
      print('Error adding pathway: $e');
    }
  }

  Future<void> updatePathway(EducationPathway pathway) async {
    try {
      await _firestore.collection('education_pathways').doc(pathway.id).update(pathway.toMap());
      await loadPathways();
    } catch (e, stack) {
      print('Error updating pathway: $e');
    }
  }

  Future<void> deletePathway(String id) async {
    try {
      await _firestore.collection('education_pathways').doc(id).delete();
      await loadPathways();
    } catch (e, stack) {
      print('Error deleting pathway: $e');
    }
  }

  Future<void> updateUniversity(String pathwayId, String specializationId, University university) async {
    try {
      final pathwayDoc = await _firestore.collection('education_pathways').doc(pathwayId).get();
      if (!pathwayDoc.exists) {
        throw Exception('Pathway not found');
      }

      final pathwayData = pathwayDoc.data() as Map<String, dynamic>;
      final specializations = (pathwayData['specializations'] as List? ?? []).map((spec) => Specialization.fromFirestore(spec)).toList();

      final specializationIndex = specializations.indexWhere((spec) => spec.id == specializationId);
      if (specializationIndex == -1) {
        throw Exception('Specialization not found');
      }

      final universityIndex = specializations[specializationIndex].universities.indexWhere((uni) => uni.id == university.id);
      if (universityIndex == -1) {
        // Add new university
        specializations[specializationIndex].universities.add(university);
      } else {
        // Update existing university
        specializations[specializationIndex].universities[universityIndex] = university;
      }

      await _firestore.collection('education_pathways').doc(pathwayId).update({
        'specializations': specializations.map((spec) => spec.toMap()).toList(),
      });

      await loadPathways();
    } catch (e, stack) {
      print('Error updating university: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> addSpecialization(String pathwayId, Specialization specialization) async {
    try {
      final pathwayDoc = await _firestore.collection('education_pathways').doc(pathwayId).get();
      if (!pathwayDoc.exists) {
        throw Exception('Pathway not found');
      }

      final pathwayData = pathwayDoc.data() as Map<String, dynamic>;
      final specializations = (pathwayData['specializations'] as List? ?? []).map((spec) => Specialization.fromFirestore(spec)).toList();

      specializations.add(specialization);

      await _firestore.collection('education_pathways').doc(pathwayId).update({
        'specializations': specializations.map((spec) => spec.toMap()).toList(),
      });

      await loadPathways();
    } catch (e, stack) {
      print('Error adding specialization: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> updateSpecialization(String pathwayId, Specialization specialization) async {
    try {
      final pathwayDoc = await _firestore.collection('education_pathways').doc(pathwayId).get();
      if (!pathwayDoc.exists) {
        throw Exception('Pathway not found');
      }

      final pathwayData = pathwayDoc.data() as Map<String, dynamic>;
      final specializations = (pathwayData['specializations'] as List? ?? []).map((spec) => Specialization.fromFirestore(spec)).toList();

      final index = specializations.indexWhere((spec) => spec.id == specialization.id);
      if (index == -1) {
        throw Exception('Specialization not found');
      }

      specializations[index] = specialization;

      await _firestore.collection('education_pathways').doc(pathwayId).update({
        'specializations': specializations.map((spec) => spec.toMap()).toList(),
      });

      await loadPathways();
    } catch (e, stack) {
      print('Error updating specialization: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> deleteSpecialization(String pathwayId, String specializationId) async {
    try {
      final pathwayDoc = await _firestore.collection('education_pathways').doc(pathwayId).get();
      if (!pathwayDoc.exists) {
        throw Exception('Pathway not found');
      }

      final pathwayData = pathwayDoc.data() as Map<String, dynamic>;
      final specializations = (pathwayData['specializations'] as List? ?? []).map((spec) => Specialization.fromFirestore(spec)).toList();

      specializations.removeWhere((spec) => spec.id == specializationId);

      await _firestore.collection('education_pathways').doc(pathwayId).update({
        'specializations': specializations.map((spec) => spec.toMap()).toList(),
      });

      await loadPathways();
    } catch (e, stack) {
      print('Error deleting specialization: $e');
      state = AsyncValue.error(e, stack);
    }
  }

  
}

final educationPathwayProvider = StateNotifierProvider<EducationPathwayNotifier, AsyncValue<List<EducationPathway>>>((ref) {
  return EducationPathwayNotifier();
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\guidance_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:taleb_edu_platform/models/guidance_category_model.dart';

class GuidanceCategoriesNotifier extends StateNotifier<AsyncValue<List<GuidanceCategory>>> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  GuidanceCategoriesNotifier() : super(AsyncValue.loading()) {
    loadCategories();
  }

  Future<void> loadCategories() async {
    try {
      final querySnapshot = await _firestore.collection('guidance_categories').get();

      final categories = await Future.wait(querySnapshot.docs.map((doc) async {
        final category = GuidanceCategory.fromFirestore(doc);
        final subcategoriesSnapshot = await doc.reference.collection('subcategories').get();

        category.subcategories = await Future.wait(subcategoriesSnapshot.docs.map((subDoc) async {
          final subcategory = GuidanceSubcategory.fromFirestore(subDoc);
          final itemsSnapshot = await subDoc.reference.collection('items').get();

          subcategory.items = itemsSnapshot.docs.map((itemDoc) => GuidanceItem.fromFirestore(itemDoc)).toList();
          return subcategory;
        }));

        return category;
      }).toList());

      state = AsyncValue.data(categories);
    } catch (e, stack) {
      state = AsyncValue.error(e, stack);
    }
  }

  Future<void> addCategory(GuidanceCategory category) async {
    try {
      final docRef = await _firestore.collection('guidance_categories').add(category.toMap());

      for (var subcategory in category.subcategories) {
        final subDocRef = await docRef.collection('subcategories').add(subcategory.toMap());

        for (var item in subcategory.items) {
          await subDocRef.collection('items').add(item.toMap());
        }
      }

      await loadCategories();
    } catch (e, stack) {
      print('Error adding category: $e');
      // Handle the error appropriately, e.g., show an error message
    }
  }

  Future<void> updateCategory(GuidanceCategory category) async {
    try {
      await _firestore.collection('guidance_categories').doc(category.id).update(category.toMap());
      await loadCategories();
    } catch (e, stack) {
      print('Error updating category: $e');
      // Handle the error appropriately
    }
  }

  Future<void> deleteCategory(String id) async {
    try {
      await _firestore.collection('guidance_categories').doc(id).delete();
      await loadCategories();
    } catch (e, stack) {
      print('Error deleting category: $e');
      // Handle the error appropriately
    }
  }
}

final guidanceCategoriesProvider = StateNotifierProvider<GuidanceCategoriesNotifier, AsyncValue<List<GuidanceCategory>>>((ref) {
  return GuidanceCategoriesNotifier();
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\job_competitions_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';

class JobCompetitionsNotifier extends StateNotifier<List<Announcement>> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  DocumentSnapshot? _lastDocument;
  bool _hasMore = true;
  final int _pageSize = 10;

  JobCompetitionsNotifier() : super([]);

  Future<void> loadInitial() async {
    state = [];
    _lastDocument = null;
    _hasMore = true;
    await loadMore();
  }

  Future<void> loadMore() async {
    if (!_hasMore) return;

    Query query = _firestore.collection('announcements')
        .where('category', isEqualTo: 'job_competition')
        .orderBy('date', descending: true)
        .limit(_pageSize);

    if (_lastDocument != null) {
      query = query.startAfterDocument(_lastDocument!);
    }

    final querySnapshot = await query.get();

    if (querySnapshot.docs.isEmpty) {
      _hasMore = false;
      return;
    }

    final newJobCompetitions = querySnapshot.docs
        .map((doc) => Announcement.fromFirestore(doc))
        .toList();

    _lastDocument = querySnapshot.docs.last;

    state = [...state, ...newJobCompetitions];

    _hasMore = querySnapshot.docs.length == _pageSize;
  }

  Future<void> refresh() async {
    await loadInitial();
  }

  Future<void> addJobCompetition(Announcement jobCompetition) async {
    await _firestore.collection('announcements').add(jobCompetition.toMap());
    await loadInitial();
  }

  Future<void> updateJobCompetition(Announcement jobCompetition) async {
    await _firestore.collection('announcements').doc(jobCompetition.id).update(jobCompetition.toMap());
    state = state.map((a) => a.id == jobCompetition.id ? jobCompetition : a).toList();
  }

  Future<void> deleteJobCompetition(String id) async {
    await _firestore.collection('announcements').doc(id).delete();
    state = state.where((a) => a.id != id).toList();
  }
}

final jobCompetitionsNotifierProvider = StateNotifierProvider<JobCompetitionsNotifier, List<Announcement>>((ref) {
  return JobCompetitionsNotifier();
});

final jobCompetitionsProvider = FutureProvider<List<Announcement>>((ref) async {
  final jobCompetitionsNotifier = ref.watch(jobCompetitionsNotifierProvider.notifier); 
  await jobCompetitionsNotifier.loadInitial();
  return ref.watch(jobCompetitionsNotifierProvider); 
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\language_provider.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageNotifier extends StateNotifier<Locale> {
  LanguageNotifier() : super(Locale('ar', 'SA')) {
    loadSavedLanguage();
  }

  Future<void> setLanguage(Locale locale) async {
    state = locale;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('language_code', locale.languageCode);
    await prefs.setString('country_code', locale.countryCode ?? '');
  }

  Future<void> loadSavedLanguage() async {
    final prefs = await SharedPreferences.getInstance();
    final languageCode = prefs.getString('language_code');
    final countryCode = prefs.getString('country_code');
    if (languageCode != null) {
      state = Locale(languageCode, countryCode);
    }
  }
}

final languageProvider = StateNotifierProvider<LanguageNotifier, Locale>((ref) => LanguageNotifier());


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\message_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/message_model.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';
import 'package:firebase_auth/firebase_auth.dart';

class MessageNotifier extends StateNotifier<List<Message>> {
  final FirestoreService _firestoreService;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  MessageNotifier(this._firestoreService) : super([]) {
    _loadMessages();
  }

  void _loadMessages() {
    _firestoreService.getMessagesStream().listen((messages) {
      state = messages;
    });
  }

  Future<void> sendMessage(String text) async {
    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      print('Error: User not logged in.');
      return; // Or handle this case appropriately, e.g., show an error message
    }

    final newMessage = Message(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      text: text,
      timestamp: DateTime.now(),
      isFromUser: true,
      userId: currentUser.uid, // Get the userId from the logged-in user
    );

    await _firestoreService.addMessage(newMessage);
  }
}

final messageProvider = StateNotifierProvider<MessageNotifier, List<Message>>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return MessageNotifier(firestoreService);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\mostajadat_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

final mostajadatProvider = FutureProvider<List<Mostajadat>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return firestoreService.getMostajadat();
});

final filteredMostajadatProvider = Provider.family<List<Mostajadat>, MostajadatFilter>((ref, filter) {
  final mostajadatAsyncValue = ref.watch(mostajadatProvider);
  return mostajadatAsyncValue.when(
    data: (mostajadat) => mostajadat.where((m) =>
    (filter.searchQuery.isEmpty || m.title.toLowerCase().contains(filter.searchQuery.toLowerCase())) &&
        (filter.category == 'All' || m.category == filter.category)
    ).toList(),
    loading: () => [],
    error: (_, __) => [],
  );
});

class MostajadatFilter {
  final String searchQuery;
  final String category;

  MostajadatFilter({
    this.searchQuery = '',
    this.category = 'All',
  });

  MostajadatFilter copyWith({
    String? searchQuery,
    String? category,
  }) {
    return MostajadatFilter(
      searchQuery: searchQuery ?? this.searchQuery,
      category: category ?? this.category,
    );
  }
}

final mostajadatFilterProvider = StateProvider<MostajadatFilter>((ref) => MostajadatFilter());

final addMostajadatProvider = FutureProvider.family<void, Mostajadat>((ref, mostajadat) async {
  final firestoreService = ref.read(firestoreServiceProvider);
  await firestoreService.addDocument('mostajadat', mostajadat.toMap());
  ref.refresh(mostajadatProvider);
});

final updateMostajadatProvider = FutureProvider.family<void, Mostajadat>((ref, mostajadat) async {
  final firestoreService = ref.read(firestoreServiceProvider);
  await firestoreService.updateDocument('mostajadat', mostajadat.id, mostajadat.toMap());
  ref.refresh(mostajadatProvider);
});

final deleteMostajadatProvider = FutureProvider.family<void, String>((ref, id) async {
  final firestoreService = ref.read(firestoreServiceProvider);
  await firestoreService.deleteDocument('mostajadat', id);
  ref.refresh(mostajadatProvider);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\news_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:taleb_edu_platform/models/news_model.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

final newsReactionsProvider = Provider.family<Future<void>, Map<String, dynamic>>((ref, data) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  final String newsId = data['newsId'] as String;
  final Reaction newReaction = data['reaction'] as Reaction;
  
  print('Adding reaction ${newReaction.emoji} to news $newsId for user ${newReaction.userId}');
  
  try {
    DocumentReference newsRef = firestoreService.firestore.collection('news').doc(newsId);
    
    await firestoreService.firestore.runTransaction((transaction) async {
      DocumentSnapshot newsDoc = await transaction.get(newsRef);
      
      if (!newsDoc.exists) {
        throw Exception("News post does not exist!");
      }
      
      Map<String, dynamic> newsData = newsDoc.data() as Map<String, dynamic>;
      List<dynamic> reactionsData = newsData['reactions'] as List<dynamic>? ?? [];
      
      List<Map<String, dynamic>> reactions = reactionsData.map((r) {
        if (r is Map<String, dynamic>) {
          return r;
        } else if (r is String) {
          return {'emoji': r, 'userId': 'unknown'};
        } else {
          return {'emoji': '', 'userId': ''};
        }
      }).toList();
      
      // Remove existing reaction from the same user
      reactions.removeWhere((r) => r['userId'] == newReaction.userId);
      
      // Add new reaction
      reactions.add(newReaction.toMap());
      
      transaction.update(newsRef, {'reactions': reactions});
    });
    
    print('Reaction added successfully');
  } catch (e) {
    print('Error adding reaction: $e');
    throw e;
  }
});

final recentNewsProvider = StreamProvider<List<News>>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return firestoreService.getCollectionStream('news').map((snapshot) {
    List<News> newsList = [];
    for (var doc in snapshot.docs) {
      try {
        newsList.add(News.fromFirestore(doc));
      } catch (e, stack) {
        print('Error parsing news document ${doc.id}: $e');
        print('Stack trace: $stack');
      }
    }
    return newsList;
  });
});

final newsCommentsProvider = Provider.family<Future<void>, Map<String, dynamic>>((ref, data) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  String newsId = data['newsId'] as String;
  Map<String, dynamic> comment = data['comment'] as Map<String, dynamic>;
  
  print('Adding comment to news $newsId: $comment');
  
  try {
    DocumentReference newsRef = firestoreService.firestore.collection('news').doc(newsId);
    
    await newsRef.update({
      'comments': FieldValue.arrayUnion([comment])
    });
    
    print('Comment added successfully');
  } catch (e) {
    print('Error adding comment: $e');
    throw e;
  }
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\school_provider.dart
// File: lib/providers/school_provider.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/school_model.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

final schoolProvider = FutureProvider<List<School>>((ref) async {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return await firestoreService.getSchools();
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\providers\support_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/support_message.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';

class SupportState {
  final List<SupportMessage> messages;
  final bool isLoading;
  final String? error;

  SupportState({
    required this.messages,
    this.isLoading = false,
    this.error,
  });

  SupportState copyWith({
    List<SupportMessage>? messages,
    bool? isLoading,
    String? error,
  }) {
    return SupportState(
      messages: messages ?? this.messages,
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
    );
  }
}

class SupportNotifier extends StateNotifier<SupportState> {
  final FirestoreService _firestoreService;

  SupportNotifier(this._firestoreService) : super(SupportState(messages: []));

  Future<void> loadMessages(String userId) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final messages = await _firestoreService.getSupportMessages(userId);
      state = SupportState(
        messages: messages,
        isLoading: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: 'Failed to load messages: $e',
      );
    }
  }

  Future<void> sendMessage(SupportMessage message) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final newMessage = await _firestoreService.addSupportMessage(message);
      final updatedMessages = [...state.messages, newMessage];
      state = state.copyWith(
        messages: updatedMessages,
        isLoading: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: 'Failed to send message: $e',
      );
    }
  }

  Future<void> sendMessageToTicket(String ticketId, TicketMessage message) async {
    try {
      await _firestoreService.addMessageToTicket(ticketId, message);
    } catch (e) {
      print('Error sending message to ticket: $e');
      throw Exception('Failed to send message to ticket: $e');
    }
  }

  Future<void> updateTicketStatus(String ticketId, TicketStatus newStatus) async {
    try {
      await _firestoreService.updateTicketStatus(ticketId, newStatus);
    } catch (e) {
      print('Error updating ticket status: $e');
      throw Exception('Failed to update ticket status: $e');
    }
  }

}

final supportProvider = StateNotifierProvider<SupportNotifier, SupportState>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return SupportNotifier(firestoreService);
});


final supportTicketProvider = StreamProvider.family<SupportTicket, String>((ref, ticketId) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return firestoreService.getSupportTicket(ticketId);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\admin_dashboard.dart
import 'dart:convert';
import 'dart:io';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path/path.dart' as path;
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/models/message_model.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/models/news_model.dart';
import 'package:taleb_edu_platform/providers/announcement_provider.dart';
import 'package:taleb_edu_platform/providers/mostajadat_provider.dart';
import 'package:taleb_edu_platform/providers/news_provider.dart';
import 'package:taleb_edu_platform/screens/mostajadat_customization_screen.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';
import 'package:http/http.dart' as http;

class AdminDashboardScreen extends ConsumerStatefulWidget {
  @override
  _AdminDashboardScreenState createState() => _AdminDashboardScreenState();
}

class _AdminDashboardScreenState extends ConsumerState<AdminDashboardScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final FirebaseFunctions _functions = FirebaseFunctions.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseMessaging _fcm = FirebaseMessaging.instance;

  final Color primaryColor = Color(0xFF1E88E5);
  final Color accentColor = Color(0xFFFFA000);
  final Color backgroundColor = Color(0xFFF5F5F5);
  final Color cardColor = Color(0xFFFFFFFF);
  final Color textColor = Color(0xFF333333);

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: ThemeData(
        primaryColor: primaryColor,
        hintColor: accentColor,
        scaffoldBackgroundColor: backgroundColor,
        cardColor: cardColor,
        textTheme: GoogleFonts.cairoTextTheme(Theme.of(context).textTheme).apply(
          bodyColor: textColor,
          displayColor: textColor,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: primaryColor,
          titleTextStyle: GoogleFonts.cairo(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 20,
          ),
        ),
      ),
      child: Scaffold(
        appBar: AppBar(
          title: Text('Ù„ÙˆØ­Ø© ØªØ­ÙƒÙ… Ø§Ù„Ø£Ø¯Ù…Ù†'),
          elevation: 0,
          bottom: TabBar(
            controller: _tabController,
            tabs: [
              Tab(text: 'Ø§Ù„Ø£Ø®Ø¨Ø§Ø±'.tr()),
              Tab(text: 'Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†Ø§Øª'.tr()),
              Tab(text: 'Ø§Ù„Ù…Ø³ØªØ¬Ø¯Ø§Øª'.tr()),
              Tab(text: 'Ø§Ù„Ø±Ø³Ø§Ø¦Ù„'.tr()),
            ],
            labelColor: Colors.white,
            unselectedLabelColor: Colors.white70,
            indicatorColor: accentColor,
          ),
        ),
        body: SafeArea(
          child: TabBarView(
            controller: _tabController,
            children: [
              _buildNewsTab(),
              _buildAnnouncementsTab(),
              _buildMostajadatTab(),
              AdminChatTab(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildNewsTab() {
    final newsAsyncValue = ref.watch(recentNewsProvider);

    return newsAsyncValue.when(
      data: (newsList) => ListView.builder(
        itemCount: newsList.length + 1,
        itemBuilder: (context, index) {
          if (index == 0) {
            return Padding(
              padding: const EdgeInsets.all(16.0),
              child: ElevatedButton(
                onPressed: () => _showAddNewsDialog(context),
                child: Text('Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±'.tr()),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: accentColor,
                  padding: EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            );
          }
          return _buildNewsCard(newsList[index - 1]);
        },
      ),
      loading: () => Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(primaryColor),
        ),
      ),
      error: (error, stack) => Center(
        child: Text('Error: $error', style: TextStyle(color: textColor)),
      ),
    );
  }

  Widget _buildAnnouncementsTab() {
    final announcementsAsyncValue = ref.watch(announcementsProvider);

    return announcementsAsyncValue.when(
      data: (announcements) => ListView.builder(
        itemCount: announcements.length + 1,
        itemBuilder: (context, index) {
          if (index == 0) {
            return Padding(
              padding: const EdgeInsets.all(16.0),
              child: ElevatedButton(
                onPressed: () => _showAddAnnouncementDialog(context),
                child: Text('Ø¥Ø¶Ø§ÙØ© Ø¥Ø¹Ù„Ø§Ù†'.tr()),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: accentColor,
                  padding: EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            );
          }
          return _buildAnnouncementCard(announcements[index - 1]);
        },
      ),
      loading: () => Center(
        child: CircularProgressIndicator(
          valueColor: AlwaysStoppedAnimation<Color>(primaryColor),
        ),
      ),
      error: (error, stack) => Center(
        child: Text('Error: $error', style: TextStyle(color: textColor)),
      ),
    );
  }

  Widget _buildMostajadatTab() {
    final Map<String, String> categoryMap = {
      'jobs': 'jobs_label',
      'guidance': 'guidance_label',
    };

    return DefaultTabController(
      length: categoryMap.length,
      child: Column(
        children: [
          TabBar(
            tabs: categoryMap.values
                .map((translationKey) => Tab(text: translationKey.tr()))
                .toList(),
            labelColor: primaryColor,
            unselectedLabelColor: Colors.grey,
            indicatorColor: accentColor,
          ),
          Expanded(
            child: TabBarView(
              children: categoryMap.keys.map((englishCategory) {
                return _buildMostajadatCategoryTab(englishCategory);
              }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMostajadatCategoryTab(String category) {
    final mostajadatAsyncValue = ref.watch(mostajadatProvider);

    return mostajadatAsyncValue.when(
      data: (mostajadatList) {
        final categoryMostajadat = mostajadatList
            .where((m) => m.category == category)
            .toList();
        return ListView.builder(
          itemCount: categoryMostajadat.length + 1,
          itemBuilder: (context, index) {
            if (index == 0) {
              return Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton(
                  onPressed: () => _showAddMostajadatDialog(context),
                  child: Text('Ø¥Ø¶Ø§ÙØ© Ù…Ø³ØªØ¬Ø¯'.tr()),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: accentColor,
                    padding: EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              );
            }
            return _buildMostajadatCard(categoryMostajadat[index - 1]);
          },
        );
      },
      loading: () => Center(child: CircularProgressIndicator()),
      error: (err, stack) => Center(child: Text('Error: $err')),
    );
  }

 
  Widget _buildNewsCard(News news) {
    return Card(
      color: cardColor,
      elevation: 2,
      margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: ListTile(
        contentPadding: EdgeInsets.all(16),
        title: Text(
          news.title,
          style: GoogleFonts.cairo(
            color: textColor,
            fontWeight: FontWeight.bold,
            fontSize: 18,
          ),
        ),
        subtitle: Text(
          news.summary,
          style: GoogleFonts.cairo(color: textColor, fontSize: 14),
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: primaryColor),
              onPressed: () => _showEditNewsDialog(context, news),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () => _showDeleteConfirmation(context, 'news', news.id),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnnouncementCard(Announcement announcement) {
    return Card(
      color: cardColor,
      elevation: 2,
      margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: ListTile(
        contentPadding: EdgeInsets.all(16),
        title: Text(
          announcement.title,
          style: GoogleFonts.cairo(
            color: textColor,
            fontWeight: FontWeight.bold,
            fontSize: 18,
          ),
        ),
        subtitle: Text(
          announcement.description,
          style: GoogleFonts.cairo(color: textColor, fontSize: 14),
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: primaryColor),
              onPressed: () => _showEditAnnouncementDialog(context, announcement),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () =>
                  _showDeleteConfirmation(context, 'announcements', announcement.id),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMostajadatCard(Mostajadat mostajadat) {
    final dateFormat = DateFormat('dd/MM/yyyy');
    final formattedDate = dateFormat.format(mostajadat.date);

    return Dismissible(
      key: Key(mostajadat.id),
      direction: DismissDirection.endToStart,
      onDismissed: (direction) {
        if (direction == DismissDirection.endToStart) {
          _showDeleteConfirmation(context, 'mostajadat', mostajadat.id);
        }
      },
      background: Container(
        color: Colors.red,
        alignment: Alignment.centerRight,
        padding: EdgeInsets.only(right: 20.0),
        margin: EdgeInsets.symmetric(horizontal: 15.0, vertical: 4.0),
        child: Icon(Icons.delete, color: Colors.white),
      ),
      child: Card(
        color: cardColor,
        elevation: 2,
        margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        child: ListTile(
          contentPadding: EdgeInsets.all(16),
          title: Text(
            mostajadat.title,
            style: GoogleFonts.cairo(
              color: textColor,
              fontWeight: FontWeight.bold,
              fontSize: 18,
            ),
          ),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                mostajadat.description,
                style: GoogleFonts.cairo(color: textColor, fontSize: 14),
              ),
              SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.calendar_today, size: 16, color: Colors.grey),
                  SizedBox(width: 4),
                  Text(
                    'ØªØ§Ø±ÙŠØ® Ø§Ù„Ù†Ø´Ø±: $formattedDate',
                    style: GoogleFonts.cairo(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ],
          ),
          onTap: () => _showEditMostajadatDialog(context, mostajadat),
        ),
      ),
    );
  }

  void _showAddNewsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => NewsDialog(
        primaryColor: primaryColor,
        accentColor: accentColor,
        backgroundColor: backgroundColor,
        cardColor: cardColor,
        textColor: textColor,
      ),
    );
    
    }

  void _showEditNewsDialog(BuildContext context, News news) {
    showDialog(
      context: context,
      builder: (context) => NewsDialog(
        news: news,
        primaryColor: primaryColor,
        accentColor: accentColor,
        backgroundColor: backgroundColor,
        cardColor: cardColor,
        textColor: textColor,
      ),
    );
  }

  void _showAddAnnouncementDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AnnouncementDialog(
        primaryColor: primaryColor,
        accentColor: accentColor,
        backgroundColor: backgroundColor,
        cardColor: cardColor,
        textColor: textColor,
      ),
    );
  }

  void _showEditAnnouncementDialog(BuildContext context, Announcement announcement) {
    showDialog(
      context: context,
      builder: (context) => AnnouncementDialog(
        announcement: announcement,
        primaryColor: primaryColor,
        accentColor: accentColor,
        backgroundColor: backgroundColor,
        cardColor: cardColor,
        textColor: textColor,
      ),
    );
  }

  void _showAddMostajadatDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AddMostajadatDialog(
        ref: ref,
      ),
    );
  }

  void _showEditMostajadatDialog(BuildContext context, Mostajadat mostajadat) {
    showDialog(
      context: context,
      builder: (context) => MostajadatCustomizationScreen(
        mostajadat: mostajadat,
        title: mostajadat.title,
        description: mostajadat.description,
        details: mostajadat.details,
        date: mostajadat.date,
        deadlineDate: mostajadat.deadlineDate,
        imageUrl: mostajadat.imageUrl,
        type: mostajadat.type,
      ),
    );
  }

  void _showDeleteConfirmation(BuildContext context, String type, String id) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: cardColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Text(
          'Ø­Ø°Ù ${type == 'news' ? 'Ø§Ù„Ø®Ø¨Ø±' : type == 'announcements' ? 'Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†' : 'Ø§Ù„Ù…Ø³ØªØ¬Ø¯'}'.tr(),
          style: GoogleFonts.cairo(color: textColor, fontWeight: FontWeight.bold),
        ),
        content: Text(
          'Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ø£Ù†Ùƒ ØªØ±ÙŠØ¯ Ø­Ø°Ù Ù‡Ø°Ø§ ${type == 'news' ? 'Ø§Ù„Ø®Ø¨Ø±' : type == 'announcements' ? 'Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†' : 'Ø§Ù„Ù…Ø³ØªØ¬Ø¯'}ØŸ'.tr(),
          style: GoogleFonts.cairo(color: textColor),
        ),
        actions: [
          TextButton(
            child: Text(
              'Ø¥Ù„ØºØ§Ø¡'.tr(),
              style: GoogleFonts.cairo(color: primaryColor),
            ),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: Text(
              'Ø­Ø°Ù'.tr(),
              style: GoogleFonts.cairo(color: Colors.red),
            ),
            onPressed: () async {
              try {
                if (type == 'news') {
                  await ref.read(firestoreServiceProvider).deleteDocument(type, id);
                  ref.refresh(recentNewsProvider);
                } else if (type == 'announcements') {
                  await ref.read(firestoreServiceProvider).deleteDocument(type, id);
                  ref.refresh(announcementNotifierProvider);
                } else if (type == 'mostajadat') {
                  await ref.read(firestoreServiceProvider).deleteDocument(type, id);
                  ref.refresh(mostajadatProvider);
                }
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      '${type == 'news' ? 'Ø§Ù„Ø®Ø¨Ø±' : type == 'announcements' ? 'Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†' : 'Ø§Ù„Ù…Ø³ØªØ¬Ø¯'} ØªÙ… Ø­Ø°ÙÙ‡ Ø¨Ù†Ø¬Ø§Ø­'.tr(),
                      style: GoogleFonts.cairo(),
                    ),
                    backgroundColor: accentColor,
                  ),
                );
              } catch (e) {
                print('Error deleting $type: $e');
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      'Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ Ø­Ø°Ù $type: $e'.tr(),
                      style: GoogleFonts.cairo(),
                    ),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
          ),
        ],
      ),
    );
  }
}

class NewsDialog extends ConsumerStatefulWidget {
  final News? news;
  final Color primaryColor;
  final Color accentColor;
  final Color backgroundColor;
  final Color cardColor;
  final Color textColor;

  NewsDialog({
    this.news,
    required this.primaryColor,
    required this.accentColor,
    required this.backgroundColor,
    required this.cardColor,
    required this.textColor,
  });

  @override
  _NewsDialogState createState() => _NewsDialogState();
}

class _NewsDialogState extends ConsumerState<NewsDialog> {
  late TextEditingController _titleController;
  late TextEditingController _summaryController;
  late TextEditingController _contentController;
  late TextEditingController _imageUrlController;
  File? _imageFile;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.news?.title ?? '');
    _summaryController = TextEditingController(text: widget.news?.summary ?? '');
    _contentController = TextEditingController(text: widget.news?.content ?? '');
    _imageUrlController = TextEditingController(text: widget.news?.imageUrl ?? '');
  }

  @override
  void dispose() {
    _titleController.dispose();
    _summaryController.dispose();
    _contentController.dispose();
    _imageUrlController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      backgroundColor: widget.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      title: Text(
        widget.news == null ? 'Ø¥Ø¶Ø§ÙØ© Ø®Ø¨Ø±'.tr() : 'ØªØ¹Ø¯ÙŠÙ„ Ø®Ø¨Ø±'.tr(),
        style: GoogleFonts.cairo(color: widget.textColor, fontWeight: FontWeight.bold),
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildTextField(
              controller: _titleController,
              labelText: 'Ø§Ù„Ø¹Ù†ÙˆØ§Ù†'.tr(),
              icon: Icons.title,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _summaryController,
              labelText: 'Ø§Ù„Ù…Ù„Ø®Øµ'.tr(),
              icon: Icons.short_text,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _contentController,
              labelText: 'Ø§Ù„Ù…Ø­ØªÙˆÙ‰'.tr(),
              icon: Icons.article,
              maxLines: 3,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _imageUrlController,
              labelText: 'Ø±Ø§Ø¨Ø· Ø§Ù„ØµÙˆØ±Ø©'.tr(),
              icon: Icons.image,
            ),
            SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _pickImage,
              icon: Icon(Icons.add_photo_alternate),
              label: Text('Ø§Ø®ØªÙŠØ§Ø± ØµÙˆØ±Ø©'.tr()),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: widget.accentColor,
              ),
            ),
            SizedBox(height: 16),
            if (_imageFile != null)
              Image.file(_imageFile!, height: 100, fit: BoxFit.cover)
            else if (widget.news != null && widget.news!.imageUrl != null)
              CachedNetworkImage(
                imageUrl: widget.news!.imageUrl!,
                height: 100,
                fit: BoxFit.cover,
                placeholder: (context, url) => CircularProgressIndicator(),
                errorWidget: (context, url, error) => Icon(Icons.error),
              ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Ø¥Ù„ØºØ§Ø¡'.tr(), style: GoogleFonts.cairo(color: widget.primaryColor)),
          onPressed: () => Navigator.of(context).pop(),
        ),
        ElevatedButton(
          child: Text(
            widget.news == null ? 'Ø¥Ø¶Ø§ÙØ©'.tr() : 'Ø­ÙØ¸'.tr(),
            style: GoogleFonts.cairo(),
          ),
          onPressed: () => _saveNews(context),
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: widget.accentColor,
          ),
        ),
      ],
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String labelText,
    required IconData icon,
    int maxLines = 1,
  }) {
    return TextField(
      controller: controller,
      maxLines: maxLines,
      decoration: InputDecoration(
        labelText: labelText,
        labelStyle: GoogleFonts.cairo(color: widget.textColor),
        prefixIcon: Icon(icon, color: widget.primaryColor),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: widget.primaryColor),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: widget.accentColor),
        ),
      ),
      style: GoogleFonts.cairo(color: widget.textColor),
    );
  }

  void _saveNews(BuildContext context) async {
    try {
      final news = News(
        id: widget.news?.id ?? DateTime.now().millisecondsSinceEpoch.toString(),
        title: _titleController.text,
        summary: _summaryController.text,
        content: _contentController.text,
        date: widget.news?.date ?? DateTime.now(),
        imageUrl: _imageUrlController.text,
        reactions: widget.news?.reactions ?? [],
        comments: widget.news?.comments ?? [],
      );

      if (widget.news == null) {
        await ref.read(firestoreServiceProvider).addDocument('news', news.toMap());
      } else {
        await ref.read(firestoreServiceProvider).updateDocument('news', news.id, news.toMap());
      }
      ref.refresh(recentNewsProvider);
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ… Ø­ÙØ¸ Ø§Ù„Ø®Ø¨Ø± Ø¨Ù†Ø¬Ø§Ø­'.tr(), style: GoogleFonts.cairo()),
          backgroundColor: widget.accentColor,
        ),
      );
    } catch (e) {
      print('Error saving news: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ Ø­ÙØ¸ Ø§Ù„Ø®Ø¨Ø±: $e'.tr(), style: GoogleFonts.cairo()),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}

class AnnouncementDialog extends ConsumerStatefulWidget {
  final Announcement? announcement;
  final Color primaryColor;
  final Color accentColor;
  final Color backgroundColor;
  final Color cardColor;
  final Color textColor;

  AnnouncementDialog({
    this.announcement,
    required this.primaryColor,
    required this.accentColor,
    required this.backgroundColor,
    required this.cardColor,
    required this.textColor,
  });

  @override
  _AnnouncementDialogState createState() => _AnnouncementDialogState();
}

class _AnnouncementDialogState extends ConsumerState<AnnouncementDialog> {
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  late TextEditingController _fullTextController;
  late TextEditingController _schoolNameController;
  late TextEditingController _schoolImageUrlController;
  late String _category;
  File? _imageFile;
  DateTime _date = DateTime.now();
  String? _officialDocumentUrl;
  String? _registrationLink;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.announcement?.title ?? '');
    _descriptionController = TextEditingController(text: widget.announcement?.description ?? '');
    _fullTextController = TextEditingController(text: widget.announcement?.fullText ?? '');
    _schoolNameController = TextEditingController(text: widget.announcement?.schoolName ?? '');
    _schoolImageUrlController = TextEditingController(text: widget.announcement?.schoolImageUrl ?? '');
    _category = widget.announcement?.category ?? 'other';
    _officialDocumentUrl = widget.announcement?.officialDocumentUrl;
    _registrationLink = widget.announcement?.registrationLink;
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _fullTextController.dispose();
    _schoolNameController.dispose();
    _schoolImageUrlController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  Future<void> _pickFile(String field) async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf', 'doc', 'docx'],
    );

    if (result != null) {
      setState(() {
        if (field == 'officialDocumentUrl') {
          _officialDocumentUrl = result.files.single.path;
        } else if (field == 'registrationLink') {
          _registrationLink = result.files.single.path;
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      backgroundColor: widget.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      title: Text(
        widget.announcement == null ? 'Ø¥Ø¶Ø§ÙØ© Ø¥Ø¹Ù„Ø§Ù†'.tr() : 'ØªØ¹Ø¯ÙŠÙ„ Ø¥Ø¹Ù„Ø§Ù†'.tr(),
        style: GoogleFonts.cairo(color: widget.textColor, fontWeight: FontWeight.bold),
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildTextField(
              controller: _titleController,
              labelText: 'Ø§Ù„Ø¹Ù†ÙˆØ§Ù†'.tr(),
              icon: Icons.title,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _descriptionController,
              labelText: 'Ø§Ù„ÙˆØµÙ'.tr(),
              icon: Icons.description,
              maxLines: 3,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _fullTextController,
              labelText: 'Ø§Ù„Ù†Øµ Ø§Ù„ÙƒØ§Ù…Ù„'.tr(),
              icon: Icons.article,
              maxLines: 5,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _schoolNameController,
              labelText: 'Ø§Ø³Ù… Ø§Ù„Ù…Ø¤Ø³Ø³Ø©'.tr(),
              icon: Icons.school,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _schoolImageUrlController,
              labelText: 'Ø±Ø§Ø¨Ø· ØµÙˆØ±Ø© Ø§Ù„Ù…Ø¤Ø³Ø³Ø©'.tr(),
              icon: Icons.image,
            ),
            SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _category,
              decoration: InputDecoration(
                labelText: 'Ø§Ù„ÙØ¦Ø©'.tr(),
                labelStyle: GoogleFonts.cairo(color: widget.textColor),
                prefixIcon: Icon(Icons.category, color: widget.primaryColor),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: widget.primaryColor),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: widget.accentColor),
                ),
              ),
              style: GoogleFonts.cairo(color: widget.textColor),
              items: ['bac', 'bac+2', 'bac+3', 'other'].map((category) {
                return DropdownMenuItem(
                  value: category,
                  child: Text(category),
                );
              }).toList(),
              onChanged: (value) {
                setState(() {
                  _category = value!;
                });
              },
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                final pickedDate = await showDatePicker(
                  context: context,
                  initialDate: _date,
                  firstDate: DateTime(2000),
                  lastDate: DateTime(2101),
                  builder: (BuildContext context, Widget? child) {
                    return Theme(
                      data: ThemeData.light().copyWith(
                        primaryColor: widget.primaryColor,
                        colorScheme: ColorScheme.light(primary: widget.primaryColor),
                        buttonTheme: ButtonThemeData(textTheme: ButtonTextTheme.primary),
                      ),
                      child: child!,
                    );
                  },
                );
                if (pickedDate != null && pickedDate != _date) {
                  setState(() {
                    _date = pickedDate;
                  });
                }
              },
              child: Text(
                'Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„ØªØ§Ø±ÙŠØ®: ${DateFormat('dd/MM/yyyy').format(_date)}',
                style: GoogleFonts.cairo(),
              ),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: widget.accentColor,
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => _pickFile('officialDocumentUrl'),
              child: Text(
                _officialDocumentUrl != null
                    ? 'ØªÙ… Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ù…Ù„Ù: ${path.basename(_officialDocumentUrl!)}'
                    : 'ØªØ­Ù…ÙŠÙ„ ÙˆØ«ÙŠÙ‚Ø© Ø±Ø³Ù…ÙŠØ© (Ø§Ø®ØªÙŠØ§Ø±ÙŠ)',
                style: GoogleFonts.cairo(),
              ),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.blue,
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => _pickFile('registrationLink'),
              child: Text(
                _registrationLink != null
                    ? 'ØªÙ… Ø§Ø®ØªÙŠØ§Ø± Ø§Ù„Ù…Ù„Ù: ${path.basename(_registrationLink!)}'
                    : 'ØªØ­Ù…ÙŠÙ„ Ø±Ø§Ø¨Ø· Ø§Ù„ØªØ³Ø¬ÙŠÙ„ (Ø§Ø®ØªÙŠØ§Ø±ÙŠ)',
                style: GoogleFonts.cairo(),
              ),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.green,
              ),
            ),
            SizedBox(height: 16),
            if (_imageFile != null)
              Image.file(_imageFile!, height: 100, fit: BoxFit.cover)
            else if (widget.announcement != null && widget.announcement!.schoolImageUrl != null)
              CachedNetworkImage(
                imageUrl: widget.announcement!.schoolImageUrl!,
                height: 100,
                fit: BoxFit.cover,
                placeholder: (context, url) => CircularProgressIndicator(),
                errorWidget: (context, url, error) => Icon(Icons.error),
              ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Ø¥Ù„ØºØ§Ø¡'.tr(), style: GoogleFonts.cairo(color: widget.primaryColor)),
          onPressed: () => Navigator.of(context).pop(),
        ),
        ElevatedButton(
          child: Text(
            widget.announcement == null ? 'Ø¥Ø¶Ø§ÙØ©'.tr() : 'Ø­ÙØ¸'.tr(),
            style: GoogleFonts.cairo(),
          ),
          onPressed: () => _saveAnnouncement(context),
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: widget.accentColor,
          ),
        ),
      ],
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String labelText,
    required IconData icon,
    int maxLines = 1,
  }) {
    return TextField(
      controller: controller,
      maxLines: maxLines,
      decoration: InputDecoration(
        labelText: labelText,
        labelStyle: GoogleFonts.cairo(color: widget.textColor),
        prefixIcon: Icon(icon, color: widget.primaryColor),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: widget.primaryColor),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: BorderSide(color: widget.accentColor),
        ),
      ),
      style: GoogleFonts.cairo(color: widget.textColor),
    );
  }

  void _saveAnnouncement(BuildContext context) async {
    try {
      if (_officialDocumentUrl != null && !_officialDocumentUrl!.startsWith('http')) {
        _officialDocumentUrl = await _uploadFile(_officialDocumentUrl!);
      }
      if (_registrationLink != null && !_registrationLink!.startsWith('http')) {
        _registrationLink = await _uploadFile(_registrationLink!);
      }

      final announcement = Announcement(
        id: widget.announcement?.id ?? DateTime.now().millisecondsSinceEpoch.toString(),
        title: _titleController.text,
        description: _descriptionController.text,
        category: _category,
        date: _date,
        schoolName: _schoolNameController.text,
        schoolImageUrl: _schoolImageUrlController.text,
        fullText: _fullTextController.text,
        officialDocumentUrl: _officialDocumentUrl,
        registrationLink: _registrationLink,
      );

      if (widget.announcement == null) {
        await ref.read(firestoreServiceProvider).addDocument('announcements', announcement.toMap());
      } else {
        await ref.read(firestoreServiceProvider).updateDocument('announcements', announcement.id, announcement.toMap());
      }
      ref.refresh(announcementNotifierProvider);
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ… Ø­ÙØ¸ Ø§Ù„Ø¥Ø¹Ù„Ø§Ù† Ø¨Ù†Ø¬Ø§Ø­'.tr(), style: GoogleFonts.cairo()),
          backgroundColor: widget.accentColor,
        ),
      );
    } catch (e) {
      print('Error saving announcement: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ Ø­ÙØ¸ Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†: $e'.tr(), style: GoogleFonts.cairo()),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<String?> _uploadFile(String filePath) async {
    try {
      final fileName = path.basename(filePath);
      final storageRef = FirebaseStorage.instance.ref().child('uploads/$fileName');
      final uploadTask = storageRef.putFile(File(filePath));
      final snapshot = await uploadTask.whenComplete(() {});
      return await snapshot.ref.getDownloadURL();
    } catch (e) {
      print('Error uploading file: $e');
      return null;
    }
  }
}


class AddMostajadatDialog extends ConsumerStatefulWidget {
  final WidgetRef ref;

  AddMostajadatDialog({
    required this.ref,
  });

  @override
  _AddMostajadatDialogState createState() => _AddMostajadatDialogState();
}

class _AddMostajadatDialogState extends ConsumerState<AddMostajadatDialog> {
  final _formKey = GlobalKey<FormState>();
  String _title = '';
  String _description = '';
  String _details = '';
  String _category = 'Ø§Ù„ÙˆØ¸Ø§Ø¦Ù';
  DateTime _date = DateTime.now();
  DateTime? _deadlineDate;
  File? _imageFile;
  String _type = 'Ø¨Ø¯ÙˆÙ†';
  File? _cardImageFile;
  String? _cardImagePath;

  final List<String> _categories = [
    'Ø§Ù„ÙˆØ¸Ø§Ø¦Ù',
    'Ø§Ù„ØªÙˆØ¬ÙŠÙ‡',
  ];

  final List<String> _types = [
    'Ø¨Ø¯ÙˆÙ†',
    'Ø¨Ø§Ùƒ',
    'Ø¨Ø§Ùƒ+1',
    'Ø¨Ø§Ùƒ+2',
    'Ø¨Ø§Ùƒ+3',
    'Ø¨Ø§Ùƒ+4',
    'Ø¨Ø§Ùƒ+5',
    'Ø£Ø®Ø±Ù‰',
  ];

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  Future<void> _pickCardImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _cardImageFile = File(pickedFile.path);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Ø¥Ø¶Ø§ÙØ© Ù…Ø³ØªØ¬Ø¯', style: GoogleFonts.cairo(fontWeight: FontWeight.bold)),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Ø§Ù„Ø¹Ù†ÙˆØ§Ù†',
                  labelStyle: GoogleFonts.cairo(color: Colors.black),
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                ),
                validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ù„Ø¹Ù†ÙˆØ§Ù†' : null,
                onSaved: (value) => _title = value!,
                style: GoogleFonts.cairo(color: Colors.black),
              ),
              SizedBox(height: 16),
              _imageFile != null
                  ? Image.file(_imageFile!, height: 100)
                  : ElevatedButton(
                      onPressed: _pickImage,
                      child: Text('Ø§Ø®ØªÙŠØ§Ø± ØµÙˆØ±Ø©', style: GoogleFonts.cairo()),
                      style: ElevatedButton.styleFrom(
                        foregroundColor: Colors.white,
                        backgroundColor: Colors.blue,
                      ),
                    ),
                    SizedBox(height: 16),
              _cardImageFile != null
                  ? ClipRRect( // Wrap the Image.file with ClipRRect
                      borderRadius: BorderRadius.circular(80.0), // Adjust radius as needed
                      child: Image.file(_cardImageFile!, height: 100),
                    )
                  : ElevatedButton(
                      onPressed: _pickCardImage,
                      child: Text('Ø§Ø®ØªÙŠØ§Ø± ØµÙˆØ±Ø© Ù„Ù„Ø¨Ø·Ø§Ù‚Ø©', style: GoogleFonts.cairo()),
                      style: ElevatedButton.styleFrom(
                        foregroundColor: Colors.white,
                        backgroundColor: Colors.blue,
                      ),
                    ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () async {
                  final pickedDate = await showDatePicker(
                    context: context,
                    initialDate: _date,
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2101),
                  );
                  if (pickedDate != null && pickedDate != _date) {
                    setState(() {
                      _date = pickedDate;
                    });
                  }
                },
                child: Text(
                  'Ø§Ø®ØªÙŠØ§Ø± ØªØ§Ø±ÙŠØ® Ø§Ù„Ù†Ø´Ø±: ${DateFormat('dd/MM/yyyy').format(_date)}',
                  style: GoogleFonts.cairo(),
                ),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: Colors.blue,
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () async {
                  final pickedDate = await showDatePicker(
                    context: context,
                    initialDate: _deadlineDate ?? DateTime.now(),
                    firstDate: DateTime.now(),
                    lastDate: DateTime(2101),
                  );
                  if (pickedDate != null && pickedDate != _deadlineDate) {
                    setState(() {
                      _deadlineDate = pickedDate;
                    });
                  }
                },
                child: Text(
                  _deadlineDate != null
                      ? 'Ø§Ø®ØªÙŠØ§Ø± ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡: ${DateFormat('dd/MM/yyyy').format(_deadlineDate!)}'
                      : 'Ø§Ø®ØªÙŠØ§Ø± ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡',
                  style: GoogleFonts.cairo(),
                ),
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: Colors.blue,
                ),
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _type,
                items: _types.map((type) {
                  return DropdownMenuItem(
                    value: type,
                    child: Text(type, style: GoogleFonts.cairo()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _type = value!;
                  });
                },
                decoration: InputDecoration(
                  labelText: 'Ø§Ù„Ù†ÙˆØ¹',
                  labelStyle: GoogleFonts.cairo(color: Colors.black),
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                ),
                style: GoogleFonts.cairo(color: Colors.black),
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<String>(
                value: _category,
                items: _categories.map((category) {
                  return DropdownMenuItem(
                    value: category,
                    child: Text(category, style: GoogleFonts.cairo()),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _category = value!;
                  });
                },
                decoration: InputDecoration(
                  labelText: 'Ø§Ù„ÙØ¦Ø©',
                  labelStyle: GoogleFonts.cairo(color: Colors.black),
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                ),
                style: GoogleFonts.cairo(color: Colors.black),
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Ø¥Ù„ØºØ§Ø¡', style: GoogleFonts.cairo(color: Colors.red)),
        ),
        ElevatedButton(
          onPressed: _submitForm,
          child: Text('Ø§Ù„ØªØ§Ù„ÙŠ', style: GoogleFonts.cairo()),
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue,
          ),
        ),
      ],
    );
  }

   void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      String imageUrl = ''; // Initialize imageUrl
      if (_imageFile != null) {
        imageUrl = await _uploadImage(_imageFile!); // Await the upload here
      }

      if (_cardImageFile != null) {
        _cardImagePath = await _uploadImage(_cardImageFile!);
      }

      Navigator.of(context).push(MaterialPageRoute(
        builder: (context) => MostajadatCustomizationScreen(
          title: _title,
          description: '',
          details: '',
          date: _date,
          deadlineDate: _deadlineDate,
          imageUrl: imageUrl, // Pass the uploaded image URL
          type: _type,
          cardImagePath: _cardImagePath,
        ),
      ));
    }
  }

  Future<String> _uploadImage(File imageFile) async {
    final storageRef = FirebaseStorage.instance.ref().child('mostajadat_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
    await storageRef.putFile(imageFile);
    return await storageRef.getDownloadURL();
  }
}
extension StringExtension on String {
  String capitalize() {
    return "${this[0].toUpperCase()}${this.substring(1)}";
  }
}

class AdminChatTab extends ConsumerStatefulWidget {
  @override
  _AdminChatTabState createState() => _AdminChatTabState();
}

class _AdminChatTabState extends ConsumerState<AdminChatTab> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  String? _selectedUserId;

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ù…Ø­Ø§Ø¯Ø«Ø© Ø§Ù„Ø£Ø¯Ù…Ù†', style: GoogleFonts.cairo()),
      ),
      drawer: _buildUserDrawer(),
      body: _selectedUserId != null
          ? _buildChatRoom()
          : _buildEmptyChat(),
    );
  }

  Widget _buildUserDrawer() {
    return Drawer(
      child: StreamBuilder<QuerySnapshot>(
        stream: _firestore.collection('users').snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}', style: GoogleFonts.cairo()));
          } else {
            final users = snapshot.data!.docs;
            return ListView.builder(
              itemCount: users.length,
              itemBuilder: (context, index) {
                final userData = users[index].data() as Map<String, dynamic>;
                final userId = users[index].id;
                return _buildUserTile(userData, userId);
              },
            );
          }
        },
      ),
    );
  }

  Widget _buildUserTile(Map<String, dynamic> userData, String userId) {
    return StreamBuilder<QuerySnapshot>(
      stream: _firestore
          .collection('support_messages')
          .where('userId', isEqualTo: userId)
          .where('isAdminMessage', isEqualTo: false)
          .where('read', isEqualTo: false)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return ListTile(
            leading: CircleAvatar(
              backgroundImage: userData['photoUrl'] != null
                  ? NetworkImage(userData['photoUrl'])
                  : null,
            ),
            title: Text(userData['name'] ?? 'Ù…Ø³ØªØ®Ø¯Ù… ØºÙŠØ± Ù…Ø¹Ø±ÙˆÙ', style: GoogleFonts.cairo()),
            subtitle: Text(userData['email'] ?? '', style: GoogleFonts.cairo()),
          );
        } else if (snapshot.hasError) {
          return ListTile(
            title: Text('Ø®Ø·Ø£ ÙÙŠ ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø±Ø³Ø§Ø¦Ù„', style: GoogleFonts.cairo()),
          );
        } else {
          final unreadCount = snapshot.data!.docs.length;
          return ListTile(
            onTap: () {
              setState(() {
                _selectedUserId = userId;
                Navigator.pop(context);
              });
            },
            leading: Stack(
              alignment: Alignment.topRight,
              children: [
                CircleAvatar(
                  backgroundImage: userData['photoUrl'] != null
                      ? NetworkImage(userData['photoUrl'])
                      : null,
                ),
                if (unreadCount > 0)
                  CircleAvatar(
                    radius: 8,
                    backgroundColor: Colors.red,
                    child: Text(
                      '$unreadCount',
                      style: GoogleFonts.cairo(color: Colors.white, fontSize: 10),
                    ),
                  ),
              ],
            ),
            title: Text(userData['name'] ?? 'Ù…Ø³ØªØ®Ø¯Ù… ØºÙŠØ± Ù…Ø¹Ø±ÙˆÙ', style: GoogleFonts.cairo()),
            subtitle: Text(userData['email'] ?? '', style: GoogleFonts.cairo()),
            trailing: Icon(Icons.arrow_forward_ios, size: 16),
          );
        }
      },
    );
  }

  Widget _buildChatRoom() {
    return StreamBuilder<QuerySnapshot>(
      stream: _firestore
          .collection('support_messages')
          .where('userId', isEqualTo: _selectedUserId)
          .orderBy('timestamp', descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}', style: GoogleFonts.cairo()));
        } else {
          final messages = snapshot.data!.docs;
          WidgetsBinding.instance.addPostFrameCallback((_) => _scrollToBottom());
          return Column(
            children: [
              Expanded(
                child: ListView.builder(
                  controller: _scrollController,
                  reverse: true,
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    final messageData = messages[index].data() as Map<String, dynamic>;
                    if (!messageData['isAdminMessage'] && !messageData['read']) {
                      _firestore
                          .collection('support_messages')
                          .doc(messages[index].id)
                          .update({'read': true});
                    }
                    return _buildMessageBubble(messageData);
                  },
                ),
              ),
              _buildMessageInput(),
            ],
          );
        }
      },
    );
  }

  Widget _buildMessageBubble(Map<String, dynamic> messageData) {
    final bool isAdmin = messageData['isAdminMessage'] ?? false;
    final Timestamp? timestamp = messageData['timestamp'] as Timestamp?;

    return Align(
      alignment: isAdmin ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: isAdmin ? Colors.blue[100] : Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.2),
              spreadRadius: 2,
              blurRadius: 5,
              offset: Offset(0, 3),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              messageData['content'] ?? '',
              style: GoogleFonts.cairo(
                color: Colors.black87,
                fontSize: 16,
              ),
            ),
            SizedBox(height: 4),
            Text(
              timestamp != null
                  ? DateFormat('HH:mm').format(timestamp.toDate())
                  : 'Ø§Ù„ÙˆÙ‚Øª ØºÙŠØ± Ù…ØªØ§Ø­',
              style: GoogleFonts.cairo(
                color: Colors.grey[600],
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMessageInput() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      color: Colors.white,
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              style: GoogleFonts.cairo(),
              decoration: InputDecoration(
                hintText: 'Ø§ÙƒØªØ¨ Ø±Ø³Ø§Ù„ØªÙƒ...',
                hintStyle: GoogleFonts.cairo(color: Colors.grey[600]),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(24),
                  borderSide: BorderSide.none,
                ),
                filled: true,
                fillColor: Colors.grey[200],
                contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              ),
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          SizedBox(width: 8),
          IconButton(
            icon: Icon(Icons.send, color: Colors.blue),
            onPressed: _sendMessage,
          ),
        ],
      ),
    );
  }

  void _sendMessage() async {
    if (_messageController.text.trim().isNotEmpty && _selectedUserId != null) {
      final newMessage = {
        'content': _messageController.text.trim(),
        'timestamp': FieldValue.serverTimestamp(),
        'isAdminMessage': true,
        'userId': _selectedUserId,
        'read': false,
      };

      try {
        await _firestore.collection('support_messages').add(newMessage);
        _messageController.clear();
        Future.delayed(Duration(milliseconds: 100), _scrollToBottom);
      } catch (e) {
        print('Error sending message: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('ÙØ´Ù„ Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø±Ø³Ø§Ù„Ø©. Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø§Ù„Ù…Ø­Ø§ÙˆÙ„Ø© Ù…Ø±Ø© Ø£Ø®Ø±Ù‰.', style: GoogleFonts.cairo())),
        );
      }
    }
  }

  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }

  Widget _buildEmptyChat() {
    return Center(
      child: Text('Ø§Ø®ØªØ± Ù…Ø³ØªØ®Ø¯Ù… Ù„Ø¨Ø¯Ø¡ Ø§Ù„Ø¯Ø±Ø¯Ø´Ø©', style: GoogleFonts.cairo(fontSize: 18)),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\admin_education_pathway_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:taleb_edu_platform/screens/guidance_screen.dart';
import 'dart:io';

import 'package:taleb_edu_platform/screens/university_customization_screen.dart';

class AdminEducationPathwayScreen extends ConsumerStatefulWidget {
  @override
  _AdminEducationPathwayScreenState createState() => _AdminEducationPathwayScreenState();
}

class _AdminEducationPathwayScreenState extends ConsumerState<AdminEducationPathwayScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  List<Widget> _pathwayStack = [];
  EducationPathway? _selectedPathway;
  Specialization? _selectedSpecialization;
  final TextEditingController _searchController = TextEditingController();
  List<University> _searchResults = [];
  bool _isSearching = false;

  final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
  final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
  final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ø¥Ø¯Ø§Ø±Ø© Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØ©', style: cairoBold.copyWith(fontSize: 18)),
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Theme.of(context).primaryColor,
          labelColor: Theme.of(context).primaryColor,
          unselectedLabelColor: Colors.grey,
          labelStyle: cairoBold.copyWith(fontSize: 14),
          tabs: [
            Tab(icon: Icon(Icons.school), text: 'Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª'),
            Tab(icon: Icon(Icons.business), text: 'Ø§Ù„Ù…Ø¤Ø³Ø³Ø§Øª'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildPathwaysTab(),
          _buildAllUniversitiesTab(),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _showAddDialog(context),
        icon: Icon(Icons.add),
        label: Text('Ø¥Ø¶Ø§ÙØ©', style: cairoSemiBold),
      ),
    );
  }

  Widget _buildPathwaysTab() {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

        return WillPopScope(
      onWillPop: () async {
        if (_pathwayStack.length > 1) {
          setState(() {
            _pathwayStack.removeLast();
            if (_pathwayStack.length == 1) {
              _selectedPathway = null;
              _selectedSpecialization = null;
            } else if (_pathwayStack.length == 2) {
              _selectedSpecialization = null;
            }
          });
          return false;
        }
        return true;
      },
      child: pathwaysAsyncValue.when(
        data: (pathways) {
          if (_pathwayStack.isEmpty) {
            _pathwayStack = [_buildPathwaysView(pathways)];
          }
          return Stack(
            children: [
              _pathwayStack.isNotEmpty ? _pathwayStack.last : Container(),
              if (_pathwayStack.length > 1)
                Positioned(
                  top: 16,
                  left: 16,
                  child: FloatingActionButton(
                    mini: true,
                    child: Icon(Icons.arrow_back),
                    onPressed: () {
                      setState(() {
                        _pathwayStack.removeLast();
                        if (_pathwayStack.length == 1) {
                          _selectedPathway = null;
                          _selectedSpecialization = null;
                        } else if (_pathwayStack.length == 2) {
                          _selectedSpecialization = null;
                        }
                      });
                    },
                  ),
                ),
            ],
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Ø®Ø·Ø£: $error')),
      ),
    );
  }

  Widget _buildPathwaysView(List<EducationPathway> pathways) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØ©'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.fromLTRB(16, 16, 16, 80),
              itemCount: pathways.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildPathwayCard(pathways[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathwayCard(EducationPathway pathway) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedPathway = pathway;
            _pathwayStack.add(_buildSpecializationsView(pathway));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                pathway.name,
                style: cairoSemiBold.copyWith(fontSize: 20, color: Colors.black87),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 8),
              Text(
                pathway.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.library_books, color: Colors.blue.shade600),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '${pathway.specializations.length} ØªØ®ØµØµØ§Øª',
                      style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.blue.shade600),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSpecializationsView(EducationPathway pathway) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('ØªØ®ØµØµØ§Øª ${pathway.name}'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.all(16),
              itemCount: pathway.specializations.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildSpecializationCard(pathway.specializations[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSpecializationCard(Specialization specialization) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedSpecialization = specialization;
            _pathwayStack.add(_buildUniversitiesView(specialization));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                specialization.name,
                style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
              ),
              SizedBox(height: 8),
              Text(
                specialization.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.school, color: Colors.green.shade600),
                  SizedBox(width: 8),
                  Text(
                    '${specialization.universities.length} Ø¬Ø§Ù…Ø¹Ø§Øª',
                    style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.green.shade600),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUniversitiesView(Specialization specialization) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª Ù„ØªØ®ØµØµ ${specialization.name}'),
        Expanded(
          child: AnimationLimiter(
            child: GridView.builder(
              padding: EdgeInsets.all(16),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.75,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: specialization.universities.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredGrid(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  columnCount: 2,
                  child: ScaleAnimation(
                    child: FadeInAnimation(
                      child: _buildUniversityCard(specialization.universities[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildUniversityCard(University university) {
  return Card(
    elevation: 2,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
    margin: EdgeInsets.only(bottom: 16),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Stack(
          children: [
            ClipRRect(
              borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
              child: university.imageUrl.isNotEmpty
                  ? Image.network(
                      university.imageUrl,
                      height: 150,
                      width: double.infinity,
                      fit: BoxFit.cover,
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Container(
                          height: 150,
                          child: Center(child: CircularProgressIndicator()),
                        );
                      },
                    )
                  : Container(
                      height: 150,
                      color: Colors.grey[300],
                      child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                    ),
            ),
            Positioned(
              top: 8,
              right: 8,
              child: Row(
                children: [
                  _buildIconButton(
                    icon: Icons.edit,
                    color: Colors.blue,
                    onPressed: () => _editUniversity(university),
                  ),
                  SizedBox(width: 8),
                  _buildIconButton(
                    icon: Icons.delete,
                    color: Colors.red,
                    onPressed: () => _deleteUniversity(university),
                  ),
                ],
              ),
            ),
          ],
        ),
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                university.name,
                style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            
            ],
          ),
        ),
      ],
    ),
  );
}

Widget _buildIconButton({
  required IconData icon,
  required Color color,
  required VoidCallback onPressed,
}) {
  return Container(
    decoration: BoxDecoration(
      color: Colors.white.withOpacity(0.7),
      shape: BoxShape.circle,
    ),
    child: IconButton(
      icon: Icon(icon, color: color),
      onPressed: onPressed,
      iconSize: 20,
      padding: EdgeInsets.all(4),
      constraints: BoxConstraints.tightFor(width: 30, height: 30),
    ),
  );
}


void _deleteUniversity(University university) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: cairoBold),
        content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ø£Ù†Ùƒ ØªØ±ÙŠØ¯ Ø­Ø°Ù Ù‡Ø°Ù‡ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©ØŸ', style: cairoRegular),
        actions: <Widget>[
          TextButton(
            child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: Text('Ø­Ø°Ù', style: cairoRegular.copyWith(color: Colors.red)),
            onPressed: () async {
              Navigator.of(context).pop();
              await ref.read(educationPathwayProvider.notifier).deleteUniversity(
                    _selectedPathway!.id,
                    _selectedSpecialization!.id,
                    university.id,
                  );
              setState(() {}); // Refresh the UI
            },
          ),
        ],
      );
    },
  );
}



  void _showUniversityDetails(University university) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => UniversityDetailsScreen(university: university),
      ),
    );
  }

  void _editUniversity(University university) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => UniversityCustomizationScreen(
          university: university,
          pathwayId: _selectedPathway!.id,
          specializationId: _selectedSpecialization!.id,
        ),
      ),
    );
  }



  Widget _buildAllUniversitiesTab() {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    return pathwaysAsyncValue.when(
      data: (pathways) {
        List<University> allUniversities = [];
        for (var pathway in pathways) {
          for (var specialization in pathway.specializations) {
            allUniversities.addAll(specialization.universities);
          }
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildSectionHeader('Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª'),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(30),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.3),
                      spreadRadius: 1,
                      blurRadius: 5,
                      offset: Offset(0, 3),
                    ),
                  ],
                ),
                child: TextField(
                  controller: _searchController,
                  style: cairoRegular.copyWith(fontSize: 16),
                  decoration: InputDecoration(
                    hintText: 'Ø§Ø¨Ø­Ø« Ø¹Ù† Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª...',
                    hintStyle: cairoRegular.copyWith(fontSize: 16, color: Colors.grey),
                    prefixIcon: Icon(Icons.search, color: Colors.blue),
                    border: InputBorder.none,
                    contentPadding: EdgeInsets.symmetric(vertical: 15, horizontal: 20),
                  ),
                  onChanged: (value) => _performSearch(value, allUniversities),
                ),
              ),
            ),
            Expanded(
              child: AnimationLimiter(
                child: GridView.builder(
                  padding: EdgeInsets.all(16),
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 0.75,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                  ),
                  itemCount: _isSearching ? _searchResults.length : allUniversities.length,
                  itemBuilder: (context, index) {
                    final university = _isSearching ? _searchResults[index] : allUniversities[index];
                    return AnimationConfiguration.staggeredGrid(
                      position: index,
                      duration: const Duration(milliseconds: 375),
                      columnCount: 2,
                      child: ScaleAnimation(
                        child: FadeInAnimation(
                          child: _buildUniversityCard(university),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        );
      },
      loading: () => Center(child: CircularProgressIndicator()),
      error: (error, stack) => Center(child: Text('Ø®Ø·Ø£: $error')),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Container(
      padding: EdgeInsets.fromLTRB(16, 24, 16, 8),
      alignment: Alignment.centerRight,
      child: Text(
        title,
        style: cairoBold.copyWith(
          fontSize: 24,
          color: Colors.blue.shade800,
          letterSpacing: 0.5,
        ),
        textAlign: TextAlign.right,
      ),
    );
  }

  void _performSearch(String query, List<University> allUniversities) {
    setState(() {
      if (query.isEmpty) {
        _searchResults = [];
        _isSearching = false;
      } else {
        _searchResults = allUniversities
            .where((university) =>
                university.name.toLowerCase().contains(query.toLowerCase()) ||
                university.description.toLowerCase().contains(query.toLowerCase()))
            .toList();
        _isSearching = true;
      }
    });
  }

  void _showAddDialog(BuildContext context) {
    if (_selectedSpecialization != null) {
      _showAddUniversityDialog(context);
    } else if (_selectedPathway != null) {
      _showAddSpecializationDialog(context);
    } else {
      _showAddPathwayDialog(context);
    }
  }

  void _showAddPathwayDialog(BuildContext context) {
    final _formKey = GlobalKey<FormState>();
    String _name = '';
    String _description = '';
    String _imageUrl = '';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Ø¥Ø¶Ø§ÙØ© Ù…Ø³Ø§Ø± Ø¬Ø¯ÙŠØ¯', style: cairoBold),
        content: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  decoration: InputDecoration(labelText: 'Ø§Ø³Ù… Ø§Ù„Ù…Ø³Ø§Ø±', labelStyle: cairoRegular),
                  validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„Ù…Ø³Ø§Ø±' : null,
                  onSaved: (value) => _name = value!,
                ),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Ø§Ù„ÙˆØµÙ', labelStyle: cairoRegular),
                  validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ ÙˆØµÙ Ø§Ù„Ù…Ø³Ø§Ø±' : null,
                  onSaved: (value) => _description = value!,
                ),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Ø±Ø§Ø¨Ø· Ø§Ù„ØµÙˆØ±Ø©', labelStyle: cairoRegular),
                  validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø±Ø§Ø¨Ø· Ø§Ù„ØµÙˆØ±Ø©' : null,
                  onSaved: (value) => _imageUrl = value!,
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(),
          ),
          ElevatedButton(
            child: Text('Ø¥Ø¶Ø§ÙØ©', style: cairoSemiBold),
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                _formKey.currentState!.save();
                final newPathway = EducationPathway(
                  id: DateTime.now().millisecondsSinceEpoch.toString(),
                  name: _name,
                  description: _description,
                  imageUrl: _imageUrl,
                  specializations: [],
                );
                ref.read(educationPathwayProvider.notifier).addPathway(newPathway);
                Navigator.of(context).pop();
              }
            },
          ),
        ],
      ),
    );
  }

  void _showAddSpecializationDialog(BuildContext context) {
    final _formKey = GlobalKey<FormState>();
    String _name = '';
    String _description = '';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Ø¥Ø¶Ø§ÙØ© ØªØ®ØµØµ Ø¬Ø¯ÙŠØ¯', style: cairoBold),
        content: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextFormField(
                  decoration: InputDecoration(labelText: 'Ø§Ø³Ù… Ø§Ù„ØªØ®ØµØµ', labelStyle: cairoRegular),
                  validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„ØªØ®ØµØµ' : null,
                  onSaved: (value) => _name = value!,
                ),
                TextFormField(
                  decoration: InputDecoration(labelText: 'Ø§Ù„ÙˆØµÙ', labelStyle: cairoRegular),
                  validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ ÙˆØµÙ Ø§Ù„ØªØ®ØµØµ' : null,
                  onSaved: (value) => _description = value!,
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(),
          ),
          ElevatedButton(
            child: Text('Ø¥Ø¶Ø§ÙØ©', style: cairoSemiBold),
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                _formKey.currentState!.save();
                final newSpecialization = Specialization(
                  id: DateTime.now().millisecondsSinceEpoch.toString(),
                  name: _name,
                  description: _description,
                  universities: [],
                );
                _selectedPathway!.specializations.add(newSpecialization);
                ref.read(educationPathwayProvider.notifier).updatePathway(_selectedPathway!);
                Navigator.of(context).pop();
              }
            },
          ),
        ],
      ),
    );
  }

  void _showAddUniversityDialog(BuildContext context) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => UniversityCustomizationScreen(
          pathwayId: _selectedPathway!.id,
          specializationId: _selectedSpecialization!.id,
        ),
      ),
    );
  }


  void _showEditUniversityDialog(University university) {
    final _formKey = GlobalKey<FormState>();
    String _name = university.name;
    String _description = university.description;
    String _website = university.website;
    String _imageUrl = university.imageUrl;
    File? _image;
    final picker = ImagePicker();

    Future getImage() async {
      final pickedFile = await picker.pickImage(source: ImageSource.gallery);
      if (pickedFile != null) {
        _image = File(pickedFile.path);
      }
    }

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('ØªØ¹Ø¯ÙŠÙ„ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©', style: cairoBold),
          content: Form(
            key: _formKey,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextFormField(
                    initialValue: _name,
                    decoration: InputDecoration(labelText: 'Ø§Ø³Ù… Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©', labelStyle: cairoRegular),
                    validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©' : null,
                    onSaved: (value) => _name = value!,
                  ),
                  TextFormField(
                    initialValue: _description,
                    decoration: InputDecoration(labelText: 'Ø§Ù„ÙˆØµÙ', labelStyle: cairoRegular),
                    validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ ÙˆØµÙ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©' : null,
                    onSaved: (value) => _description = value!,
                  ),
                  TextFormField(
                    initialValue: _website,
                    decoration: InputDecoration(labelText: 'Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ', labelStyle: cairoRegular),
                    validator: (value) => value!.isEmpty ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ' : null,
                    onSaved: (value) => _website = value!,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    child: Text('ØªØºÙŠÙŠØ± ØµÙˆØ±Ø© Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©', style: cairoRegular),
                    onPressed: () async {
                      await getImage();
                      setState(() {});
                    },
                  ),
                  if (_image != null)
                    Image.file(_image!, height: 100)
                  else if (_imageUrl.isNotEmpty)
                    Image.network(_imageUrl, height: 100)
                  else
                    Text('Ù„Ø§ ØªÙˆØ¬Ø¯ ØµÙˆØ±Ø©', style: cairoRegular),
                ],
              ),
            ),
          ),
          actions: [
            TextButton(
              child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
              onPressed: () => Navigator.of(context).pop(),
            ),
            ElevatedButton(
              child: Text('Ø­ÙØ¸ Ø§Ù„ØªØºÙŠÙŠØ±Ø§Øª', style: cairoSemiBold),
              onPressed: () async {
                if (_formKey.currentState!.validate()) {
                  _formKey.currentState!.save();
                  if (_image != null) {
                    final ref = FirebaseStorage.instance
                        .ref()
                        .child('university_images')
                        .child('${DateTime.now().toIso8601String()}.jpg');
                    await ref.putFile(_image!);
                    _imageUrl = await ref.getDownloadURL();
                  }
                  final updatedUniversity = University(
                    id: university.id,
                    name: _name,
                    description: _description,
                    website: _website,
                    imageUrl: _imageUrl,
                  );
                  int universityIndex = _selectedSpecialization!.universities.indexWhere((u) => u.id == university.id);
                  _selectedSpecialization!.universities[universityIndex] = updatedUniversity;
                  ref.read(educationPathwayProvider.notifier).updatePathway(_selectedPathway!);
                  Navigator.of(context).pop();
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  void _deletePathway(String pathwayId) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: cairoBold),
        content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ù…Ù† Ø­Ø°Ù Ù‡Ø°Ø§ Ø§Ù„Ù…Ø³Ø§Ø± Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØŸ', style: cairoRegular),
        actions: [
          TextButton(
            child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(false),
          ),
          TextButton(
            child: Text('Ø­Ø°Ù', style: cairoRegular.copyWith(color: Colors.red)),
            onPressed: () => Navigator.of(context).pop(true),
          ),
        ],
      ),
    );

    if (result == true) {
      ref.read(educationPathwayProvider.notifier).deletePathway(pathwayId);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ØªÙ… Ø­Ø°Ù Ø§Ù„Ù…Ø³Ø§Ø± Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠ', style: cairoRegular))
      );
    }
  }

  void _deleteSpecialization(String specializationId) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: cairoBold),
        content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ù…Ù† Ø­Ø°Ù Ù‡Ø°Ø§ Ø§Ù„ØªØ®ØµØµØŸ', style: cairoRegular),
        actions: [
          TextButton(
            child: Text('Ø¥Ù„ØºØ§Ø¡', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(false),
          ),
          TextButton(
            child: Text('Ø­Ø°Ù', style: cairoRegular.copyWith(color: Colors.red)),
            onPressed: () => Navigator.of(context).pop(true),
          ),
        ],
      ),
    );

    if (result == true) {
      _selectedPathway!.specializations.removeWhere((spec) => spec.id == specializationId);
      ref.read(educationPathwayProvider.notifier).updatePathway(_selectedPathway!);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ØªÙ… Ø­Ø°Ù Ø§Ù„ØªØ®ØµØµ', style: cairoRegular))
      );
    }
  }


}

extension ListExtension<T> on List<T> {
  T? get lastOrNull => isNotEmpty ? last : null;
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\admin_institution_screen.dart
import 'package:flutter/material.dart';
import 'package:taleb_edu_platform/models/institution_model.dart';
import 'package:taleb_edu_platform/services/institution_service.dart';
import 'package:taleb_edu_platform/screens/institution_details_screen.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:flutter_slidable/flutter_slidable.dart';

class AdminInstitutionScreen extends StatefulWidget {
  @override
  _AdminInstitutionScreenState createState() => _AdminInstitutionScreenState();
}

class _AdminInstitutionScreenState extends State<AdminInstitutionScreen> {
  final InstitutionService _institutionService = InstitutionService();
  List<Institution> _institutions = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadInstitutions();
  }

  Future<void> _loadInstitutions() async {
    setState(() => _isLoading = true);
    List<Institution> institutions = await _institutionService.getInstitutions();
    setState(() {
      _institutions = institutions;
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: Theme.of(context).textTheme.apply(
          bodyColor: Colors.black87,
          displayColor: Colors.black87,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: TextStyle(color: Colors.black87),
          hintStyle: TextStyle(color: Colors.black54),
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.grey[100],
        appBar: AppBar(
          title: Text(
            'Ø¥Ø¯Ø§Ø±Ø© Ø§Ù„Ù…Ø¤Ø³Ø³Ø§Øª',
            style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.white),
          ),
          centerTitle: true,
          elevation: 0,
          backgroundColor: Theme.of(context).primaryColor,
        ),
        body: SafeArea(
          child: _isLoading
              ? Center(child: CircularProgressIndicator())
              : AnimationLimiter(
                  child: ListView.builder(
                    padding: EdgeInsets.all(16),
                    itemCount: _institutions.length,
                    itemBuilder: (context, index) {
                      return AnimationConfiguration.staggeredList(
                        position: index,
                        duration: const Duration(milliseconds: 375),
                        child: SlideAnimation(
                          verticalOffset: 50.0,
                          child: FadeInAnimation(
                            child: InstitutionListItem(
                              institution: _institutions[index],
                              onDelete: () => _deleteInstitution(index),
                              onTap: () => _navigateToInstitutionDetails(_institutions[index]),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
        ),
        floatingActionButton: FloatingActionButton.extended(
          onPressed: _addNewInstitution,
          icon: Icon(Icons.add),
          label: Text('Ø¥Ø¶Ø§ÙØ© Ù…Ø¤Ø³Ø³Ø©'),
          backgroundColor: Theme.of(context).primaryColor,
        ),
        floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      ),
    );
  }

  void _navigateToInstitutionDetails(Institution institution) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => InstitutionDetailsScreen(institution: institution),
      ),
    ).then((value) => _loadInstitutions());
  }

  void _addNewInstitution() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
      ),
      builder: (BuildContext context) {
        return NewInstitutionForm(
          onInstitutionAdded: (Institution newInstitution) {
            setState(() {
              _institutions.add(newInstitution);
            });
          },
        );
      },
    );
  }

  Future<void> _deleteInstitution(int index) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.black87)),
          content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ù…Ù† Ø­Ø°Ù Ù‡Ø°Ù‡ Ø§Ù„Ù…Ø¤Ø³Ø³Ø©ØŸ', style: GoogleFonts.cairo(color: Colors.black87)),
          actions: <Widget>[
            TextButton(
              child: Text('Ø¥Ù„ØºØ§Ø¡', style: GoogleFonts.cairo(color: Colors.grey)),
              onPressed: () => Navigator.of(context).pop(false),
            ),
            ElevatedButton(
              child: Text('Ø­Ø°Ù', style: GoogleFonts.cairo(color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.error,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              onPressed: () => Navigator.of(context).pop(true),
            ),
          ],
        );
      },
    );

    if (result == true) {
      await _institutionService.deleteInstitution(_institutions[index].id);
      setState(() {
        _institutions.removeAt(index);
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ… Ø­Ø°Ù Ø§Ù„Ù…Ø¤Ø³Ø³Ø©', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
    }
  }
}

class InstitutionListItem extends StatelessWidget {
  final Institution institution;
  final VoidCallback onTap;
  final VoidCallback onDelete;

  const InstitutionListItem({
    Key? key,
    required this.institution,
    required this.onTap,
    required this.onDelete,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Slidable(
      actionPane: SlidableDrawerActionPane(),
      actionExtentRatio: 0.25,
      child: Card(
        margin: const EdgeInsets.only(bottom: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        elevation: 5,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  institution.name,
                  style: GoogleFonts.cairo(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).primaryColor,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  institution.description,
                  style: GoogleFonts.cairo(fontSize: 16, color: Colors.black87),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Chip(
                      label: Text(
                        '${institution.categories.length} ÙØ¦Ø§Øª',
                        style: GoogleFonts.cairo(color: Colors.white),
                      ),
                      backgroundColor: Theme.of(context).primaryColor,
                    ),
                    IconButton(
                      icon: Icon(Icons.arrow_forward_ios, color: Theme.of(context).primaryColor),
                      onPressed: onTap,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
      secondaryActions: <Widget>[
        IconSlideAction(
          caption: 'Ø­Ø°Ù',
          color: Colors.red,
          icon: Icons.delete,
          onTap: onDelete,
        ),
      ],
    );
  }
}

class NewInstitutionForm extends StatefulWidget {
  final Function(Institution) onInstitutionAdded;

  const NewInstitutionForm({Key? key, required this.onInstitutionAdded}) : super(key: key);

  @override
  _NewInstitutionFormState createState() => _NewInstitutionFormState();
}

class _NewInstitutionFormState extends State<NewInstitutionForm> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  String _description = '';
  final InstitutionService _institutionService = InstitutionService();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
        left: 16,
        right: 16,
        top: 16,
      ),
      child: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Ø¥Ø¶Ø§ÙØ© Ù…Ø¤Ø³Ø³Ø© Ø¬Ø¯ÙŠØ¯Ø©',
                style: GoogleFonts.cairo(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black87),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Ø§Ø³Ù… Ø§Ù„Ù…Ø¤Ø³Ø³Ø©',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
                style: TextStyle(color: Colors.black87),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„Ù…Ø¤Ø³Ø³Ø©';
                  }
                  return null;
                },
                onSaved: (value) => _name = value!,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'ÙˆØµÙ Ø§Ù„Ù…Ø¤Ø³Ø³Ø©',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
                style: TextStyle(color: Colors.black87),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ ÙˆØµÙ Ø§Ù„Ù…Ø¤Ø³Ø³Ø©';
                  }
                  return null;
                },
                onSaved: (value) => _description = value!,
                maxLines: 3,
              ),
              SizedBox(height: 24),
              ElevatedButton(
                child: Text('Ø¥Ø¶Ø§ÙØ© Ø§Ù„Ù…Ø¤Ø³Ø³Ø©', style: GoogleFonts.cairo(fontSize: 18, color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 16), backgroundColor: Theme.of(context).primaryColor,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
                onPressed: _submitForm,
              ),
              SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final newInstitution = Institution(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: _name,
        description: _description,
        categories: [],
      );
      await _institutionService.addInstitution(newInstitution);
      widget.onInstitutionAdded(newInstitution);
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ…Øª Ø¥Ø¶Ø§ÙØ© Ø§Ù„Ù…Ø¤Ø³Ø³Ø© Ø¨Ù†Ø¬Ø§Ø­', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\admin_notification.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/services/notification_service.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'notifications_screen.dart';

class AdminNotificationScreen extends ConsumerStatefulWidget {
  const AdminNotificationScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<AdminNotificationScreen> createState() => _AdminNotificationScreenState();
}

class _AdminNotificationScreenState extends ConsumerState<AdminNotificationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _bodyController = TextEditingController();
  bool _isSending = false;

  @override
  void initState() {
    super.initState();
    SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
      statusBarBrightness: Brightness.light,
      statusBarIconBrightness: Brightness.dark,
    ));
  }

  @override
  void dispose() {
    _titleController.dispose();
    _bodyController.dispose();
    super.dispose();
  }

  Future<void> _sendNotification() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSending = true);
      try {
        await ref.read(notificationServiceProvider).sendNotificationToAllUsers(
          title: _titleController.text,
          body: _bodyController.text,
        );
        
        // Save the notification locally
        final userNotification = UserNotification(
          title: _titleController.text,
          body: _bodyController.text,
          timestamp: DateTime.now(),
        );
        await _saveNotificationLocally(userNotification);
        
        _showSnackBar('ØªÙ… Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø± Ø¨Ù†Ø¬Ø§Ø­', Colors.green);
        _titleController.clear();
        _bodyController.clear();
      } catch (e) {
        _showSnackBar('ÙØ´Ù„ ÙÙŠ Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±: $e', Colors.red);
      } finally {
        setState(() => _isSending = false);
      }
    }
  }

  Future<void> _saveNotificationLocally(UserNotification userNotification) async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsJson = prefs.getStringList('notifications') ?? [];
    notificationsJson.insert(0, jsonEncode(userNotification.toJson()));
    await prefs.setStringList('notifications', notificationsJson);
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: GoogleFonts.cairo(fontWeight: FontWeight.w500),
        ),
        backgroundColor: color,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: GoogleFonts.cairoTextTheme(Theme.of(context).textTheme),
      ),
      child: Scaffold(
        backgroundColor: const Color(0xFFF5F5F5),
        appBar: AppBar(
          title: Text(
            'Ø¥Ø±Ø³Ø§Ù„ Ø¥Ø´Ø¹Ø§Ø±',
            style: GoogleFonts.cairo(
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          backgroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
          iconTheme: const IconThemeData(color: Colors.black),
          systemOverlayStyle: const SystemUiOverlayStyle(
            statusBarColor: Colors.transparent,
            statusBarIconBrightness: Brightness.dark,
            statusBarBrightness: Brightness.light,
          ),
        ),
        body: SafeArea(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(24.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Text(
                    'ØªÙØ§ØµÙŠÙ„ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±',
                    style: GoogleFonts.cairo(
                      fontSize: 28,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF333333),
                    ),
                  ),
                  const SizedBox(height: 32),
                  _buildTextField(
                    controller: _titleController,
                    hint: 'Ø¹Ù†ÙˆØ§Ù† Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±',
                    icon: Icons.title,
                    validator: (value) => value?.isEmpty ?? true ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ù„Ø¹Ù†ÙˆØ§Ù†' : null,
                  ),
                  const SizedBox(height: 24),
                  _buildTextField(
                    controller: _bodyController,
                    hint: 'Ù†Øµ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±',
                    icon: Icons.message,
                    maxLines: 4,
                    validator: (value) => value?.isEmpty ?? true ? 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ù†Øµ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±' : null,
                  ),
                  const SizedBox(height: 40),
                  _buildSendButton(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hint,
    required IconData icon,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          hintText: hint,
          hintStyle: GoogleFonts.cairo(color: Colors.grey[400]),
          prefixIcon: Icon(icon, color: const Color(0xFFFF5E62)),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(16),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Colors.white,
          contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
        ),
        maxLines: maxLines,
        validator: validator,
        style: GoogleFonts.cairo(color: const Color(0xFF333333)),
      ),
    );
  }

  Widget _buildSendButton() {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      height: 56,
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFFFF9966), Color(0xFFFF5E62)],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        borderRadius: BorderRadius.circular(28),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFFFF5E62).withOpacity(0.5),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ElevatedButton(
        onPressed: _isSending ? null : _sendNotification,
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(28)),
        ),
        child: _isSending
            ? const SizedBox(
                height: 24,
                width: 24,
                child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2),
              )
            : Text(
                'Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±',
                style: GoogleFonts.cairo(fontSize: 18, fontWeight: FontWeight.bold),
              ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\admin_support_chat.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';
import 'package:taleb_edu_platform/providers/support_provider.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/widgets/chat_bubble.dart';

class AdminSupportChat extends ConsumerStatefulWidget {
  final String ticketId;

  AdminSupportChat({required this.ticketId});

  @override
  _AdminSupportChatState createState() => _AdminSupportChatState();
}

class _AdminSupportChatState extends ConsumerState<AdminSupportChat> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _sendMessage() {
    if (_messageController.text.trim().isNotEmpty) {
      ref.read(supportProvider.notifier).sendMessageToTicket(
        widget.ticketId,
        TicketMessage(
          senderId: 'admin',
          content: _messageController.text.trim(),
          timestamp: DateTime.now(),
        ),
      );
      _messageController.clear();
      _scrollToBottom();
    }
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final supportTicketAsync = ref.watch(supportTicketProvider(widget.ticketId));

    return Scaffold(
      appBar: AppBar(
        title: Text('Support Chat'),
        backgroundColor: Color(0xFF2196F3),
        actions: [
          IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: () => supportTicketAsync.whenData((ticket) => _showTicketInfo(context, ticket)),
          ),
        ],
      ),
      body: supportTicketAsync.when(
        data: (supportTicket) => Column(
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Color(0xFFE3F2FD),
                      Color(0xFFBBDEFB),
                    ],
                  ),
                ),
                child: ListView.builder(
                  controller: _scrollController,
                  itemCount: supportTicket.messages.length,
                  itemBuilder: (context, index) {
                    final message = supportTicket.messages[index];
                    return ChatBubble(
                      message: message,
                      isUser: message.senderId != 'admin',
                    );
                  },
                ),
              ),
            ),
            _buildMessageInput(),
          ],
        ),
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }

  Widget _buildMessageInput() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            offset: Offset(0, -2),
            blurRadius: 4.0,
            color: Colors.black.withOpacity(0.1),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'Type your message...',
                hintStyle: GoogleFonts.poppins(color: Colors.grey),
                border: InputBorder.none,
                contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              ),
              style: GoogleFonts.poppins(),
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          SizedBox(width: 8),
          IconButton(
            icon: Icon(Icons.send, color: Color(0xFF2196F3)),
            onPressed: _sendMessage,
          ),
        ],
      ),
    );
  }

  void _showTicketInfo(BuildContext context, SupportTicket ticket) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Ticket Information', style: GoogleFonts.poppins(fontWeight: FontWeight.bold)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildInfoRow('Ticket ID', ticket.id),
            _buildInfoRow('User ID', ticket.userId),
            _buildInfoRow('Status', ticket.status.toString().split('.').last),
            _buildInfoRow('Created', DateFormat('yyyy-MM-dd HH:mm').format(ticket.createdAt)),
            _buildInfoRow('Updated', DateFormat('yyyy-MM-dd HH:mm').format(ticket.updatedAt)),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Close', style: GoogleFonts.poppins(color: Color(0xFF2196F3))),
          ),
          TextButton(
            onPressed: () => _showUpdateStatusDialog(context, ticket),
            child: Text('Update Status', style: GoogleFonts.poppins(color: Color(0xFF2196F3))),
          ),
        ],
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Text('$label: ', style: GoogleFonts.poppins(fontWeight: FontWeight.bold)),
          Text(value, style: GoogleFonts.poppins()),
        ],
      ),
    );
  }

  void _showUpdateStatusDialog(BuildContext context, SupportTicket ticket) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Update Ticket Status', style: GoogleFonts.poppins(fontWeight: FontWeight.bold)),
        content: DropdownButton<TicketStatus>(
          value: ticket.status,
          items: TicketStatus.values.map((status) {
            return DropdownMenuItem(
              value: status,
              child: Text(status.toString().split('.').last, style: GoogleFonts.poppins()),
            );
          }).toList(),
          onChanged: (newStatus) {
            if (newStatus != null) {
              ref.read(supportProvider.notifier).updateTicketStatus(ticket.id, newStatus);
              Navigator.of(context).pop();
            }
          },
        ),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\announcements_screen.dart
// File: lib/screens/announcements_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/providers/announcement_provider.dart';
import 'package:taleb_edu_platform/providers/data_providers.dart';
import 'package:taleb_edu_platform/widgets/announcement_card.dart';

class AnnouncementsScreen extends ConsumerStatefulWidget {
  @override
  _AnnouncementsScreenState createState() => _AnnouncementsScreenState();
}

class _AnnouncementsScreenState extends ConsumerState<AnnouncementsScreen> {
  String _selectedFilter = 'all';
  final List<String> _filters = ['all', 'bac', 'bac+2', 'bac+3', 'other'];

  @override
  Widget build(BuildContext context) {
    final announcements = ref.watch(announcementsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('announcements'.tr()),
        elevation: 0,
      ),
      body: Column(
        children: [
          _buildFilterChips(),
          Expanded(
            child: announcements.when(
              data: (announcements) {
                final filteredAnnouncements = _filterAnnouncements(announcements);
                return filteredAnnouncements.isEmpty
                    ? Center(child: Text('no_announcements'.tr()))
                    : ListView.builder(
                        itemCount: filteredAnnouncements.length,
                        itemBuilder: (context, index) {
                          return AnnouncementCard(announcement: filteredAnnouncements[index]);
                        },
                      );
              },
              loading: () => Center(child: CircularProgressIndicator()),
              error: (error, stackTrace) => Center(child: Text('error_loading_announcements'.tr())),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // TODO: Implement search functionality
        },
        child: Icon(Icons.search),
        tooltip: 'search_announcements'.tr(),
      ),
    );
  }

  Widget _buildFilterChips() {
    return Container(
      height: 60,
      child: ListView(
        scrollDirection: Axis.horizontal,
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        children: _filters.map((filter) {
          return Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: FilterChip(
              label: Text(filter.tr()),
              selected: _selectedFilter == filter,
              onSelected: (selected) {
                setState(() {
                  _selectedFilter = selected ? filter : 'all';
                });
              },
              selectedColor: Theme.of(context).primaryColor.withOpacity(0.2),
              checkmarkColor: Theme.of(context).primaryColor,
            ),
          );
        }).toList(),
      ),
    );
  }

  List<Announcement> _filterAnnouncements(List<Announcement> announcements) {
    if (_selectedFilter == 'all') {
      return announcements;
    }
    return announcements.where((announcement) => announcement.category == _selectedFilter).toList();
  }
}

class AnnouncementCard extends StatelessWidget {
  final Announcement announcement;

  const AnnouncementCard({Key? key, required this.announcement}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: () {
          // TODO: Navigate to announcement details
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  _buildCategoryChip(context),
                  Spacer(),
                  Text(
                    DateFormat('MMM d, yyyy').format(announcement.date),
                    style: GoogleFonts.poppins(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8),
              Text(
                announcement.title,
                style: GoogleFonts.poppins(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 4),
              Text(
                announcement.description,
                style: GoogleFonts.poppins(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.school, size: 16, color: Colors.grey[600]),
                  SizedBox(width: 4),
                  Text(
                    announcement.schoolName,
                    style: GoogleFonts.poppins(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCategoryChip(BuildContext context) {
    return Chip(
      label: Text(
        announcement.category.tr(),
        style: GoogleFonts.poppins(fontSize: 12),
      ),
      backgroundColor: _getCategoryColor(announcement.category),
    );
  }

  Color _getCategoryColor(String category) {
    switch (category) {
      case 'bac':
        return Colors.blue[100]!;
      case 'bac+2':
        return Colors.green[100]!;
      case 'bac+3':
        return Colors.orange[100]!;
      default:
        return Colors.grey[100]!;
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\announcement_details_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:url_launcher/url_launcher.dart';

class AnnouncementDetailsScreen extends StatelessWidget {
  final Announcement announcement;

  const AnnouncementDetailsScreen({Key? key, required this.announcement}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'ØªÙØ§ØµÙŠÙ„ Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†',
          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHeader(),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    announcement.title,
                    style: GoogleFonts.cairo(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    DateFormat('dd/MM/yyyy').format(announcement.date),
                    style: GoogleFonts.cairo(
                      fontSize: 16,
                      color: Colors.grey[600],
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    announcement.fullText,
                    style: GoogleFonts.cairo(fontSize: 16),
                  ),
                  SizedBox(height: 24),
                  _buildDownloadButton(),
                  SizedBox(height: 16),
                  _buildRegistrationButton(),
                  SizedBox(height: 24),
                  _buildApplicationDetails(),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      height: 200,
      width: double.infinity,
      decoration: BoxDecoration(
        image: DecorationImage(
          image: NetworkImage(announcement.schoolImageUrl ?? ''),
          fit: BoxFit.cover,
        ),
      ),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.transparent, Colors.black.withOpacity(0.7)],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                announcement.schoolName,
                style: GoogleFonts.cairo(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 8),
              _buildEducationLevelChip(announcement.category),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildEducationLevelChip(String category) {
    Color chipColor;
    String label;
    switch (category) {
      case 'bac':
        chipColor = Colors.green;
        label = 'Ø¨Ø§Ùƒ';
        break;
      case 'bac+2':
        chipColor = Colors.blue;
        label = 'Ø¨Ø§Ùƒ+2';
        break;
      default:
        chipColor = Colors.orange;
        label = category;
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: chipColor,
        borderRadius: BorderRadius.circular(20),
      ),
      child: Text(
        label,
        style: GoogleFonts.cairo(
          fontSize: 14,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _buildDownloadButton() {
    return ElevatedButton.icon(
      onPressed: () async {
        if (announcement.officialDocumentUrl != null) {
          if (await canLaunch(announcement.officialDocumentUrl!)) {
            await launch(announcement.officialDocumentUrl!);
          }
        }
      },
      icon: Icon(Icons.file_download),
      label: Text(
        'ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø¥Ø¹Ù„Ø§Ù† Ø§Ù„Ø±Ø³Ù…ÙŠ',
        style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
      ),
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.white, backgroundColor: Colors.blue,
        minimumSize: Size(double.infinity, 50),
      ),
    );
  }

  Widget _buildRegistrationButton() {
    return ElevatedButton.icon(
      onPressed: () async {
        if (announcement.registrationLink != null) {
          if (await canLaunch(announcement.registrationLink!)) {
            await launch(announcement.registrationLink!);
          }
        }
      },
      icon: Icon(Icons.app_registration),
      label: Text(
        'Ø§Ù„ØªØ³Ø¬ÙŠÙ„',
        style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
      ),
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.white, backgroundColor: Colors.green,
        minimumSize: Size(double.infinity, 50),
      ),
    );
  }

  Widget _buildApplicationDetails() {
    if (announcement.applicationDetails == null) {
      return SizedBox.shrink();
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'ØªÙØ§ØµÙŠÙ„ Ø§Ù„ØªÙ‚Ø¯ÙŠÙ…',
          style: GoogleFonts.cairo(
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        SizedBox(height: 8),
        ...announcement.applicationDetails!.entries.map((entry) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 8.0),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '${entry.key}:',
                  style: GoogleFonts.cairo(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    entry.value.toString(),
                    style: GoogleFonts.cairo(),
                  ),
                ),
              ],
            ),
          );
        }).toList(),
      ],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\auth_screen.dart


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\education_pathway_details_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:url_launcher/url_launcher.dart';

class EducationPathwayDetailsScreen extends ConsumerStatefulWidget {
  final EducationPathway pathway;

  const EducationPathwayDetailsScreen({Key? key, required this.pathway}) : super(key: key);

  @override
  _EducationPathwayDetailsScreenState createState() => _EducationPathwayDetailsScreenState();
}

class _EducationPathwayDetailsScreenState extends ConsumerState<EducationPathwayDetailsScreen> {
  List<Widget> _contentStack = [];
  Specialization? _selectedSpecialization;

  final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
  final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
  final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

  @override
  void initState() {
    super.initState();
    _contentStack = [_buildSpecializationsView()];
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        if (_contentStack.length > 1) {
          setState(() {
            _contentStack.removeLast();
            if (_contentStack.length == 1) {
              _selectedSpecialization = null;
            }
          });
          return false;
        }
        return true;
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(widget.pathway.name, style: cairoBold.copyWith(fontSize: 18)),
        ),
        body: Stack(
          children: [
            _contentStack.last,
            if (_contentStack.length > 1)
              Positioned(
                top: 16,
                left: 16,
                child: FloatingActionButton(
                  mini: true,
                  child: Icon(Icons.arrow_back),
                  onPressed: () {
                    setState(() {
                      _contentStack.removeLast();
                      if (_contentStack.length == 1) {
                        _selectedSpecialization = null;
                      }
                    });
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildSpecializationsView() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('ØªØ®ØµØµØ§Øª ${widget.pathway.name}'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.all(16),
              itemCount: widget.pathway.specializations.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildSpecializationCard(widget.pathway.specializations[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSpecializationCard(Specialization specialization) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedSpecialization = specialization;
            _contentStack.add(_buildUniversitiesView(specialization));
          });
        },
        borderRadius: BorderRadius.circular(15),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                specialization.name,
                style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
              ),
              SizedBox(height: 8),
              Text(
                specialization.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.school, color: Theme.of(context).primaryColor),
                  SizedBox(width: 8),
                  Text(
                    '${specialization.universities.length} Ø¬Ø§Ù…Ø¹Ø§Øª',
                    style: cairoSemiBold.copyWith(fontSize: 14, color: Theme.of(context).primaryColor),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUniversitiesView(Specialization specialization) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª Ù„ØªØ®ØµØµ ${specialization.name}'),
        Expanded(
          child: AnimationLimiter(
            child: GridView.builder(
              padding: EdgeInsets.all(16),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.75,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: specialization.universities.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredGrid(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  columnCount: 2,
                  child: ScaleAnimation(
                    child: FadeInAnimation(
                      child: _buildUniversityCard(specialization.universities[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildUniversityCard(University university) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      child: InkWell(
        onTap: () => _showUniversityDetails(university),
        borderRadius: BorderRadius.circular(15),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              flex: 3,
              child: ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
                child: university.imageUrl.isNotEmpty
                    ? Image.network(
                        university.imageUrl,
                        fit: BoxFit.cover,
                        loadingBuilder: (context, child, loadingProgress) {
                          if (loadingProgress == null) return child;
                          return Center(
                            child: CircularProgressIndicator(),
                          );
                        },
                      )
                    : Container(
                        color: Colors.grey[300],
                        child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                      ),
              ),
            ),
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      university.name,
                      style: cairoSemiBold.copyWith(fontSize: 16, color: Colors.black87),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Spacer(),
                    Row(
                      children: [
                        Icon(Icons.link, size: 16, color: Theme.of(context).primaryColor),
                        SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            university.website,
                            style: cairoRegular.copyWith(fontSize: 12, color: Theme.of(context).primaryColor),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Container(
      padding: EdgeInsets.fromLTRB(16, 24, 16, 8),
      alignment: Alignment.centerRight,
      child: Text(
        title,
        style: cairoBold.copyWith(
          fontSize: 24,
          color: Theme.of(context).primaryColor,
          letterSpacing: 0.5,
        ),
        textAlign: TextAlign.right,
      ),
    );
  }

  void _showUniversityDetails(University university) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(university.name, style: cairoBold),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (university.imageUrl.isNotEmpty)
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.network(
                    university.imageUrl,
                    height: 200,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
              SizedBox(height: 16),
              Text(university.description, style: cairoRegular),
              SizedBox(height: 16),
              Text('Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ:', style: cairoSemiBold),
              InkWell(
                onTap: () => _launchURL(university.website),
                child: Text(
                  university.website,
                  style: cairoRegular.copyWith(color: Colors.blue, decoration: TextDecoration.underline),
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            child: Text('Ø¥ØºÙ„Ø§Ù‚', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  void _launchURL(String url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Ù„Ø§ ÙŠÙ…ÙƒÙ† ÙØªØ­ Ø§Ù„Ø±Ø§Ø¨Ø·', style: cairoRegular)),
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\education_pathway_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:taleb_edu_platform/screens/specialization_details_screen.dart'; // Import for SpecializationDetailsScreen

class EducationPathwayScreen extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('Education Pathways', style: GoogleFonts.cairo(fontWeight: FontWeight.bold)),
      ),
      body: pathwaysAsyncValue.when(
        data: (pathways) => _buildPathwayList(context, pathways),
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }

  Widget _buildPathwayList(BuildContext context, List<EducationPathway> pathways) {
    return AnimationLimiter(
      child: ListView.builder(
        padding: EdgeInsets.all(16),
        itemCount: pathways.length,
        itemBuilder: (context, index) {
          return AnimationConfiguration.staggeredList(
            position: index,
            duration: const Duration(milliseconds: 375),
            child: SlideAnimation(
              verticalOffset: 50.0,
              child: FadeInAnimation(
                child: _buildPathwayCard(context, pathways[index]),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildPathwayCard(BuildContext context, EducationPathway pathway) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => SpecializationDetailsScreen(
                pathwayId: pathway.id, 
                specialization: pathway.specializations.first, // Assuming you want to show the first specialization
              ),
            ),
          );
        },
        borderRadius: BorderRadius.circular(15),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              flex: 3,
              child: ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
                child: pathway.imageUrl.isNotEmpty
                    ? Image.network(
                        pathway.imageUrl,
                        fit: BoxFit.cover,
                        loadingBuilder: (context, child, loadingProgress) {
                          if (loadingProgress == null) return child;
                          return Center(child: CircularProgressIndicator());
                        },
                      )
                    : Container(
                        color: Colors.grey[300],
                        child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                      ),
              ),
            ),
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      pathway.name,
                      style: GoogleFonts.cairo(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.black87,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Spacer(),
                    // Show number of specializations
                    Row(
                      children: [
                        Icon(Icons.list, size: 16, color: Theme.of(context).primaryColor),
                        SizedBox(width: 4),
                        Text(
                          '${pathway.specializations.length} Specialties',
                          style: GoogleFonts.cairo(
                            fontSize: 12,
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\error_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class ErrorScreen extends StatelessWidget {
  final String error;

  const ErrorScreen({Key? key, required this.error}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 64, color: Colors.red),
            SizedBox(height: 16),
            Text(
              'Oops! Something went wrong',
              style: GoogleFonts.poppins(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              error,
              style: GoogleFonts.poppins(fontSize: 16),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pushReplacementNamed('/'),
              child: Text('Go to Home'),
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\faculty_details_screen.dart
import 'package:flutter/material.dart';
   import 'package:taleb_edu_platform/models/institution_model.dart';

   class FacultyDetailsScreen extends StatelessWidget {
     final String institutionId;
     final String categoryId;
     final Faculty faculty;

     FacultyDetailsScreen({
       required this.institutionId,
       required this.categoryId,
       required this.faculty,
     });

     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text(faculty.name)),
         body: Padding(
           padding: const EdgeInsets.all(16.0),
           child: Column(
             crossAxisAlignment: CrossAxisAlignment.start,
             children: [
               Text(
                 'Name: ${faculty.name}',
                 style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
               ),
               SizedBox(height: 16),
               Text(
                 'Description: ${faculty.description}',
                 style: TextStyle(fontSize: 16),
               ),
             ],
           ),
         ),
       );
     }
   }


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\guidance_item_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/guidance_category_model.dart';

class GuidanceItemScreen extends StatelessWidget {
  final GuidanceItem item;

  const GuidanceItemScreen({Key? key, required this.item}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          item.name,
          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (item.imageUrl != null)
                Image.network(
                  item.imageUrl!,
                  height: 200,
                  width: double.infinity,
                  fit: BoxFit.cover,
                ),
              SizedBox(height: 16),
              Text(
                item.name,
                style: GoogleFonts.cairo(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 8),
              Text(
                item.description,
                style: GoogleFonts.cairo(fontSize: 16),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\guidance_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:taleb_edu_platform/screens/web_view_screen.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'dart:io';


class GuidanceScreen extends ConsumerStatefulWidget {
  @override
  _GuidanceScreenState createState() => _GuidanceScreenState();
}

class _GuidanceScreenState extends ConsumerState<GuidanceScreen> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  List<Widget> _pathwayStack = [];
  EducationPathway? _selectedPathway;
  Specialization? _selectedSpecialization;
  final TextEditingController _searchController = TextEditingController();
  List<University> _searchResults = [];
  bool _isSearching = false;
  
  final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
  final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
  final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ø§Ù„ØªÙˆØ¬ÙŠÙ‡ Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠ', style: cairoBold.copyWith(fontSize: 18)),
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Theme.of(context).primaryColor,
          labelColor: Theme.of(context).primaryColor,
          unselectedLabelColor: Colors.grey,
          labelStyle: cairoBold.copyWith(fontSize: 14),
          tabs: [
            Tab(icon: Icon(Icons.school), text: 'Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª'),
            Tab(icon: Icon(Icons.business), text: 'Ø§Ù„Ù…Ø¤Ø³Ø³Ø§Øª'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildPathwaysTab(),
          _buildAllUniversitiesTab(),
        ],
      ),
    );
  }

  Widget _buildPathwaysTab() {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    return WillPopScope(
      onWillPop: () async {
        if (_pathwayStack.length > 1) {
          setState(() {
            _pathwayStack.removeLast();
            if (_pathwayStack.length == 1) {
              _selectedPathway = null;
              _selectedSpecialization = null;
            } else if (_pathwayStack.length == 2) {
              _selectedSpecialization = null;
            }
          });
          return false;
        }
        return true;
      },
      child: pathwaysAsyncValue.when(
        data: (pathways) {
          if (_pathwayStack.isEmpty) {
            _pathwayStack = [_buildPathwaysView(pathways)];
          }
          return Stack(
            children: [
              _pathwayStack.lastOrNull ?? Container(),
              if (_pathwayStack.length > 1)
                Positioned(
                  top: 16,
                  left: 16,
                  child: FloatingActionButton(
                    mini: true,
                    child: Icon(Icons.arrow_back),
                    onPressed: () {
                      setState(() {
                        _pathwayStack.removeLast();
                        if (_pathwayStack.length == 1) {
                          _selectedPathway = null;
                          _selectedSpecialization = null;
                        } else if (_pathwayStack.length == 2) {
                          _selectedSpecialization = null;
                        }
                      });
                    },
                  ),
                ),
            ],
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Ø®Ø·Ø£: $error')),
      ),
    );
  }

  Widget _buildPathwaysView(List<EducationPathway> pathways) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØ©'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.fromLTRB(16, 16, 16, 80),
              itemCount: pathways.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildPathwayCard(pathways[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathwayCard(EducationPathway pathway) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedPathway = pathway;
            _pathwayStack.add(_buildSpecializationsView(pathway));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                pathway.name,
                style: cairoSemiBold.copyWith(fontSize: 20, color: Colors.black87),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 8),
              Text(
                pathway.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.library_books, color: Colors.blue.shade600),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '${pathway.specializations.length} ØªØ®ØµØµØ§Øª',
                      style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.blue.shade600),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSpecializationsView(EducationPathway pathway) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    children: [
      _buildSectionHeader('ØªØ®ØµØµØ§Øª ${pathway.name}'),
      Expanded(
        child: AnimationLimiter(
          child: ListView.builder(
            padding: EdgeInsets.all(16),
            itemCount: pathway.specializations.length,
            itemBuilder: (context, index) {
              final specialization = pathway.specializations[index];
              return AnimationConfiguration.staggeredList(
                position: index,
                duration: const Duration(milliseconds: 375),
                child: SlideAnimation(
                  verticalOffset: 50.0,
                  child: FadeInAnimation(
                    child: Column(
                      children: [
                        _buildSpecializationCard(specialization),
                        SizedBox(height: 16),
                        // Display universities for this specialization
                        _buildUniversitiesSection(specialization),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    ],
  );
}
Widget _buildUniversitiesSection(Specialization specialization) {
  return Card(
    elevation: 2,
    margin: EdgeInsets.symmetric(vertical: 16, horizontal: 8),
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    child: Padding(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª Ø§Ù„ØªÙŠ ØªÙ‚Ø¯Ù… ${specialization.name}',
            style: GoogleFonts.cairo(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.blue.shade800,
            ),
          ),
          SizedBox(height: 16),
          AnimationLimiter(
            child: GridView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
                crossAxisSpacing: 12,
                mainAxisSpacing: 12,
              ),
              itemCount: specialization.universities.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredGrid(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  columnCount: 2,
                  child: ScaleAnimation(
                    child: FadeInAnimation(
                      child: _buildEnhancedUniversityCard(specialization.universities[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    ),
  );
}

Widget _buildEnhancedUniversityCard(University university) {
  return Card(
    elevation: 0,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
    color: Colors.white,
    child: InkWell(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => UniversityDetailsScreen(university: university),
          ),
        );
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Expanded(
            flex: 3,
            child: ClipRRect(
              borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
              child: university.imageUrl.isNotEmpty
                  ? Image.network(
                      university.imageUrl,
                      fit: BoxFit.cover,
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Center(
                          child: CircularProgressIndicator(),
                        );
                      },
                    )
                  : Container(
                      color: Colors.grey[300],
                      child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                    ),
            ),
          ),
          Expanded(
            flex: 2,
            child: Padding(
              padding: const EdgeInsets.all(12.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    university.name,
                    style: cairoSemiBold.copyWith(fontSize: 16, color: Colors.black87),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  Spacer(),
                  Row(
                    children: [
                      Icon(Icons.link, size: 16, color: Colors.blue.shade600),
                      SizedBox(width: 4),
                      Expanded(
                        child: Text(
                          university.website,
                          style: cairoRegular.copyWith(fontSize: 12, color: Colors.blue.shade600),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    ),
  );
}

  Widget _buildSpecializationCard(Specialization specialization) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedSpecialization = specialization;
            _pathwayStack.add(_buildUniversitiesView(specialization));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                specialization.name,
                style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
              ),
              SizedBox(height: 8),
              Text(
                specialization.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.school, color: Colors.green.shade600),
                  SizedBox(width: 8),
                  Text(
                    '${specialization.universities.length} Ø¬Ø§Ù…Ø¹Ø§Øª',
                    style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.green.shade600),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFlexibleHeader(String title) {
    return Container(
      padding: EdgeInsets.fromLTRB(60, 24, 16, 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            child: Text(
              title,
              style: cairoBold.copyWith(
                fontSize: 20,
                color: Colors.blue.shade800,
                letterSpacing: 0.5,
              ),
              textAlign: TextAlign.right,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUniversitiesView(Specialization specialization) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildFlexibleHeader('Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª Ù„ØªØ®ØµØµ ${specialization.name}'),
        Expanded(
          child: AnimationLimiter(
            child: GridView.builder(
              padding: EdgeInsets.all(16),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.75,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: specialization.universities.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredGrid(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  columnCount: 2,
                  child: ScaleAnimation(
                    child: FadeInAnimation(
                      child: _buildUniversityCard(specialization.universities[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildUniversityCard(University university) {
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => UniversityDetailsScreen(university: university),
            ),
          );
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              flex: 3,
              child: ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
                child: university.imageUrl.isNotEmpty
                    ? Image.network(
                        university.imageUrl,
                        fit: BoxFit.cover,
                        loadingBuilder: (context, child, loadingProgress) {
                          if (loadingProgress == null) return child;
                          return Center(
                            child: CircularProgressIndicator(),
                          );
                        },
                      )
                    : Container(
                        color: Colors.grey[300],
                        child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                      ),
              ),
            ),
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      university.name,
                      style: cairoSemiBold.copyWith(fontSize: 16, color: Colors.black87),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Spacer(),
                    Row(
                      children: [
                        Icon(Icons.link, size: 16, color: Colors.blue.shade600),
                        SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            university.website,
                            style: cairoRegular.copyWith(fontSize: 12, color: Colors.blue.shade600),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAllUniversitiesTab() {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    return pathwaysAsyncValue.when(
      data: (pathways) {
        List<University> allUniversities = [];
        for (var pathway in pathways) {
          for (var specialization in pathway.specializations) {
            allUniversities.addAll(specialization.universities);
          }
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildSectionHeader('Ø¬Ù…ÙŠØ¹ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª'),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(30),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.grey.withOpacity(0.3),
                      spreadRadius: 1,
                      blurRadius: 5,
                      offset: Offset(0, 3),
                    ),
                  ],
                ),
                child: TextField(
  controller: _searchController,
  style: cairoRegular.copyWith(fontSize: 16, color: Colors.black), // Changed text color to black
  decoration: InputDecoration(
    hintText: 'Ø§Ø¨Ø­Ø« Ø¹Ù† Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª...',
    hintStyle: cairoRegular.copyWith(fontSize: 16, color: Colors.grey),
    prefixIcon: Icon(Icons.search, color: Colors.blue),
    border: InputBorder.none,
    contentPadding: EdgeInsets.symmetric(vertical: 15, horizontal: 20),
  ),
  onChanged: (value) => _performSearch(value, allUniversities),
),
              ),
            ),
            Expanded(
              child: AnimationLimiter(
                child: GridView.builder(
                  padding: EdgeInsets.all(16),
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 0.75,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                  ),
                  itemCount: _isSearching ? _searchResults.length : allUniversities.length,
                  itemBuilder: (context, index) {
                    final university = _isSearching ? _searchResults[index] : allUniversities[index];
                    return AnimationConfiguration.staggeredGrid(
                      position: index,
                      duration: const Duration(milliseconds: 375),
                      columnCount: 2,
                      child: ScaleAnimation(
                        child: FadeInAnimation(
                          child: _buildUniversityCard(university),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        );
      },
      loading: () => Center(child: CircularProgressIndicator()),
      error: (error, stack) => Center(child: Text('Ø®Ø·Ø£: $error')),
    );
  }

  Widget _buildSectionHeader(String title) {
    return Container(
      padding: EdgeInsets.fromLTRB(16, 24, 16, 8),
      alignment: Alignment.centerRight,
      child: Text(
        title,
        style: cairoBold.copyWith(
          fontSize: 24,
          color: Colors.blue.shade800,
          letterSpacing: 0.5,
        ),
        textAlign: TextAlign.right,
      ),
    );
  }

  void _performSearch(String query, List<University> allUniversities) {
    setState(() {
      if (query.isEmpty) {
        _searchResults = [];
        _isSearching = false;
      } else {
        _searchResults = allUniversities
            .where((university) =>
                university.name.toLowerCase().contains(query.toLowerCase()) ||
                university.description.toLowerCase().contains(query.toLowerCase()))
            .toList();
        _isSearching = true;
      }
    });
  }
}

extension ListExtension<T> on List<T> {
  T? get lastOrNull => isNotEmpty ? last : null;
}


class UniversityDetailsScreen extends StatefulWidget {
  final University university;

  const UniversityDetailsScreen({Key? key, required this.university}) : super(key: key);

  @override
  _UniversityDetailsScreenState createState() => _UniversityDetailsScreenState();
}

class _UniversityDetailsScreenState extends State<UniversityDetailsScreen> {
  late ScrollController _scrollController;
  bool _showBackToTopButton = false;

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController()
      ..addListener(() {
        setState(() {
          if (_scrollController.offset >= 400) {
            _showBackToTopButton = true;
          } else {
            _showBackToTopButton = false;
          }
        });
      });
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _scrollToTop() {
    _scrollController.animateTo(0,
        duration: Duration(milliseconds: 500), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      body: CustomScrollView(
        controller: _scrollController,
        slivers: [
          _buildSliverAppBar(context),
          SliverToBoxAdapter(
            child: AnimationLimiter(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: AnimationConfiguration.toStaggeredList(
                  duration: const Duration(milliseconds: 375),
                  childAnimationBuilder: (widget) => SlideAnimation(
                    horizontalOffset: 50.0,
                    child: FadeInAnimation(
                      child: widget,
                    ),
                  ),
                  children: [
                    _buildNameCard(),
                    _buildWebsiteCard(context),
                    _buildDescriptionCard(),
                    _buildContentSection(),
                    _buildDownloadCard(context),
                    _buildShareCard(context),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: _showBackToTopButton
          ? FloatingActionButton(
              onPressed: _scrollToTop,
              child: Icon(Icons.arrow_upward),
              tooltip: 'Ø§Ù„Ø¹ÙˆØ¯Ø© Ø¥Ù„Ù‰ Ø§Ù„Ø£Ø¹Ù„Ù‰',
            )
          : null,
    );
  }

  Widget _buildSliverAppBar(BuildContext context) {
    return SliverAppBar(
      expandedHeight: 200.0,
      floating: false,
      pinned: true,
      backgroundColor: Colors.transparent,
      flexibleSpace: LayoutBuilder(
        builder: (BuildContext context, BoxConstraints constraints) {
          final top = constraints.biggest.height;
          final expandRatio = (top - kToolbarHeight) / (200.0 - kToolbarHeight);
          final isCollapsed = expandRatio <= 0.5;

          return Stack(
            fit: StackFit.expand,
            children: [
              AnimatedOpacity(
                opacity: isCollapsed ? 0.0 : 1.0,
                duration: Duration(milliseconds: 300),
                child: Hero(
                  tag: 'university-image-${widget.university.id}',
                  child: widget.university.imageUrl.isNotEmpty
                      ? Image.network(
                          widget.university.imageUrl,
                          fit: BoxFit.cover,
                        )
                      : Container(
                          color: Colors.grey[300],
                          child: Icon(Icons.school, size: 80, color: Colors.white),
                        ),
                ),
              ),
              Positioned(
                left: 16,
                top: MediaQuery.of(context).padding.top + 8,
                child: AnimatedContainer(
                  duration: Duration(milliseconds: 300),
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: isCollapsed ? Color(0xFFFFFFFF) : Colors.transparent,
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Row(
                    children: [
                    ],
                  ),
                ),
              ),
            ],
          );
        },
      ),
      leading: Container(
        margin: EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: Colors.grey.withOpacity(0.5),
          shape: BoxShape.circle,
        ),
        child: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
    );
  }

  Widget _buildNameCard() {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.all(16),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Text(
          widget.university.name,
          style: GoogleFonts.cairo(
            fontSize: 28,
            fontWeight: FontWeight.bold,
            color: Colors.black87,
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }

  Widget _buildWebsiteCard(BuildContext context) {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _launchURL(context, widget.university.website),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.language, color: Colors.blue),
              SizedBox(width: 8),
              Text(
                'Ø²ÙŠØ§Ø±Ø© Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ',
                style: GoogleFonts.cairo(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDescriptionCard() {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(height: 8),
            _buildFormattedDescription(),
          ],
        ),
      ),
    );
  }

  Widget _buildFormattedDescription() {
    final List<Widget> descriptionWidgets = [];
    final paragraphs = widget.university.description.split('\n');

    for (final paragraph in paragraphs) {
      if (paragraph.trim().startsWith('-')) {
        final endIndex = paragraph.indexOf('.', paragraph.indexOf('-'));
        if (endIndex != -1) {
          final bulletPoint = paragraph.substring(0, endIndex + 1);
          descriptionWidgets.add(
            Container(
              margin: EdgeInsets.only(bottom: 8),
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(8),
              ),
              child: _buildHighlightedText(bulletPoint),
            ),
          );
          if (endIndex + 1 < paragraph.length) {
            descriptionWidgets.add(_buildHighlightedText(paragraph.substring(endIndex + 1)));
          }
        } else {
          descriptionWidgets.add(
            Container(
              margin: EdgeInsets.only(bottom: 8),
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(8),
              ),
              child: _buildHighlightedText(paragraph),
            ),
          );
        }
      } else {
        descriptionWidgets.add(_buildHighlightedText(paragraph));
      }
      descriptionWidgets.add(SizedBox(height: 8));
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: descriptionWidgets,
    );
  }

  Widget _buildHighlightedText(String text) {
    final List<InlineSpan> spans = [];
    final RegExp regExp = RegExp(r'\(([^)]+)\)');
    int lastMatchEnd = 0;

    for (final Match match in regExp.allMatches(text)) {
      if (match.start > lastMatchEnd) {
        spans.add(TextSpan(text: text.substring(lastMatchEnd, match.start)));
      }

      spans.add(
        WidgetSpan(
          child: Container(
            padding: EdgeInsets.symmetric(horizontal: 4, vertical: 2),
            decoration: BoxDecoration(
              color: Colors.lightGreen.withOpacity(0.3),
              borderRadius: BorderRadius.circular(4),
            ),
            child: Text(
              match.group(1)!,
              style: TextStyle(
                fontSize: 16,
                color: Colors.black,
                backgroundColor: Colors.transparent,
              ),
            ),
          ),
        ),
      );

      lastMatchEnd = match.end;
    }

    if (lastMatchEnd < text.length) {
      spans.add(TextSpan(text: text.substring(lastMatchEnd)));
    }

    return RichText(
      text: TextSpan(
        style: TextStyle(fontSize: 16, color: Colors.black),
        children: spans,
      ),
    );
  }

  Widget _buildContentSection() {
    return SizedBox.shrink();
  }

  Widget _buildDownloadCard(BuildContext context) {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _downloadPdf(context),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.download, color: Theme.of(context).primaryColor),
              SizedBox(width: 8),
              Text(
                'ØªØ­Ù…ÙŠÙ„ ÙƒÙ…Ù„Ù PDF',
                style: GoogleFonts.cairo(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildShareCard(BuildContext context) {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _shareContent(context),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.share, color: Theme.of(context).primaryColor),
              SizedBox(width: 8),
              Text(
                'Ù…Ø´Ø§Ø±ÙƒØ© Ø§Ù„Ù…Ø­ØªÙˆÙ‰',
                style: GoogleFonts.cairo(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _launchURL(BuildContext context, String url) {
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      url = 'https://$url';
    }

    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WebViewScreen(url: url),
      ),
    );
  }

  Future<void> _downloadPdf(BuildContext context) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text(widget.university.name, style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)),
              pw.SizedBox(height: 20),
              pw.Text('Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ: ${widget.university.website}'),
              pw.SizedBox(height: 20),
              pw.Text('ÙˆØµÙ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©:', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold)),
              pw.Text(widget.university.description),
            ],
          );
        },
      ),
    );

    final output = await getTemporaryDirectory();
    final file = File('${output.path}/university_${widget.university.id}.pdf');
    await file.writeAsBytes(await pdf.save());

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ØªÙ… ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ù…Ù„Ù Ø¨Ù†Ø¬Ø§Ø­')),
    );

    if (await canLaunch(file.path)) {
      await launch(file.path);
    } else {
      print('Could not launch ${file.path}');
    }
  }

  void _shareContent(BuildContext context) {
    final String content = '''
${widget.university.name}

Ø§Ù„Ù…ÙˆÙ‚Ø¹ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ: ${widget.university.website}

ÙˆØµÙ Ø§Ù„Ø¬Ø§Ù…Ø¹Ø©:
${widget.university.description}
''';

    Share.share(content, subject: widget.university.name);
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\home_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/providers/language_provider.dart';
import 'package:taleb_edu_platform/screens/admin_dashboard.dart';
import 'package:taleb_edu_platform/screens/admin_education_pathway_screen.dart';
import 'package:taleb_edu_platform/screens/admin_institution_screen.dart';
import 'package:taleb_edu_platform/screens/admin_notification.dart';
import 'package:taleb_edu_platform/screens/mostajadat_screen.dart';
import 'package:taleb_edu_platform/screens/support_screen.dart';
import 'package:taleb_edu_platform/screens/profile_screen.dart';
import 'package:taleb_edu_platform/screens/institutions_screen.dart';
import 'package:taleb_edu_platform/screens/jobs_screen.dart';
import 'package:taleb_edu_platform/screens/guidance_screen.dart';
import 'package:taleb_edu_platform/screens/notifications_screen.dart';
import 'package:taleb_edu_platform/widgets/announcement_carousel.dart';
import 'package:taleb_edu_platform/widgets/custom_bottom_navigation.dart';
import 'package:taleb_edu_platform/providers/announcement_provider.dart'
    as announcement_provider;
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

class HomeScreen extends ConsumerStatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends ConsumerState<HomeScreen>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  int _currentIndex = 0;
  late NotificationsScreen _notificationsScreen;


  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 250),
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _animationController.forward();
    _setupNotifications();
     _notificationsScreen = NotificationsScreen();

  }

  void _setupNotifications() async {
    // Check for initial message (app opened from terminated state)
    RemoteMessage? initialMessage = await FirebaseMessaging.instance.getInitialMessage();
    if (initialMessage != null) {
      _handleInitialMessage(initialMessage);
    }

    // Listen for foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("Received foreground message: ${message.messageId}");
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("Opened app from background state: ${message.messageId}");
      _handleBackgroundMessage(message);
    });
  }

  void _handleInitialMessage(RemoteMessage message) {
    print("Handling initial message: ${message.messageId}");

  }

  void _handleBackgroundMessage(RemoteMessage message) {
    print("Handling background message: ${message.messageId}");
    // Navigate to a specific screen or perform an action based on the message
    // Similar to _handleInitialMessage
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final announcementsAsyncValue =
        ref.watch(announcement_provider.announcementsProvider);

    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: IndexedStack(
        index: _currentIndex,
        children: [
          _buildHomeContent(announcementsAsyncValue),
          MostajadatScreen(),
          SupportScreen(),
          ProfileScreen(),
        ],
      ),
      bottomNavigationBar: CustomBottomNavigation(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() => _currentIndex = index);
        },
      ),
    );
  }

  Widget _buildHomeContent(
      AsyncValue<List<Announcement>> announcementsAsyncValue) {
    return CustomScrollView(
      slivers: [
        _buildSliverAppBar(context),
        SliverToBoxAdapter(
          child: AnimationLimiter(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: AnimationConfiguration.toStaggeredList(
                duration: const Duration(milliseconds: 250),
                childAnimationBuilder: (widget) => SlideAnimation(
                  horizontalOffset: 50.0,
                  child: FadeInAnimation(
                    child: widget,
                  ),
                ),
                children: [
                  Padding(
                    padding: EdgeInsets.all(16),
                    child: _buildWelcomeText(),
                  ),
                  _buildAnnouncementCarousel(announcementsAsyncValue),
                  SizedBox(height: 24),
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildCategories(),
                        SizedBox(height: 80),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSliverAppBar(BuildContext context) {
    return SliverAppBar(
      floating: true,
      snap: true,
      backgroundColor: Colors.white,
      elevation: 0,
      automaticallyImplyLeading: false,
      title: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Row(
            children: [
              Padding(
                padding: EdgeInsets.only(top: 4),
                child: Hero(
                  tag: 'logo',
                  child: Image.asset(
                    'assets/images/my.png',
                    width: 35,
                    height: 35,
                    fit: BoxFit.contain,
                  ),
                ),
              ),
              SizedBox(width: 4),
              GestureDetector(
                onTap: () {

                },
                child: Text(
                  'Taleb Educational Platform'.tr(),
                  style: GoogleFonts.cairo(
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                    fontSize: 24,
                  ),
                ),
              ),
            ],
          ),
          Row(
            children: [
              IconButton(
          icon: Icon(Icons.notifications_none, color: Colors.black),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => _notificationsScreen),
            );
          },
        ),
              IconButton(
                icon: Icon(Icons.language, color: Colors.black),
                onPressed: () {
                  _showLanguageDialog(context);
                },
              ),
            ],
          ),
        ],
      ),
      actions: [],
      leadingWidth: 0,
      leading: SizedBox(),
    );
  }

  Widget _buildWelcomeText() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Align(
        alignment: context.locale.languageCode == 'ar' ? Alignment.centerRight : Alignment.centerLeft,
        child: Text(
          'Ø§Ù„Ø¥Ø¹Ù„Ø§Ù†Ø§Øª'.tr(),
          style: GoogleFonts.cairo(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.black87,
          ),
          textAlign: context.locale.languageCode == 'ar' ? TextAlign.right : TextAlign.left,
        ),
      ),
    );
  }

  Widget _buildAnnouncementCarousel(
      AsyncValue<List<Announcement>> announcementsAsyncValue) {
    return SizedBox(
      height: 300,
      child: announcementsAsyncValue.when(
        data: (announcements) => AnnouncementCarousel(announcements: announcements),
        loading: () => Center(child: CircularProgressIndicator()),
        error: (_, __) =>
            Center(child: Text('error_loading_announcements'.tr())),
      ),
    );
  }

  Widget _buildCategories() {
    final primaryColor = Theme.of(context).primaryColor;
    final accentColor = Theme.of(context).colorScheme.secondary;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.only(bottom: 12, right: 16),
          child: Align(
            alignment: context.locale.languageCode == 'ar' ? Alignment.centerRight : Alignment.centerLeft,
            child: Text(
              'Ø§Ù„ÙØ¦Ø§Øª'.tr(),
              style: GoogleFonts.cairo(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.black87,
              ),
              textAlign: context.locale.languageCode == 'ar' ? TextAlign.right : TextAlign.left,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => AdminEducationPathwayScreen()),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primaryColor,
                      padding: EdgeInsets.symmetric(vertical: 12),
                      textStyle: TextStyle(fontSize: 16),
                    ),
                    child: Text('Ù…Ø³Ø§Ø±Ø§Øª Ø§Ù„ØªØ¹Ù„ÙŠÙ…'.tr()),
                  ),
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => AdminDashboardScreen()),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primaryColor,
                      padding: EdgeInsets.symmetric(vertical: 12),
                      textStyle: TextStyle(fontSize: 16),
                    ),
                    child: Text('Ù„ÙˆØ­Ø© ØªØ­ÙƒÙ… Ø§Ù„Ø£Ø¯Ù…Ù†'.tr()),
                  ),
                ),
              ),

              Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => AdminNotificationScreen()),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: primaryColor,
                      padding: EdgeInsets.symmetric(vertical: 12),
                      textStyle: TextStyle(fontSize: 16),
                    ),
                    child: Text('Ø¥Ø±Ø³Ø§Ù„ Ø¥Ø´Ø¹Ø§Ø±'.tr()),
                  ),
                ),
              ),
            ],
          ),
        ),
        Container(
          height: 100,
          child: LayoutBuilder(
            builder: (context, constraints) {
              double totalWidth = constraints.maxWidth - 32;
              double middleWidth = totalWidth * 0.4;
              double sideWidth = (totalWidth - middleWidth) / 2;

              return Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  _buildCategoryItem(
                    FontAwesomeIcons.newspaper,
                    'institutions_label'.tr(),
                    InstitutionsScreen(),
                    primaryColor,
                    accentColor,
                    sideWidth,
                  ),
                  SizedBox(width: 8),
                  _buildCategoryItem(
                    FontAwesomeIcons.briefcase,
                    'jobs_label'.tr(),
                    JobsScreen(),
                    primaryColor,
                    accentColor,
                    middleWidth,
                  ),
                  SizedBox(width: 8),
                  _buildCategoryItem(
                    FontAwesomeIcons.graduationCap,
                    'guidance_label'.tr(),
                    GuidanceScreen(),
                    primaryColor,
                    accentColor,
                    sideWidth,
                  ),
                ],
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildCategoryItem(
      IconData icon,
      String title,
      Widget screen,
      Color primaryColor,
      Color accentColor,
      double width) {
    return Container(
      width: width,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[300]!, width: 1),
      ),
      child: InkWell(
        onTap: () {
          Navigator.push(context, MaterialPageRoute(builder: (context) => screen));
        },
        borderRadius: BorderRadius.circular(12),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: primaryColor.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, size: 28, color: primaryColor),
            ),
            SizedBox(height: 8),
            Text(
              title,
              style: GoogleFonts.cairo(
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: Colors.black87,
              ),
              textAlign: TextAlign.center,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }

  void _showLanguageDialog(BuildContext context) {
    final List<LanguageOption> languages = [
      LanguageOption('Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©', 'ar', 'ðŸ‡¸ðŸ‡¦'),
      LanguageOption('English', 'en', 'ðŸ‡ºðŸ‡¸'),
      LanguageOption('FranÃ§ais', 'fr', 'ðŸ‡«ðŸ‡·'),
    ];

    showModalBottomSheet(
      context: context,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return Container(
          padding: EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'select_language'.tr(),
                style: GoogleFonts.cairo(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              SizedBox(height: 16),
              ...languages.map((language) => _buildLanguageOption(language, context)).toList(),
            ],
          ),
        );
      },
    );
  }

  Widget _buildLanguageOption(LanguageOption language, BuildContext context) {
    final isSelected = context.locale.languageCode == language.code;
    return InkWell(
      onTap: () {
        final newLocale = Locale(language.code);
        context.setLocale(newLocale);
        ref.read(languageProvider.notifier).setLanguage(newLocale);
        Navigator.pop(context);
      },
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12),
        decoration: BoxDecoration(
          border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
        ),
        child: Row(
          children: [
            Text(
              language.flag,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(width: 16),
            Text(
              language.name,
              style: GoogleFonts.cairo(
                fontSize: 18,
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                color: isSelected ? Theme.of(context).primaryColor : Colors.black87,
              ),
            ),
            Spacer(),
            if (isSelected)
              Icon(
                Icons.check_circle,
                color: Theme.of(context).primaryColor,
              ),
          ],
        ),
      ),
    );
  }
}

class LanguageOption {
  final String name;
  final String code;
  final String flag;

  LanguageOption(this.name, this.code, this.flag);
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\institutions_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/providers/mostajadat_provider.dart';
import 'package:taleb_edu_platform/screens/mostajadat_details_screen.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/screens/mostajadat_screen.dart';

class InstitutionsScreen extends ConsumerWidget {
  const InstitutionsScreen({Key? key}) : super(key: key);
  
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final mostajadatAsyncValue = ref.watch(mostajadatProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('institutions_label'.tr(), style: GoogleFonts.cairo(fontWeight: FontWeight.bold)),
      ),
      body: mostajadatAsyncValue.when(
        data: (mostajadatList) {
          final institutionsMostajadat = mostajadatList.where((m) => m.category == 'guidance').toList();
          return ListView.builder(
            itemCount: institutionsMostajadat.length,
            itemBuilder: (context, index) {
              final mostajadat = institutionsMostajadat[index];
              return MostajadatCard(mostajadat: mostajadat);
            },
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Error: $err')),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\institution_details_screen.dart
import 'package:flutter/material.dart';
import 'package:taleb_edu_platform/models/institution_model.dart';
import 'package:taleb_edu_platform/services/institution_service.dart';
import 'package:taleb_edu_platform/screens/faculty_details_screen.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:flutter_slidable/flutter_slidable.dart';

class InstitutionDetailsScreen extends StatefulWidget {
  final Institution institution;

  InstitutionDetailsScreen({required this.institution});

  @override
  _InstitutionDetailsScreenState createState() => _InstitutionDetailsScreenState();
}

class _InstitutionDetailsScreenState extends State<InstitutionDetailsScreen> {
  final InstitutionService _institutionService = InstitutionService();

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: Theme.of(context).textTheme.apply(
          bodyColor: Colors.black87,
          displayColor: Colors.black87,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: TextStyle(color: Colors.black87),
          hintStyle: TextStyle(color: Colors.black54),
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.grey[100],
        appBar: AppBar(
          title: Text(
            widget.institution.name,
            style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.white),
          ),
          centerTitle: true,
          elevation: 0,
          backgroundColor: Theme.of(context).primaryColor,
        ),
        body: SafeArea(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.all(16),
              itemCount: widget.institution.categories.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: CategoryListItem(
                        institutionId: widget.institution.id,
                        category: widget.institution.categories[index],
                        onTap: () => _navigateToCategoryDetails(widget.institution.id, widget.institution.categories[index]),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
        floatingActionButton: FloatingActionButton.extended(
          onPressed: _addNewCategory,
          icon: Icon(Icons.add),
          label: Text('Ø¥Ø¶Ø§ÙØ© ÙØ¦Ø©'),
          backgroundColor: Theme.of(context).primaryColor,
        ),
        floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      ),
    );
  }

  void _navigateToCategoryDetails(String institutionId, UniversityCategory category) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CategoryDetailsScreen(institutionId: institutionId, category: category),
      ),
    ).then((value) => setState(() {}));
  }

  void _addNewCategory() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
      ),
      builder: (BuildContext context) {
        return NewCategoryForm(
          onCategoryAdded: (UniversityCategory newCategory) {
            setState(() {
              widget.institution.categories.add(newCategory);
            });
          },
        );
      },
    );
  }
}

class CategoryListItem extends StatelessWidget {
  final String institutionId;
  final UniversityCategory category;
  final VoidCallback onTap;

  const CategoryListItem({
    Key? key,
    required this.institutionId,
    required this.category,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Slidable(
      actionPane: SlidableDrawerActionPane(),
      actionExtentRatio: 0.25,
      child: Card(
        margin: const EdgeInsets.only(bottom: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        elevation: 5,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  category.name,
                  style: GoogleFonts.cairo(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).primaryColor,
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Chip(
                      label: Text(
                        '${category.faculties.length} ÙƒÙ„ÙŠØ§Øª',
                        style: GoogleFonts.cairo(color: Colors.white),
                      ),
                      backgroundColor: Theme.of(context).primaryColor,
                    ),
                    IconButton(
                      icon: Icon(Icons.arrow_forward_ios, color: Theme.of(context).primaryColor),
                      onPressed: onTap,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
      secondaryActions: <Widget>[
        IconSlideAction(
          caption: 'Ø­Ø°Ù',
          color: Colors.red,
          icon: Icons.delete,
          onTap: () => _deleteCategory(context, institutionId, category),
        ),
      ],
    );
  }

  void _deleteCategory(BuildContext context, String institutionId, UniversityCategory category) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.black87)),
          content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ù…Ù† Ø­Ø°Ù Ù‡Ø°Ù‡ Ø§Ù„ÙØ¦Ø©ØŸ', style: GoogleFonts.cairo(color: Colors.black87)),
          actions: <Widget>[
            TextButton(
              child: Text('Ø¥Ù„ØºØ§Ø¡', style: GoogleFonts.cairo(color: Colors.grey)),
              onPressed: () => Navigator.of(context).pop(false),
            ),
            ElevatedButton(
              child: Text('Ø­Ø°Ù', style: GoogleFonts.cairo(color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.error,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              onPressed: () => Navigator.of(context).pop(true),
            ),
          ],
        );
      },
    );

    if (result == true) {
      await InstitutionService().deleteCategory(institutionId, category.id);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ… Ø­Ø°Ù Ø§Ù„ÙØ¦Ø©', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
      (context as Element).markNeedsBuild(); // Rebuild the widget
    }
  }
}

class NewCategoryForm extends StatefulWidget {
  final Function(UniversityCategory) onCategoryAdded;

  const NewCategoryForm({Key? key, required this.onCategoryAdded}) : super(key: key);

  @override
  _NewCategoryFormState createState() => _NewCategoryFormState();
}

class _NewCategoryFormState extends State<NewCategoryForm> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  final InstitutionService _institutionService = InstitutionService();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
        left: 16,
        right: 16,
        top: 16,
      ),
      child: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Ø¥Ø¶Ø§ÙØ© ÙØ¦Ø© Ø¬Ø¯ÙŠØ¯Ø©',
                style: GoogleFonts.cairo(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black87),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Ø§Ø³Ù… Ø§Ù„ÙØ¦Ø©',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
                style: TextStyle(color: Colors.black87),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„ÙØ¦Ø©';
                  }
                  return null;
                },
                onSaved: (value) => _name = value!,
              ),
              SizedBox(height: 24),
              ElevatedButton(
                child: Text('Ø¥Ø¶Ø§ÙØ© Ø§Ù„ÙØ¦Ø©', style: GoogleFonts.cairo(fontSize: 18, color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: Theme.of(context).primaryColor,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
                onPressed: _submitForm,
              ),
              SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final newCategory = UniversityCategory(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: _name,
        faculties: [],
      );
      await _institutionService.addCategory(newCategory.id, newCategory);
      widget.onCategoryAdded(newCategory);
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ…Øª Ø¥Ø¶Ø§ÙØ© Ø§Ù„ÙØ¦Ø© Ø¨Ù†Ø¬Ø§Ø­', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
    }
  }
}

class CategoryDetailsScreen extends StatefulWidget {
  final String institutionId;
  final UniversityCategory category;

  CategoryDetailsScreen({required this.institutionId, required this.category});

  @override
  _CategoryDetailsScreenState createState() => _CategoryDetailsScreenState();
}

class _CategoryDetailsScreenState extends State<CategoryDetailsScreen> {
  final InstitutionService _institutionService = InstitutionService();

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: Theme.of(context).textTheme.apply(
          bodyColor: Colors.black87,
          displayColor: Colors.black87,
        ),
        inputDecorationTheme: InputDecorationTheme(
          labelStyle: TextStyle(color: Colors.black87),
          hintStyle: TextStyle(color: Colors.black54),
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.grey[100],
        appBar: AppBar(
          title: Text(
            widget.category.name,
            style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.white),
          ),
          centerTitle: true,
          elevation: 0,
          backgroundColor: Theme.of(context).primaryColor,
        ),
        body: SafeArea(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.all(16),
              itemCount: widget.category.faculties.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: FacultyListItem(
                        institutionId: widget.institutionId,
                        categoryId: widget.category.id,
                        faculty: widget.category.faculties[index],
                        onTap: () => _navigateToFacultyDetails(widget.institutionId, widget.category.id, widget.category.faculties[index]),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
        floatingActionButton: FloatingActionButton.extended(
          onPressed: () => _addNewFaculty(widget.institutionId, widget.category.id),
          icon: Icon(Icons.add),
          label: Text('Ø¥Ø¶Ø§ÙØ© ÙƒÙ„ÙŠØ©'),
          backgroundColor: Theme.of(context).primaryColor,
        ),
        floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      ),
    );
  }

  void _navigateToFacultyDetails(String institutionId, String categoryId, Faculty faculty) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FacultyDetailsScreen(institutionId: institutionId, categoryId: categoryId, faculty: faculty),
      ),
    ).then((value) => setState(() {}));
  }

  void _addNewFaculty(String institutionId, String categoryId) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(25.0)),
      ),
      builder: (BuildContext context) {
        return NewFacultyForm(
          institutionId: institutionId,
          categoryId: categoryId,
          onFacultyAdded: (Faculty newFaculty) {
            setState(() {
              widget.category.faculties.add(newFaculty);
            });
          },
        );
      },
    );
  }
}

class FacultyListItem extends StatelessWidget {
  final String institutionId;
  final String categoryId;
  final Faculty faculty;
  final VoidCallback onTap;

  const FacultyListItem({
    Key? key,
    required this.institutionId,
    required this.categoryId,
    required this.faculty,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Slidable(
      actionPane: SlidableDrawerActionPane(),
      actionExtentRatio: 0.25,
      child: Card(
        margin: const EdgeInsets.only(bottom: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
        elevation: 5,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  faculty.name,
                  style: GoogleFonts.cairo(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).primaryColor,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  faculty.description,
                  style: GoogleFonts.cairo(fontSize: 16, color: Colors.black87),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    IconButton(
                      icon: Icon(Icons.arrow_forward_ios, color: Theme.of(context).primaryColor),
                      onPressed: onTap,
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
      secondaryActions: <Widget>[
        IconSlideAction(
          caption: 'Ø­Ø°Ù',
          color: Colors.red,
          icon: Icons.delete,
          onTap: () => _deleteFaculty(context, institutionId, categoryId, faculty),
        ),
      ],
    );
  }

  void _deleteFaculty(BuildContext context, String institutionId, String categoryId, Faculty faculty) async {
    final result = await showDialog<bool>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.white,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          title: Text('ØªØ£ÙƒÙŠØ¯ Ø§Ù„Ø­Ø°Ù', style: GoogleFonts.cairo(fontWeight: FontWeight.bold, color: Colors.black87)),
          content: Text('Ù‡Ù„ Ø£Ù†Øª Ù…ØªØ£ÙƒØ¯ Ù…Ù† Ø­Ø°Ù Ù‡Ø°Ù‡ Ø§Ù„ÙƒÙ„ÙŠØ©ØŸ', style: GoogleFonts.cairo(color: Colors.black87)),
          actions: <Widget>[
            TextButton(
              child: Text('Ø¥Ù„ØºØ§Ø¡', style: GoogleFonts.cairo(color: Colors.grey)),
              onPressed: () => Navigator.of(context).pop(false),
            ),
            ElevatedButton(
              child: Text('Ø­Ø°Ù', style: GoogleFonts.cairo(color: Colors.white)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Theme.of(context).colorScheme.error,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
              ),
              onPressed: () => Navigator.of(context).pop(true),
            ),
          ],
        );
      },
    );

    if (result == true) {
      await InstitutionService().deleteFaculty(institutionId, categoryId, faculty.id);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ… Ø­Ø°Ù Ø§Ù„ÙƒÙ„ÙŠØ©', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
      (context as Element).markNeedsBuild(); // Rebuild the widget
    }
  }
}

class NewFacultyForm extends StatefulWidget {
  final String institutionId;
  final String categoryId;
  final Function(Faculty) onFacultyAdded;

  const NewFacultyForm({Key? key, required this.institutionId, required this.categoryId, required this.onFacultyAdded}) : super(key: key);

  @override
  _NewFacultyFormState createState() => _NewFacultyFormState();
}

class _NewFacultyFormState extends State<NewFacultyForm> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  String _description = '';
  final InstitutionService _institutionService = InstitutionService();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom,
        left: 16,
        right: 16,
        top: 16,
      ),
      child: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Ø¥Ø¶Ø§ÙØ© ÙƒÙ„ÙŠØ© Ø¬Ø¯ÙŠØ¯Ø©',
                style: GoogleFonts.cairo(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.black87),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Ø§Ø³Ù… Ø§Ù„ÙƒÙ„ÙŠØ©',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
                style: TextStyle(color: Colors.black87),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ Ø§Ø³Ù… Ø§Ù„ÙƒÙ„ÙŠØ©';
                  }
                  return null;
                },
                onSaved: (value) => _name = value!,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'ÙˆØµÙ Ø§Ù„ÙƒÙ„ÙŠØ©',
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
                style: TextStyle(color: Colors.black87),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Ø§Ù„Ø±Ø¬Ø§Ø¡ Ø¥Ø¯Ø®Ø§Ù„ ÙˆØµÙ Ø§Ù„ÙƒÙ„ÙŠØ©';
                  }
                  return null;
                },
                onSaved: (value) => _description = value!,
                maxLines: 3,
              ),
              SizedBox(height: 24),
              ElevatedButton(
                child: Text('Ø¥Ø¶Ø§ÙØ© Ø§Ù„ÙƒÙ„ÙŠØ©', style: GoogleFonts.cairo(fontSize: 18, color: Colors.white)),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 16),
                  backgroundColor: Theme.of(context).primaryColor,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
                onPressed: _submitForm,
              ),
              SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      final newFaculty = Faculty(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: _name,
        description: _description,
      );
      await _institutionService.addFaculty(widget.institutionId, widget.categoryId, newFaculty);
      widget.onFacultyAdded(newFaculty);
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ØªÙ…Øª Ø¥Ø¶Ø§ÙØ© Ø§Ù„ÙƒÙ„ÙŠØ© Ø¨Ù†Ø¬Ø§Ø­', style: GoogleFonts.cairo(color: Colors.white)),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        ),
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\jobs_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/providers/mostajadat_provider.dart';
import 'package:taleb_edu_platform/screens/mostajadat_details_screen.dart';
import 'package:taleb_edu_platform/screens/mostajadat_screen.dart';
import 'package:easy_localization/easy_localization.dart';

class JobsScreen extends ConsumerWidget {
  const JobsScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final mostajadatAsyncValue = ref.watch(mostajadatProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('jobs_label'.tr(), style: GoogleFonts.cairo(fontWeight: FontWeight.bold)),
      ),
      body: mostajadatAsyncValue.when(
        data: (mostajadatList) {
          final jobsMostajadat = mostajadatList.where((m) => m.category == 'jobs').toList(); 
          return ListView.builder(
            itemCount: jobsMostajadat.length,
            itemBuilder: (context, index) {
              final mostajadat = jobsMostajadat[index];
              return MostajadatCard(mostajadat: mostajadat); 
            },
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Error: $err')),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\job_competitions_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/providers/job_competitions_provider.dart';
import 'package:taleb_edu_platform/widgets/announcement_list_item.dart';
import 'package:taleb_edu_platform/screens/announcement_details_screen.dart';

class JobCompetitionsScreen extends ConsumerStatefulWidget {
  @override
  _JobCompetitionsScreenState createState() => _JobCompetitionsScreenState();
}

class _JobCompetitionsScreenState extends ConsumerState<JobCompetitionsScreen> {
  final ScrollController _scrollController = ScrollController();
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {
      _loadMoreJobCompetitions();
    }
  }

  Future<void> _loadMoreJobCompetitions() async {
    if (!_isLoading) {
      setState(() => _isLoading = true);
      await ref.read(jobCompetitionsNotifierProvider.notifier).loadMore();
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final jobCompetitionsAsyncValue = ref.watch(jobCompetitionsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Jobs & Competitions',
          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
        ),
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.refresh(jobCompetitionsNotifierProvider);
          await ref.read(jobCompetitionsNotifierProvider.notifier).loadInitial(); 
        },
        child: jobCompetitionsAsyncValue.when(
          data: (jobCompetitions) => ListView.builder(
            controller: _scrollController,
            itemCount: jobCompetitions.length + 1,
            itemBuilder: (context, index) {
              if (index < jobCompetitions.length) {
                return AnnouncementListItem(
                  announcement: jobCompetitions[index],
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AnnouncementDetailsScreen(announcement: jobCompetitions[index]),
                    ),
                  ),
                );
              } else if (_isLoading) {
                return Center(child: CircularProgressIndicator());
              } else {
                return SizedBox.shrink();
              }
            },
          ),
          loading: () => Center(child: CircularProgressIndicator()),
          error: (error, stackTrace) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\message_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/models/message_model.dart';
import 'package:taleb_edu_platform/providers/message_provider.dart';
import 'package:taleb_edu_platform/widgets/message_bubble.dart';

class MessageScreen extends ConsumerStatefulWidget {
  @override
  _MessageScreenState createState() => _MessageScreenState();
}

class _MessageScreenState extends ConsumerState<MessageScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  void _sendMessage() {
    if (_messageController.text.trim().isNotEmpty) {
      ref.read(messageProvider.notifier).sendMessage(_messageController.text.trim());
      _messageController.clear();
      _scrollToBottom();
    }
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final messages = ref.watch(messageProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text('contact_admin'.tr()),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              itemCount: messages.length,
              itemBuilder: (context, index) {
                return MessageBubble(message: messages[index]);
              },
            ),
          ),
          _buildMessageInput(),
        ],
      ),
    );
  }

  Widget _buildMessageInput() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            offset: Offset(0, -2),
            blurRadius: 4.0,
            color: Colors.black.withOpacity(0.1),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              decoration: InputDecoration(
                hintText: 'type_message'.tr(),
                border: InputBorder.none,
              ),
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          IconButton(
            icon: Icon(Icons.send),
            onPressed: _sendMessage,
          ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\mostajadat_customization_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/providers/mostajadat_provider.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/screens/web_view_screen.dart';
import 'package:url_launcher/url_launcher.dart';

class MostajadatCustomizationScreen extends ConsumerStatefulWidget {
  final Mostajadat? mostajadat;
  final String title;
  final String description;
  final String details;
  final DateTime date;
  final DateTime? deadlineDate;
  final String imageUrl;
  final String? cardImagePath;

  MostajadatCustomizationScreen({
    this.mostajadat,
    required this.title,
    required this.description,
    required this.details,
    required this.date,
    this.deadlineDate,
    required this.imageUrl,
    required String type,
    this.cardImagePath,
  });

  @override
  _MostajadatCustomizationScreenState createState() =>
      _MostajadatCustomizationScreenState();
}

class _MostajadatCustomizationScreenState
    extends ConsumerState<MostajadatCustomizationScreen> {
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  late TextEditingController _detailsController;
  String? _cardImagePath;

  String? _headerImageUrl;
  List<ContentBlock> _contentBlocks = [];
  List<ButtonLink> _buttonLinks = [];
  List<IconLink> _iconLinks = [];

  TextSelection _selection =
      const TextSelection(baseOffset: 0, extentOffset: 0);
  final GlobalKey _textFieldKey = GlobalKey();

  late TextAlign _titleAlignment;
  late TextAlign _dateAlignment;
  late TextAlign _descriptionAlignment;
  late TextAlign _detailsAlignment;
  Map<int, TextAlign> _textAlignments = {};

  int _currentBlockIndex = 0;

  double _imageWidth = 200.0;
  double _imageHeight = 200.0;

  String _selectedCategory = 'jobs';
  List<String> _categories = ['jobs', 'guidance'];

  String _type = 'Ø¨Ø¯ÙˆÙ†';
  final List<String> _types = [
    'Ø¨Ø¯ÙˆÙ†',
    'Ø¨Ø§Ùƒ',
    'Ø¨Ø§Ùƒ+1',
    'Ø¨Ø§Ùƒ+2',
    'Ø¨Ø§Ùƒ+3',
    'Ø¨Ø§Ùƒ+4',
    'Ø¨Ø§Ùƒ+5',
    'Ø£Ø®Ø±Ù‰',
  ];

  Color _titleColor = Colors.black;
  Color _descriptionColor = Colors.black;
  Color _detailsColor = Colors.black;
  Color _dateColor = Colors.black;
  Color _typeColor = Colors.black;
  Color _categoryColor = Colors.black;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.title);
    _descriptionController = TextEditingController(text: widget.description);
    _detailsController = TextEditingController(text: widget.details);
    _headerImageUrl = widget.imageUrl;
    _titleAlignment = TextAlign.center;
    _dateAlignment = TextAlign.center;
    _descriptionAlignment = TextAlign.center;
    _detailsAlignment = TextAlign.center;
    if (widget.mostajadat != null) {
      _type = widget.mostajadat!.type;
      _buttonLinks = widget.mostajadat!.buttonLinks;
      _iconLinks = widget.mostajadat!.iconLinks;
    }
    _loadSavedData();
    _cardImagePath = widget.cardImagePath;

  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _detailsController.dispose();
    super.dispose();
  }

  Future<void> _loadSavedData() async {
  if (widget.mostajadat != null) {
    final docSnapshot = await FirebaseFirestore.instance
        .collection('mostajadat')
        .doc(widget.mostajadat!.id)
        .get();

    if (docSnapshot.exists) {
      final data = docSnapshot.data() as Map<String, dynamic>;
      setState(() {
        _titleController.text = data['title'] ?? '';
        _descriptionController.text = data['description'] ?? '';
        _detailsController.text = data['details'] ?? '';
        _headerImageUrl = data['imageUrl'];
        _cardImagePath = data['cardImagePath'] as String?;
        _imageWidth = data['imageWidth'] ?? 200.0;
        _imageHeight = data['imageHeight'] ?? 200.0;
        _selectedCategory = data['category'] ?? 'jobs';
        _type = data['type'] ?? 'Ø¨Ø¯ÙˆÙ†';
        _contentBlocks = (data['contentBlocks'] as List? ?? [])
            .map((block) => ContentBlock.fromMap(block))
            .toList();
        _buttonLinks = (data['buttonLinks'] as List<dynamic>? ?? [])
            .map((link) => ButtonLink.fromMap(link))
            .toList();
        _iconLinks = (data['iconLinks'] as List<dynamic>? ?? [])
            .map((link) => IconLink.fromMap(link))
            .toList();
        _titleColor = Color(data['titleColor'] ?? Colors.black.value);
        _descriptionColor = Color(data['descriptionColor'] ?? Colors.black.value);
        _detailsColor = Color(data['detailsColor'] ?? Colors.black.value);
        _dateColor = Color(data['dateColor'] ?? Colors.black.value);
        _typeColor = Color(data['typeColor'] ?? Colors.black.value);
        _categoryColor = Color(data['categoryColor'] ?? Colors.black.value);
        _titleAlignment = TextAlign.values[data['titleAlignment'] ?? TextAlign.center.index];
        _dateAlignment = TextAlign.values[data['dateAlignment'] ?? TextAlign.center.index];
        _descriptionAlignment = TextAlign.values[data['descriptionAlignment'] ?? TextAlign.center.index];
        _detailsAlignment = TextAlign.values[data['detailsAlignment'] ?? TextAlign.center.index];
      });
    }
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('customize_mostajadat'.tr(), style: GoogleFonts.cairo()),
        actions: [
          IconButton(
            icon: Icon(Icons.save),
            onPressed: _saveData,
          ),
          IconButton(
            icon: Icon(Icons.preview),
            onPressed: _previewMostajadat,
          ),
        ],
      ),
      body: Theme(
        data: Theme.of(context).copyWith(
          textTheme: Theme.of(context).textTheme.apply(
            bodyColor: Colors.black,
            displayColor: Colors.black,
          ),
          inputDecorationTheme: InputDecorationTheme(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Theme.of(context).primaryColor),
            ),
            filled: true,
            fillColor: Colors.grey.shade50,
            labelStyle: TextStyle(color: Colors.black),
            hintStyle: TextStyle(color: Colors.grey),
          ),
        ),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      _buildHeaderImageSection(),
                      SizedBox(height: 16),
                      _buildTitleSection(),
                      SizedBox(height: 16),
                      _buildDateSection(),
                      SizedBox(height: 16),
                      _buildContentBlocksEditor(),
                      SizedBox(height: 16),
                      _buildButtonLinksSection(),
                      SizedBox(height: 16),
                      _buildIconLinksSection(),
                    ],
                  ),
                ),
              ),
            ),
            _buildFormatToolbar(),
          ],
        ),
      ),
    );
  }

  Widget _buildFormatToolbar() {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8.0),
          child: Row(
            children: [
              _buildFormatButton(
                  Icons.format_bold, () => _applyTextStyle(weight: FontWeight.bold)),
              _buildFormatButton(Icons.format_italic,
                  () => _applyTextStyle(fontStyle: FontStyle.italic)),
              _buildFormatButton(Icons.format_underline,
                  () => _applyTextStyle(decoration: TextDecoration.underline)),
              _buildFormatButton(Icons.format_size, _showFontSizeDialog),
              _buildFormatButton(Icons.format_color_text, _showTextColorDialog),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(
                  Icons.format_align_left, () => _applyTextAlign(TextAlign.left)),
              _buildFormatButton(Icons.format_align_center,
                  () => _applyTextAlign(TextAlign.center)),
              _buildFormatButton(
                  Icons.format_align_right, () => _applyTextAlign(TextAlign.right)),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(Icons.format_list_bulleted, _insertBulletList),
              _buildFormatButton(Icons.format_list_numbered, _insertNumberedList),
              _buildFormatButton(Icons.link, _insertLink),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(Icons.image, _insertImage),
              _buildFormatButton(Icons.code, _addCodeBlock),
              _buildFormatButton(Icons.format_quote, _addBlockquote),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFormatButton(IconData icon, VoidCallback onPressed) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 4),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: EdgeInsets.all(8),
            child: Icon(icon, size: 20, color: Colors.grey[800]),
          ),
        ),
      ),
    );
  }

  Widget _buildHeaderImageSection() {
    return GestureDetector(
      onTap: _pickHeaderImage,
      child: Container(
        height: 200,
        decoration: BoxDecoration(
          color: Colors.grey[300],
          image: _headerImageUrl != null
              ? DecorationImage(
                  image: NetworkImage(_headerImageUrl!),
                  fit: BoxFit.cover,
                )
              : null,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Color.fromARGB(41, 158, 158, 158).withOpacity(0.5),
              spreadRadius: 2,
              blurRadius: 5,
              offset: Offset(0, 3),
            ),
          ],
        ),
        child: _headerImageUrl == null
            ? Center(
                child: Icon(Icons.add_photo_alternate,
                    size: 50, color: Colors.grey[600]),
              )
            : null,
      ),
    );
  }

  Widget _buildTitleSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Title', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        TextFormField(
          controller: _titleController,
          textAlign: _titleAlignment,
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: _titleColor,
          ),
          decoration: InputDecoration(
            labelText: 'Ø¹Ù†ÙˆØ§Ù†'.tr(),
            alignLabelWithHint: true,
          ),
        ),

      ],
    );
  }

  Widget _buildDateSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('ØªØ§Ø±ÙŠØ®', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                DateFormat('dd/MM/yyyy').format(widget.date),
                style: TextStyle(fontSize: 16, color: _dateColor),
                textAlign: _dateAlignment,
              ),
              if (widget.deadlineDate != null) ...[
                SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.event, color: Colors.red),
                    SizedBox(width: 8),
                    Text(
                      'deadline'.tr() + ': ${DateFormat('dd/MM/yyyy').format(widget.deadlineDate!)}',
                      style: TextStyle(fontSize: 16, color: Colors.red),
                      textAlign: _dateAlignment,
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
        SizedBox(height: 8),
       
      ],
    );
  }


  Widget _buildContentBlocksEditor() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Ø§Ù„Ù…Ø­ØªÙˆÙ‰', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        for (int i = 0; i < _contentBlocks.length; i++)
          _buildContentBlock(_contentBlocks[i], i),
        SizedBox(height: 16),
        _buildAddContentButton(),
      ],
    );
  }

  Widget _buildContentBlock(ContentBlock block, int index) {
    if (block is TextBlock) {
      return _buildTextBlock(block, index);
    } else if (block is ImageBlock) {
      return _buildImageBlock(block, index);
    } else if (block is CodeBlock) {
      return _buildCodeBlock(block, index);
    } else if (block is BlockquoteBlock) {
      return _buildBlockquoteBlock(block, index);
    }
    return SizedBox.shrink();
  }

  Widget _buildTextBlock(TextBlock block, int index) {
    return Focus(
      onFocusChange: (hasFocus) {
        if (hasFocus) {
          setState(() {
            _currentBlockIndex = index;
          });
        }
      },
      child: Container(
        margin: EdgeInsets.only(bottom: 12),
        child: TextFormField(
          key: index == 0 ? _textFieldKey : null,
          controller: block.controller,
          style: block.textStyle.copyWith(color: Colors.black),
          textAlign: _textAlignments[index] ?? TextAlign.center,
          maxLines: null,
          decoration: InputDecoration(
            contentPadding: EdgeInsets.all(12),
          ),
          onChanged: (text) {
            setState(() {
              block.text = text;
            });
          },
        ),
      ),
    );
  }

  Widget _buildImageBlock(ImageBlock block, int index) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 3,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          if (block.imageUrl != null)
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                block.imageUrl!,
                fit: BoxFit.cover,
                width: double.infinity,
              ),
            )
          else
            Container(
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: Icon(Icons.image, size: 50, color: Colors.grey[600]),
              ),
            ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
                onPressed: () => _pickImage(index),
              ),
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCodeBlock(CodeBlock block, int index) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 8),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[200],
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 3,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextFormField(
            controller: block.controller,
            maxLines: null,
            style: TextStyle(fontFamily: 'Courier', color: Colors.black),
            decoration: InputDecoration(
              border: InputBorder.none,
              hintText: 'enter_code_here'.tr(),
              hintStyle: TextStyle(color: Colors.grey),
            ),
            onChanged: (newText) {
              setState(() {
                _contentBlocks[index] = CodeBlock(text: newText);
              });
            },
          ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBlockquoteBlock(BlockquoteBlock block, int index) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 8),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        border: Border(left: BorderSide(color: Colors.grey, width: 4)),
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextFormField(
            controller: block.controller,
            maxLines: null,
            style: TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
            decoration: InputDecoration(
              border: InputBorder.none,
              hintText: 'enter_quote_here'.tr(),
              hintStyle: TextStyle(color: Colors.grey),
            ),
            onChanged: (newText) {
              setState(() {
                _contentBlocks[index] = BlockquoteBlock(text: newText);
              });
            },
          ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAddContentButton() {
    return ElevatedButton.icon(
      icon: Icon(Icons.add),
      label: Text('Ø¥Ø¶Ø§ÙØ© Ù…Ø­ØªÙˆÙ‰'.tr()),
      onPressed: _showAddContentDialog,
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.white,
        backgroundColor: Theme.of(context).primaryColor,
        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  void _showAddContentDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('add_content'.tr(), style: TextStyle(color: Colors.black)),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: Icon(Icons.text_fields, color: Theme.of(context).primaryColor),
                title: Text('text'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addTextBlock();
                },
              ),
              ListTile(
                leading: Icon(Icons.image, color: Theme.of(context).primaryColor),
                title: Text('image'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addImage();
                },
              ),
              ListTile(
                leading: Icon(Icons.code, color: Theme.of(context).primaryColor),
                title: Text('code'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addCodeBlock();
                },
              ),
              ListTile(
                leading: Icon(Icons.format_quote, color: Theme.of(context).primaryColor),
                title: Text('quote'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addBlockquote();
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _addTextBlock() {
    setState(() {
      _contentBlocks.add(TextBlock(
          text: '', textStyle: TextStyle(color: Colors.black), alignment: TextAlign.center));
      _textAlignments[_contentBlocks.length - 1] = TextAlign.center;
    });
  }

  void _addImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks.add(ImageBlock(imageUrl: imageUrl));
        });
      }
    }
  }

  void _addCodeBlock() {
    setState(() {
      _contentBlocks.add(CodeBlock(text: ''));
    });
  }

  void _addBlockquote() {
    setState(() {
      _contentBlocks.add(BlockquoteBlock(text: ''));
    });
  }

  Future<String?> _uploadImage(File imageFile) async {
    try {
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('mostajadat_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await storageRef.putFile(imageFile);
      return await storageRef.getDownloadURL();
    } catch (e) {
      print('Error uploading image: $e');
      return null;
    }
  }

  void _removeContentBlock(int index) {
    setState(() {
      _contentBlocks.removeAt(index);
      _textAlignments.remove(index);
    });
  }

  void _pickHeaderImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _headerImageUrl = imageUrl;
        });
      }
    }
  }

  void _pickImage(int index) async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks[index] = ImageBlock(imageUrl: imageUrl);
        });
      }
    }
  }

  void _applyTextStyle({
    FontWeight? weight,
    FontStyle? fontStyle,
    TextDecoration? decoration,
    double? fontSize,
    Color? color
  }) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          TextStyle newStyle = block.textStyle.copyWith(
            fontWeight: weight ?? block.textStyle.fontWeight,
            fontStyle: fontStyle ?? block.textStyle.fontStyle,
            decoration: decoration ?? block.textStyle.decoration,
            fontSize: fontSize ?? block.textStyle.fontSize,
            color: color ?? block.textStyle.color,
          );
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: block.text,
            textStyle: newStyle,
            alignment: block.alignment
          );
        }
      }
    });
  }

  void _applyTextAlign(TextAlign alignment) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          _textAlignments[_currentBlockIndex] = alignment;
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: block.text,
            textStyle: block.textStyle,
            alignment: alignment,
          );
        }
      } else if (_currentBlockIndex == -1) {
        _titleAlignment = alignment;
      } else if (_currentBlockIndex == -2) {
        _dateAlignment = alignment;
      } else if (_currentBlockIndex == -3) {
        _descriptionAlignment = alignment;
      }
    });
  }

  void _showFontSizeDialog() {
    double currentFontSize = 16.0;
    if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
      ContentBlock block = _contentBlocks[_currentBlockIndex];
      if (block is TextBlock) {
        currentFontSize = block.textStyle.fontSize ?? 16.0;
      }
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('font_size'.tr(), style: TextStyle(color: Colors.black)),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Slider(
                    value: currentFontSize,
                    min: 8,
                    max: 32,
                    divisions: 12,
                    label: currentFontSize.round().toString(),
                    onChanged: (double value) {
                      setState(() {
                        currentFontSize = value;
                      });
                    },
                  ),
                  Text('${currentFontSize.round()} px', style: TextStyle(color: Colors.black)),
                ],
              );
            },
          ),
          actions: <Widget>[
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: Text('apply'.tr()),
              onPressed: () {
                _applyTextStyle(fontSize: currentFontSize);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _showTextColorDialog() {
    Color currentColor = Colors.black;
    if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
      ContentBlock block = _contentBlocks[_currentBlockIndex];
      if (block is TextBlock) {
        currentColor = block.textStyle.color ?? Colors.black;
      }
    }

    _showColorDialog(currentColor, (color) {
      _applyTextStyle(color: color);
    });
  }

  void _showColorDialog(Color initialColor, Function(Color) onColorChanged) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Choose Color', style: TextStyle(color: Colors.black)),
          content: SingleChildScrollView(
            child: ColorPicker(
              pickerColor: initialColor,
              onColorChanged: onColorChanged,
              pickerAreaHeightPercent: 0.8,
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: Text('apply'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _insertBulletList() {
    _insertListItem('â€¢ ');
  }

  void _insertNumberedList() {
    _insertListItem('1. ');
  }

  void _insertListItem(String prefix) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          String newText = block.text + '\n' + prefix;
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: newText,
            textStyle: block.textStyle,
            alignment: block.alignment,
          );
        }
      }
    });
  }

  void _insertLink() {
    String url = '';
    String linkText = '';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('insert_link'.tr(), style: TextStyle(color: Colors.black)),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: InputDecoration(
                  hintText: 'enter_url'.tr(),
                  hintStyle: TextStyle(color: Colors.grey),
                ),
                onChanged: (value) => url = value,
                style: TextStyle(color: Colors.black),
              ),
              SizedBox(height: 8),
              TextField(
                decoration: InputDecoration(
                  hintText: 'enter_link_text'.tr(),
                  hintStyle: TextStyle(color: Colors.grey),
                ),
                onChanged: (value) => linkText = value,
                style: TextStyle(color: Colors.black),
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () => Navigator.of(context).pop(),
            ),
            ElevatedButton(
              child: Text('insert'.tr()),
              onPressed: () {
                _insertLinkToContent(url, linkText);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _insertLinkToContent(String url, String linkText) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          String newText = block.text + '[$linkText]($url)';
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: newText,
            textStyle: block.textStyle,
            alignment: block.alignment,
          );
        }
      }
    });
  }

  void _insertImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks.insert(
              _currentBlockIndex + 1, ImageBlock(imageUrl: imageUrl));
        });
      }
    }
  }

  Future<void> _saveData() async {
  try {
    final mostajadat = {
      'title': _titleController.text,
      'description': _descriptionController.text,
      'details': _detailsController.text,
      'category': _selectedCategory,
      'date': Timestamp.fromDate(widget.date),
      'deadlineDate': widget.deadlineDate != null
          ? Timestamp.fromDate(widget.deadlineDate!)
          : null,
      'imageUrl': _headerImageUrl,
      'cardImagePath': _cardImagePath,
      'imageWidth': _imageWidth,
      'imageHeight': _imageHeight,
      'type': _type,
      'contentBlocks': _contentBlocks.map((block) => block.toMap()).toList(),
      'buttonLinks': _buttonLinks.map((link) => link.toMap()).toList(),
      'iconLinks': _iconLinks.map((link) => link.toMap()).toList(),
      'titleColor': _titleColor.value,
      'descriptionColor': _descriptionColor.value,
      'detailsColor': _detailsColor.value,
      'dateColor': _dateColor.value,
      'typeColor': _typeColor.value,
      'categoryColor': _categoryColor.value,
      'titleAlignment': _titleAlignment.index,
      'descriptionAlignment': _descriptionAlignment.index,
      'detailsAlignment': _detailsAlignment.index,
      'dateAlignment': _dateAlignment.index,
    };

    if (widget.mostajadat == null) {
      await FirebaseFirestore.instance
          .collection('mostajadat')
          .add(mostajadat);
    } else {
      await FirebaseFirestore.instance
          .collection('mostajadat')
          .doc(widget.mostajadat!.id)
          .update(mostajadat);
    }

    // Refresh the mostajadatProvider
    ref.refresh(mostajadatProvider);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('mostajadat_saved_successfully'.tr()),
        backgroundColor: Colors.green,
      ),
    );
    // After saving, navigate back to the dashboard
    Navigator.of(context).pop();
  } catch (e) {
    print('Error saving mostajadat: $e');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('failed_to_save'.tr()),
        backgroundColor: Colors.red,
      ),
    );
  }
}
  void _previewMostajadat() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => MostajadatPreviewScreen(
          title: _titleController.text,
          date: widget.date,
          deadlineDate: widget.deadlineDate,
          imageUrl: _headerImageUrl,
          contentBlocks: _contentBlocks,
          titleAlignment: _titleAlignment,
          dateAlignment: _dateAlignment,
          type: _type,
          cardImagePath: widget.cardImagePath,
          buttonLinks: _buttonLinks,
          iconLinks: _iconLinks,
          titleColor: _titleColor,
          descriptionColor: _descriptionColor,
          detailsColor: _detailsColor,
          dateColor: _dateColor,
          typeColor: _typeColor,
          categoryColor: _categoryColor,
        ),
      ),
    );
  }

  Widget _buildButtonLinksSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£Ø²Ø±Ø§Ø±', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        ..._buttonLinks.map((link) => _buildButtonLinkItem(link)).toList(),
        SizedBox(height: 8),
        ElevatedButton.icon(
          onPressed: _addButtonLink,
          icon: Icon(Icons.add),
          label: Text('Ø¥Ø¶Ø§ÙØ© Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£Ø²Ø±Ø§Ø±'),
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: Theme.of(context).primaryColor,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildButtonLinkItem(ButtonLink link) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 4),
      child: ListTile(
        title: Text(link.text, style: TextStyle(color: Colors.black)),
        subtitle: Text(link.url, style: TextStyle(color: Colors.grey[600])),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
              onPressed: () => _editButtonLink(link),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () => _removeButtonLink(link),
            ),
          ],
        ),
        onTap: () => _editButtonLink(link),
      ),
    );
  }

  Widget _buildIconLinksSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        ..._iconLinks.map((link) => _buildIconLinkItem(link)).toList(),
        SizedBox(height: 8),
        ElevatedButton.icon(
          onPressed: _addIconLink,
          icon: Icon(Icons.add),
          label: Text('Ø¥Ø¶Ø§ÙØ© Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª'),
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: Theme.of(context).primaryColor,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildIconLinkItem(IconLink link) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 4),
      child: ListTile(
        leading: link.iconUrl.isNotEmpty
            ? Image.network(link.iconUrl, width: 24, height: 24)
            : Icon(Icons.broken_image),
        title: Text(link.url, style: TextStyle(color: Colors.black)),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
              onPressed: () => _editIconLink(link),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () => _removeIconLink(link),
            ),
          ],
        ),
        onTap: () => _editIconLink(link),
      ),
    );
  }

  void _addButtonLink() {
    showDialog(
      context: context,
      builder: (context) => _ButtonLinkDialog(
        onSave: (text, url) {
          setState(() {
            _buttonLinks.add(ButtonLink(text: text, url: url));
          });
        },
      ),
    );
  }

  void _editButtonLink(ButtonLink link) {
    showDialog(
      context: context,
      builder: (context) => _ButtonLinkDialog(
        initialText: link.text,
        initialUrl: link.url,
        onSave: (text, url) {
          setState(() {
            int index = _buttonLinks.indexOf(link);
            _buttonLinks[index] = ButtonLink(text: text, url: url);
          });
        },
      ),
    );
  }

  void _removeButtonLink(ButtonLink link) {
    setState(() {
      _buttonLinks.remove(link);
    });
  }

  void _addIconLink() {
    showDialog(
      context: context,
      builder: (context) => _IconLinkDialog(
        onSave: (iconUrl, url) {
          setState(() {
            _iconLinks.add(IconLink(iconUrl: iconUrl, url: url));
          });
        },
      ),
    );
  }

  void _editIconLink(IconLink link) {
    showDialog(
      context: context,
      builder: (context) => _IconLinkDialog(
        initialIconUrl: link.iconUrl,
        initialUrl: link.url,
        onSave: (iconUrl, url) {
          setState(() {
            int index = _iconLinks.indexOf(link);
            _iconLinks[index] = IconLink(iconUrl: iconUrl, url: url);
          });
        },
      ),
    );
  }

  void _removeIconLink(IconLink link) {
    setState(() {
      _iconLinks.remove(link);
    });
  }
}

class _ButtonLinkDialog extends StatefulWidget {
  final String? initialText;
  final String? initialUrl;
  final Function(String, String) onSave;

  const _ButtonLinkDialog({
    Key? key,
    this.initialText,
    this.initialUrl,
    required this.onSave,
  }) : super(key: key);

  @override
  __ButtonLinkDialogState createState() => __ButtonLinkDialogState();
}

class __ButtonLinkDialogState extends State<_ButtonLinkDialog> {
  late TextEditingController _textController;
  late TextEditingController _urlController;

  @override
  void initState() {
    super.initState();
    _textController = TextEditingController(text: widget.initialText);
    _urlController = TextEditingController(text: widget.initialUrl);
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add/Edit Button Link', style: TextStyle(color: Colors.black)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _textController,
            decoration: InputDecoration(labelText: 'Button Text'),
            style: TextStyle(color: Colors.black),
          ),
          SizedBox(height: 8),
          TextField(
            controller: _urlController,
            decoration: InputDecoration(labelText: 'URL'),
            style: TextStyle(color: Colors.black),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSave(_textController.text, _urlController.text);
            Navigator.of(context).pop();
          },
          child: Text('Save'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
          ),
        ),
      ],
    );
  }
}

class _IconLinkDialog extends StatefulWidget {
  final String? initialIconUrl;
  final String? initialUrl;
  final Function(String, String) onSave;

  const _IconLinkDialog({
    Key? key,
    this.initialIconUrl,
    this.initialUrl,
    required this.onSave,
  }) : super(key: key);

  @override
  __IconLinkDialogState createState() => __IconLinkDialogState();
}

class __IconLinkDialogState extends State<_IconLinkDialog> {
  late TextEditingController _iconUrlController;
  late TextEditingController _urlController;
  String? _selectedIconUrl;

  @override
  void initState() {
    super.initState();
    _iconUrlController = TextEditingController(text: widget.initialIconUrl);
    _urlController = TextEditingController(text: widget.initialUrl);
    _selectedIconUrl = widget.initialIconUrl;
  }

  Future<void> _pickIcon() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? iconUrl = await _uploadImage(File(image.path));
      if (iconUrl != null) {
        setState(() {
          _selectedIconUrl = iconUrl;
          _iconUrlController.text = iconUrl;
        });
      }
    }
  }

  Future<String?> _uploadImage(File imageFile) async {
    try {
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('icon_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await storageRef.putFile(imageFile);
      return await storageRef.getDownloadURL();
    } catch (e) {
      print('Error uploading image: $e');
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add/Edit Icon Link', style: TextStyle(color: Colors.black)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          GestureDetector(
            onTap: _pickIcon,
            child: Container(
              width: 100,
              height: 100,
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(8),
              ),
              child: _selectedIconUrl != null
                  ? Image.network(_selectedIconUrl!, fit: BoxFit.cover)
                  : Icon(Icons.add_photo_alternate, size: 50, color: Colors.grey[600]),
            ),
          ),
          SizedBox(height: 16),
          TextField(
            controller: _urlController,
            decoration: InputDecoration(labelText: 'URL'),
            style: TextStyle(color: Colors.black),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSave(_selectedIconUrl ?? '', _urlController.text);
            Navigator.of(context).pop();
          },
          child: Text('Save'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
          ),
        ),
      ],
    );
  }
}

class MostajadatPreviewScreen extends StatelessWidget {
  final String title;
  final DateTime date;
  final DateTime? deadlineDate;
  final String? imageUrl;
  final List<ContentBlock> contentBlocks;
  final TextAlign titleAlignment;
  final TextAlign dateAlignment;
  final String type;
  final String? cardImagePath;
  final List<ButtonLink> buttonLinks;
  final List<IconLink> iconLinks;
  final Color titleColor;
  final Color descriptionColor;
  final Color detailsColor;
  final Color dateColor;
  final Color typeColor;
  final Color categoryColor;

  MostajadatPreviewScreen({
    required this.title,
    required this.date,
    this.deadlineDate,
    this.imageUrl,
    required this.contentBlocks,
    required this.titleAlignment,
    required this.dateAlignment,
    required this.type,
    this.cardImagePath,
    required this.buttonLinks,
    required this.iconLinks,
    required this.titleColor,
    required this.descriptionColor,
    required this.detailsColor,
    required this.dateColor,
    required this.typeColor,
    required this.categoryColor,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ù…Ø¹Ø§ÙŠÙ†Ø© Ø§Ù„Ù…Ø³ØªØ¬Ø¯', style: GoogleFonts.cairo()),
        backgroundColor: Theme.of(context).primaryColor,
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imageUrl != null)
              Image.network(
                imageUrl!,
                fit: BoxFit.cover,
                width: double.infinity,
                height: 200,
              ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: titleColor,
                    ),
                    textAlign: titleAlignment,
                  ),
                  SizedBox(height: 8),
                  Text(
                    'Ø§Ù„ØªØ§Ø±ÙŠØ®: ${DateFormat('dd/MM/yyyy').format(date)}',
                    textAlign: dateAlignment,
                    style: TextStyle(color: dateColor),
                  ),
                  if (deadlineDate != null)
                    Text(
                      'Ø§Ù„Ù…ÙˆØ¹Ø¯ Ø§Ù„Ù†Ù‡Ø§Ø¦ÙŠ: ${DateFormat('dd/MM/yyyy').format(deadlineDate!)}',
                      style: TextStyle(color: Colors.red),
                      textAlign: dateAlignment,
                    ),
                  SizedBox(height: 16),
                  Text('Ø§Ù„Ù†ÙˆØ¹: $type',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: typeColor)),
                  SizedBox(height: 16),
                  ...contentBlocks.map((block) => _buildContentBlockPreview(block)).toList(),
                  SizedBox(height: 16),
                  _buildButtonLinks(context),
                  SizedBox(height: 16),
                  _buildIconLinks(context),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContentBlockPreview(ContentBlock block) {
    if (block is TextBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Text(
          block.text,
          style: block.textStyle.copyWith(color: detailsColor),
          textAlign: block.alignment ?? TextAlign.start,
        ),
      );
    } else if (block is ImageBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: block.imageUrl != null
            ? Image.network(
                block.imageUrl!,
                fit: BoxFit.cover,
                width: double.infinity,
              )
            : SizedBox.shrink(),
      );
    } else if (block is CodeBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Container(
          width: double.infinity,
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey[200],
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(
            block.text,
            style: TextStyle(fontFamily: 'Courier', color: detailsColor),
          ),
        ),
      );
    } else if (block is BlockquoteBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Container(
          width: double.infinity,
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            border: Border(left: BorderSide(color: Colors.grey, width: 4)),
          ),
          child: Text(
            block.text,
            style: TextStyle(fontStyle: FontStyle.italic, color: detailsColor),
          ),
        ),
      );
    }
    return SizedBox.shrink();
  }

  Widget _buildButtonLinks(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          'Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£Ø²Ø±Ø§Ø±',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: titleColor),
        ),
        SizedBox(height: 8),
        ...buttonLinks.map((link) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 8.0),
            child: ElevatedButton(
              onPressed: () => _launchURL(context, link.url),
              child: Text(link.text),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Theme.of(context).primaryColor,
                padding: EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          );
        }).toList(),
      ],
    );
  }

  Widget _buildIconLinks(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: titleColor),
        ),
        SizedBox(height: 8),
        Wrap(
          spacing: 16,
          runSpacing: 16,
          children: iconLinks.map((link) {
            return InkWell(
              onTap: () => _launchURL(context, link.url),
              child: Column(
                children: [
                  Image.network(
                    link.iconUrl,
                    width: 40,
                    height: 40,
                    fit: BoxFit.contain,
                  ),
                  SizedBox(height: 4),
                  Text(
                    link.url,
                    style: TextStyle(fontSize: 12, color: detailsColor),
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
  
  void _launchURL(BuildContext context, String url) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WebViewScreen(url: url),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\mostajadat_details_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/screens/web_view_screen.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'dart:io';

class MostajadatDetailsScreen extends StatelessWidget {
  final Mostajadat mostajadat;

  const MostajadatDetailsScreen({Key? key, required this.mostajadat}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(context),
          SliverToBoxAdapter(
            child: AnimationLimiter(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: AnimationConfiguration.toStaggeredList(
                  duration: const Duration(milliseconds: 375),
                  childAnimationBuilder: (widget) => SlideAnimation(
                    horizontalOffset: 50.0,
                    child: FadeInAnimation(
                      child: widget,
                    ),
                  ),
                  children: [
                    _buildTitleAndCategoryCard(),
                    _buildDatesCard(),
                    _buildContentSection(),
                    _buildButtonLinksCard(context),
                    _buildIconLinksCard(context),
                    _buildDownloadCard(context),
                    _buildShareCard(context),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar(BuildContext context) {
  return SliverAppBar(
    expandedHeight: 200.0,
    floating: false,
    pinned: true,
    backgroundColor: Colors.transparent,
    flexibleSpace: LayoutBuilder(
      builder: (BuildContext context, BoxConstraints constraints) {
        final top = constraints.biggest.height;
        final expandRatio = (top - kToolbarHeight) / (200.0 - kToolbarHeight);
        final isCollapsed = expandRatio <= 0.5;
        return Stack(
          fit: StackFit.expand,
          children: [
            AnimatedOpacity(
              opacity: isCollapsed ? 0.0 : 1.0,
              duration: Duration(milliseconds: 300),
              child: Hero(
                tag: 'mostajadat-image-${mostajadat.id}',
                child: mostajadat.imageUrl.isNotEmpty
                    ? Image.network(
                        mostajadat.imageUrl,
                        fit: BoxFit.cover,
                      )
                    : Container(
                        color: Colors.grey[300],
                        child: Icon(Icons.event_note, size: 80, color: Colors.white),
                      ),
              ),
            ),
            Positioned(
              left: 16,
              top: MediaQuery.of(context).padding.top + 8,
              child: AnimatedContainer(
                duration: Duration(milliseconds: 300),
                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: isCollapsed ? Color(0xFFFFFFFF) : Colors.transparent,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Row(
                  children: [
                    // You can add additional widgets here if needed
                  ],
                ),
              ),
            ),
          ],
        );
      },
    ),
    leading: Container(
      margin: EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.grey.withOpacity(0.5),
        shape: BoxShape.circle,
      ),
      child: IconButton(
        icon: Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Navigator.of(context).pop(),
      ),
    ),
  );
}
  

  Widget _buildTitleAndCategoryCard() {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.all(16),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              mostajadat.title,
              style: GoogleFonts.cairo(
                fontSize: mostajadat.titleFontSize,
                fontWeight: FontWeight.bold,
                color: mostajadat.titleColor,
              ),
              textAlign: mostajadat.titleAlignment,
            ),
            SizedBox(height: 8),
            
          ],
        ),
      ),
    );
  }

  Widget _buildDatesCard() {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildDateRow(Icons.calendar_today, 'ØªØ§Ø±ÙŠØ® Ø§Ù„Ù†Ø´Ø±:', mostajadat.date),
            if (mostajadat.deadlineDate != null)
              _buildDateRow(Icons.event, 'ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡:', mostajadat.deadlineDate!, isDeadline: true),
          ],
        ),
      ),
    );
  }

  Widget _buildDateRow(IconData icon, String label, DateTime date, {bool isDeadline = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Icon(icon, color: isDeadline ? Colors.red : mostajadat.dateColor),
          SizedBox(width: 8),
          Text(
            '$label ${DateFormat('dd/MM/yyyy').format(date)}',
            style: GoogleFonts.cairo(
              fontSize: mostajadat.dateFontSize,
              color: isDeadline ? Colors.red : mostajadat.dateColor,
              fontWeight: isDeadline ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ],
      ),
    );
  }

Widget _buildContentSection() {
  return Card(
    color: Color(0xFFFFFFFF),
    margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
    elevation: 0,
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    child: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: mostajadat.contentBlocks.map((block) {
          if (block is TextBlock) {
            if (block.text.trim().startsWith('-')) {
              List<String> lines = block.text.trim().split('\n');
              return Container(
                width: double.infinity,
                margin: EdgeInsets.only(bottom: 8),
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[200],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: lines.map((line) {
                    line = line.trim().startsWith('-') ? line.trim().substring(1).trim() : line.trim();
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'â€¢',
                            style: TextStyle(
                              fontSize: block.textStyle.fontSize,
                              color: Colors.black,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(width: 4),
                          Expanded(
                            child: Text(
                              line,
                              style: block.textStyle,
                            ),
                          ),
                        ],
                      ),
                    );
                  }).toList(),
                ),
              );
            } else {
              return Padding(
                padding: EdgeInsets.only(bottom: 8),
                child: Text(block.text, style: block.textStyle, textAlign: block.alignment),
              );
            }
          } else if (block is ImageBlock) {
            return block.imageUrl != null
                ? Image.network(block.imageUrl!, width: double.infinity, fit: BoxFit.cover)
                : SizedBox.shrink();
          } else if (block is CodeBlock) {
            return Container(
              margin: EdgeInsets.symmetric(vertical: 8),
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(4),
              ),
              child: Text(
                block.text,
                style: TextStyle(fontFamily: 'Courier'),
              ),
            );
          } else if (block is BlockquoteBlock) {
            return Container(
              margin: EdgeInsets.symmetric(vertical: 8),
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                border: Border(left: BorderSide(color: Colors.grey, width: 4)),
              ),
              child: Text(
                block.text,
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            );
          } else {
            return SizedBox.shrink();
          }
        }).toList(),
      ),
    ),
  );
}
  List<String> _processText(String text) {
    // Remove any leading dash and trim
    text = text.trim().startsWith('-') ? text.substring(1).trim() : text.trim();
    
    // Split the text into sentences
    List<String> sentences = text.split(RegExp(r'(?<=[.!?])\s+'));
    
    // Process each sentence
    return sentences.map((sentence) {
      // If the sentence doesn't end with a period, exclamation mark, or question mark, add a period
      if (!sentence.endsWith('.') && !sentence.endsWith('!') && !sentence.endsWith('?')) {
        sentence += '.';
      }
      // Capitalize the first letter of each sentence
      return sentence.length > 0 ? sentence[0].toUpperCase() + sentence.substring(1) : sentence;
    }).toList();
  }





  Widget _buildButtonLinksCard(BuildContext context) {
    if (mostajadat.buttonLinks.isEmpty) return SizedBox.shrink();

    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: mostajadat.buttonLinks.map((buttonLink) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: ElevatedButton(
                onPressed: () => _launchURL(context, buttonLink.url),
                child: Text(
                  buttonLink.text,
                  style: GoogleFonts.cairo(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Theme.of(context).primaryColor,
                  padding: EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }

  void _launchURL(BuildContext context, String url) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WebViewScreen(url: url),
      ),
    );
  }


   void _showModernImageView(BuildContext context, String imageUrl, String linkUrl) {
    Navigator.of(context).push(
      PageRouteBuilder(
        opaque: false,
        pageBuilder: (BuildContext context, _, __) {
          return ModernImageView(imageUrl: imageUrl, linkUrl: linkUrl);
        },
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(opacity: animation, child: child);
        },
      ),
    );
  }

  Widget _buildIconLinksCard(BuildContext context) {
    if (mostajadat.iconLinks.isEmpty) return SizedBox.shrink();

    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              'Ø±ÙˆØ§Ø¨Ø· Ø¥Ø¶Ø§ÙÙŠØ©',
              style: GoogleFonts.cairo(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).primaryColor,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 16),
            GridView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.8,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: mostajadat.iconLinks.length,
              itemBuilder: (context, index) {
                final iconLink = mostajadat.iconLinks[index];
                return Hero(
                  tag: 'icon-${iconLink.iconUrl}',
                  child: Material(
                    color: Colors.transparent,
                    child: InkWell(
                      onTap: () => _showModernImageView(context, iconLink.iconUrl, iconLink.url),
                      child: Card(
                        elevation: 4,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Expanded(
                              child: Container(
                                decoration: BoxDecoration(
                                  color: Colors.grey[200],
                                  borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                                ),
                                child: iconLink.iconUrl.isNotEmpty
                                    ? ClipRRect(
                                        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
                                        child: Image.network(
                                          iconLink.iconUrl,
                                          fit: BoxFit.cover,
                                          width: double.infinity,
                                          height: double.infinity,
                                        ),
                                      )
                                    : Icon(Icons.broken_image, size: 80, color: Theme.of(context).primaryColor),
                              ),
                            ),
                            Container(
                              padding: EdgeInsets.symmetric(vertical: 10, horizontal: 12),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.vertical(bottom: Radius.circular(20)),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.05),
                                    blurRadius: 4,
                                    offset: Offset(0, -2),
                                  ),
                                ],
                              ),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.link,
                                    color: Theme.of(context).primaryColor.withOpacity(0.7),
                                    size: 16,
                                  ),
                                  SizedBox(width: 6),
                                  Flexible(
                                    child: Text(
                                      _formatUrl(iconLink.url),
                                      style: GoogleFonts.cairo(
                                        fontSize: 13,
                                        color: Colors.black87,
                                        fontWeight: FontWeight.w500,
                                      ),
                                      textAlign: TextAlign.center,
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  String _formatUrl(String url) {
    Uri uri = Uri.parse(url);
    String host = uri.host;
    if (host.startsWith('www.')) {
      host = host.substring(4);
    }
    return host;
  }



  Widget _buildDownloadCard(BuildContext context) {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _downloadPdf(context),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.download, color: Theme.of(context).primaryColor),
              SizedBox(width: 8),
              Text(
                'ØªØ­Ù…ÙŠÙ„ ÙƒÙ…Ù„Ù PDF',
                style: GoogleFonts.cairo(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildShareCard(BuildContext context) {
    return Card(
      color: Color(0xFFFFFFFF),
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _shareContent(context),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.share, color: Theme.of(context).primaryColor),
              SizedBox(width: 8),
              Text(
                'Ù…Ø´Ø§Ø±ÙƒØ© Ø§Ù„Ù…Ø­ØªÙˆÙ‰',
                style: GoogleFonts.cairo(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).primaryColor,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }


  Future<void> _downloadPdf(BuildContext context) async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text(mostajadat.title, style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)),
              pw.SizedBox(height: 20),
              pw.Text('Ø§Ù„ÙØ¦Ø©: ${mostajadat.category}'),
              pw.Text('ØªØ§Ø±ÙŠØ® Ø§Ù„Ù†Ø´Ø±: ${DateFormat('dd/MM/yyyy').format(mostajadat.date)}'),
              if (mostajadat.deadlineDate != null)
                pw.Text('ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡: ${DateFormat('dd/MM/yyyy').format(mostajadat.deadlineDate!)}'),
              pw.SizedBox(height: 20),
              ...mostajadat.contentBlocks.map((block) {
                if (block is TextBlock) {
                  return pw.Text(block.text);
                } else if (block is ImageBlock) {
                  if (block.imageUrl != null) {
                    return pw.Text('[Image: ${block.imageUrl}]');
                  } else {
                    return pw.SizedBox.shrink();
                  }
                } else if (block is CodeBlock) {
                  return pw.Container(
                    margin: pw.EdgeInsets.symmetric(vertical: 8),
                    padding: pw.EdgeInsets.all(8),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.grey200,
                      borderRadius: pw.BorderRadius.circular(4),
                    ),
                    child: pw.Text(block.text),
                  );
                } else if (block is BlockquoteBlock) {
                  return pw.Container(
                    margin: pw.EdgeInsets.symmetric(vertical: 8),
                    padding: pw.EdgeInsets.all(8),
                    decoration: pw.BoxDecoration(
                      border: pw.Border(left: pw.BorderSide(color: PdfColors.grey, width: 4)),
                    ),
                    child: pw.Text(
                      block.text,
                      style: pw.TextStyle(fontStyle: pw.FontStyle.italic),
                    ),
                  );
                } else {
                  return pw.SizedBox.shrink();
                }
              }).toList(),
              pw.SizedBox(height: 20),
              if (mostajadat.buttonLinks.isNotEmpty) ...[
                pw.Text('Ø±ÙˆØ§Ø¨Ø· Ø¥Ø¶Ø§ÙÙŠØ©:', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold)),
                ...mostajadat.buttonLinks.map((buttonLink) => pw.Text('${buttonLink.text}: ${buttonLink.url}')),
              ],
              if (mostajadat.iconLinks.isNotEmpty) ...[
                pw.SizedBox(height: 10),
                pw.Text('Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª:', style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold)),
                ...mostajadat.iconLinks.map((iconLink) => pw.Text('${iconLink.iconUrl}: ${iconLink.url}')),
              ],
            ],
          );
        },
      ),
    );

    final output = await getTemporaryDirectory();
    final file = File('${output.path}/mostajadat_${mostajadat.id}.pdf');
    await file.writeAsBytes(await pdf.save());

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ØªÙ… ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ù…Ù„Ù Ø¨Ù†Ø¬Ø§Ø­')),
    );

    if (await canLaunch(file.path)) {
      await launch(file.path);
    } else {
      print('Could not launch ${file.path}');
    }
  }

  void _shareContent(BuildContext context) {
    final String content = '''
${mostajadat.title}

Ø§Ù„ÙØ¦Ø©: ${mostajadat.category}
ØªØ§Ø±ÙŠØ® Ø§Ù„Ù†Ø´Ø±: ${DateFormat('dd/MM/yyyy').format(mostajadat.date)}
${mostajadat.deadlineDate != null ? 'ØªØ§Ø±ÙŠØ® Ø§Ù„Ø§Ù†ØªÙ‡Ø§Ø¡: ${DateFormat('dd/MM/yyyy').format(mostajadat.deadlineDate!)}' : ''}

${mostajadat.contentBlocks.map((block) {
      if (block is TextBlock) {
        return block.text;
      } else if (block is ImageBlock) {
        return '[Image: ${block.imageUrl}]';
      } else if (block is CodeBlock) {
        return '```\n${block.text}\n```';
      } else if (block is BlockquoteBlock) {
        return '> ${block.text}';
      } else {
        return '';
      }
    }).join('\n\n')}

${mostajadat.buttonLinks.isNotEmpty ? 'Ø±ÙˆØ§Ø¨Ø· Ø¥Ø¶Ø§ÙÙŠØ©:\n' + mostajadat.buttonLinks.map((link) => '${link.text}: ${link.url}').join('\n') : ''}

${mostajadat.iconLinks.isNotEmpty ? 'Ø±ÙˆØ§Ø¨Ø· Ø§Ù„Ø£ÙŠÙ‚ÙˆÙ†Ø§Øª:\n' + mostajadat.iconLinks.map((link) => '${link.iconUrl}: ${link.url}').join('\n') : ''}
''';

    Share.share(content, subject: mostajadat.title);
  }
}

class ModernImageView extends StatefulWidget {
  final String imageUrl;
  final String linkUrl;

  const ModernImageView({Key? key, required this.imageUrl, required this.linkUrl}) : super(key: key);

  @override
  _ModernImageViewState createState() => _ModernImageViewState();
}

class _ModernImageViewState extends State<ModernImageView> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black.withOpacity(0.9),
      body: GestureDetector(
        onTap: () => Navigator.of(context).pop(),
        child: Stack(
          fit: StackFit.expand,
          children: [
            Hero(
              tag: 'icon-${widget.imageUrl}',
              child: Center(
                child: ScaleTransition(
                  scale: _scaleAnimation,
                  child: Image.network(
                    widget.imageUrl,
                    fit: BoxFit.contain,
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return Center(child: CircularProgressIndicator(color: Colors.white));
                    },
                    errorBuilder: (context, error, stackTrace) {
                      return Icon(Icons.broken_image, size: 100, color: Colors.white);
                    },
                  ),
                ),
              ),
            ),
            Positioned(
              top: 40,
              left: 16,
              child: IconButton(
                icon: Icon(Icons.close, color: Colors.white),
                onPressed: () => Navigator.of(context).pop(),
              ),
            ),
            Positioned(
              bottom: 40,
              left: 0,
              right: 0,
              child: Column(
                children: [
                  ElevatedButton.icon(
                    onPressed: () => _launchURL(context, widget.linkUrl),
                    icon: Icon(Icons.link),
                    label: Text('Ø²ÙŠØ§Ø±Ø© Ø§Ù„Ø±Ø§Ø¨Ø·', style: GoogleFonts.cairo()),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Theme.of(context).primaryColor,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                      padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                    ),
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Ø§Ù†Ù‚Ø± ÙÙŠ Ø£ÙŠ Ù…ÙƒØ§Ù† Ù„Ù„Ø¥ØºÙ„Ø§Ù‚',
                    style: GoogleFonts.cairo(color: Colors.white70, fontSize: 14),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _launchURL(BuildContext context, String url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Could not launch $url')),
      );
    }
  }
}



    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\mostajadat_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/models/institution_model.dart';
import 'package:taleb_edu_platform/providers/mostajadat_provider.dart';
import 'package:taleb_edu_platform/screens/mostajadat_details_screen.dart';
import 'package:taleb_edu_platform/screens/admin_dashboard.dart';
import 'package:taleb_edu_platform/screens/institution_details_screen.dart';
import 'package:taleb_edu_platform/services/institution_service.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';

class MostajadatScreen extends ConsumerStatefulWidget {
  const MostajadatScreen({Key? key}) : super(key: key);

  @override
  ConsumerState<MostajadatScreen> createState() => _MostajadatScreenState();
}

class _MostajadatScreenState extends ConsumerState<MostajadatScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  final Map<String, String> categoryMap = {
    'institutions': 'institutions_label',
    'jobs': 'jobs_label',
    'guidance': 'guidance_label',
  };
  final List<String> _categories = [
    'institutions_label',
    'jobs_label',
    'guidance_label',
  ];
  String _searchQuery = '';

  List<Widget> _pathwayStack = [];
  EducationPathway? _selectedPathway;
  Specialization? _selectedSpecialization;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _categories.length, vsync: this);
    _tabController.addListener(() {
      if (!_tabController.indexIsChanging) {
        setState(() {});
      }
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF5F5F5),
      body: NestedScrollView(
        headerSliverBuilder: (context, innerBoxIsScrolled) => [
          _buildSliverAppBar(context),
          SliverToBoxAdapter(child: _buildCategoryTabs()),
        ],
        body: TabBarView(
          controller: _tabController,
          children: _categories.map((translationKey) {
            final category = categoryMap.keys.firstWhere(
                (key) => categoryMap[key] == translationKey);
            return _buildMostajadatList(category);
          }).toList(),
        ),
      ),
    );
  }

  Widget _buildSliverAppBar(BuildContext context) {
    return SliverAppBar(
      floating: true,
      snap: true,
      backgroundColor: Colors.white,
      elevation: 0,
      automaticallyImplyLeading: false,
      expandedHeight: 100,
      flexibleSpace: FlexibleSpaceBar(
        background: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Hero(
                        tag: 'logo',
                        child: Image.asset(
                          'assets/images/my.png',
                          width: 40,
                          height: 40,
                          fit: BoxFit.contain,
                        ),
                      ),
                      const SizedBox(width: 8),
                      Text(
                        'Tawjih',
                        style: GoogleFonts.cairo(
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                          fontSize: 28,
                        ),
                      ),
                    ],
                  ),
                  IconButton(
                    icon: const Icon(Icons.search,
                        color: Colors.black, size: 28),
                    onPressed: () => _showSearchDialog(context),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCategoryTabs() {
    return Container(
      color: Colors.white,
      child: Column(
        children: [
          const SizedBox(height: 10),
          Center(
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: _categories.asMap().entries.map((entry) {
                final index = entry.key;
                final translationKey = entry.value;
                return GestureDetector(
                  onTap: () {
                    setState(() {
                      _tabController.index = index;
                    });
                  },
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 13.0),
                    child: _buildTab(index),
                  ),
                );
              }).toList(),
            ),
          ),
          const SizedBox(height: 10),
        ],
      ),
    );
  }

  Widget _buildTab(int index) {
    final translationKey = _categories[index];
    final isSelected = _tabController.index == index;

    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
      decoration: BoxDecoration(
        color: isSelected ? Colors.blue : Colors.grey[200],
        borderRadius: BorderRadius.circular(50),
      ),
      child: Text(
        translationKey.tr(),
        style: GoogleFonts.cairo(
          fontSize: 16,
          fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
          color: isSelected ? Colors.white : Colors.black54,
        ),
      ),
    );
  }

  Widget _buildMostajadatList(String category) {
    if (category == 'guidance') {
      return _buildInstitutionsTab(context, ref);
    }

    if (category == 'institutions') {
      return ref.watch(mostajadatProvider).when(
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (err, stack) => Center(child: Text('Error: $err')),
        data: (mostajadatList) {
          final filteredList = mostajadatList
              .where((mostajadat) =>
                  mostajadat.category == 'guidance' &&
                  (mostajadat.title.toLowerCase().contains(_searchQuery.toLowerCase()) ||
                      mostajadat.description.toLowerCase().contains(_searchQuery.toLowerCase())))
              .toList();

          return ListView.builder(
            itemCount: filteredList.length,
            itemBuilder: (context, index) {
              final mostajadat = filteredList[index];
              return MostajadatCard(
                mostajadat: mostajadat,
              );
            },
          );
        },
      );
    }


     return ref.watch(mostajadatProvider).when(
      loading: () => const Center(child: CircularProgressIndicator()),
      error: (err, stack) => Center(child: Text('Error: $err')),
      data: (mostajadatList) {
        final filteredList = mostajadatList
            .where((mostajadat) =>
                mostajadat.category == category &&
                (mostajadat.title.toLowerCase().contains(_searchQuery.toLowerCase()) ||
                    mostajadat.description.toLowerCase().contains(_searchQuery.toLowerCase())))
            .toList();

        return ListView.builder(
          itemCount: filteredList.length,
          itemBuilder: (context, index) {
            final mostajadat = filteredList[index];
            return MostajadatCard(
              mostajadat: mostajadat,
            );
          },
        );
      },
    );
  }

  Widget _buildInstitutionsTab(BuildContext context, WidgetRef ref) {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    return WillPopScope(
      onWillPop: () async {
        if (_pathwayStack.length > 1) {
          setState(() {
            _pathwayStack.removeLast();
            if (_pathwayStack.length == 1) {
              _selectedPathway = null;
              _selectedSpecialization = null;
            } else if (_pathwayStack.length == 2) {
              _selectedSpecialization = null;
            }
          });
          return false;
        }
        return true;
      },
      child: pathwaysAsyncValue.when(
        data: (pathways) {
          if (_pathwayStack.isEmpty) {
            _pathwayStack = [_buildPathwaysView(context, ref, pathways)];
          }
          return Stack(
            children: [
              _pathwayStack.lastOrNull ?? Container(),
              if (_pathwayStack.length > 1)
                Positioned(
                  top: 16,
                  left: 16,
                  child: FloatingActionButton(
                    mini: true,
                    child: Icon(Icons.arrow_back),
                    onPressed: () {
                      setState(() {
                        _pathwayStack.removeLast();
                        if (_pathwayStack.length == 1) {
                          _selectedPathway = null;
                          _selectedSpecialization = null;
                        } else if (_pathwayStack.length == 2) {
                          _selectedSpecialization = null;
                        }
                      });
                    },
                  ),
                ),
            ],
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }

  Widget _buildPathwaysView(BuildContext context, WidgetRef ref, List<EducationPathway> pathways) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ù…Ø³Ø§Ø±Ø§Øª Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØ©'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.fromLTRB(16, 16, 16, 80),
              itemCount: pathways.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(                 position: index,
                  duration: const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildPathwayCard(context, ref, pathways[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathwayCard(BuildContext context, WidgetRef ref, EducationPathway pathway) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);
    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedPathway = pathway;
            _pathwayStack.add(_buildSpecializationsView(context, ref, pathway));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                pathway.name,
                style: cairoSemiBold.copyWith(fontSize: 20, color: Colors.black87),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 8),
              Text(
                pathway.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.library_books, color: Colors.blue.shade600),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '${pathway.specializations.length} ØªØ®ØµØµØ§Øª',
                      style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.blue.shade600),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSpecializationsView(BuildContext context, WidgetRef ref, EducationPathway pathway) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('ØªØ®ØµØµØ§Øª ${pathway.name}'),
        Expanded(
          child: AnimationLimiter(
            child: ListView.builder(
              padding: EdgeInsets.all(16),
              itemCount: pathway.specializations.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredList(
                  position: index,
                  duration:                 const Duration(milliseconds: 375),
                  child: SlideAnimation(
                    verticalOffset: 50.0,
                    child: FadeInAnimation(
                      child: _buildSpecializationCard(context, pathway.specializations[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSpecializationCard(BuildContext context, Specialization specialization) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedSpecialization = specialization;
            _pathwayStack.add(_buildUniversitiesView(specialization));
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                specialization.name,
                style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
              ),
              SizedBox(height: 8),
              Text(
                specialization.description,
                style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Icon(Icons.school, color: Colors.green.shade600),
                  SizedBox(width: 8),
                  Text(
                    '${specialization.universities.length} Ø¬Ø§Ù…Ø¹Ø§Øª',
                    style: cairoSemiBold.copyWith(fontSize: 14, color: Colors.green.shade600),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildUniversitiesView(Specialization specialization) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        _buildSectionHeader('Ø§Ù„Ø¬Ø§Ù…Ø¹Ø§Øª Ù„ØªØ®ØµØµ ${specialization.name}'),
        Expanded(
          child: AnimationLimiter(
            child: GridView.builder(
              padding: EdgeInsets.all(16),
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 0.75,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: specialization.universities.length,
              itemBuilder: (context, index) {
                return AnimationConfiguration.staggeredGrid(
                  position: index,
                  duration: const Duration(milliseconds: 375),
                  columnCount: 2,
                  child: ScaleAnimation(
                    child: FadeInAnimation(
                      child: _buildUniversityCard(specialization.universities[index]),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildUniversityCard(University university) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

    return Card(
      elevation: 0,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      color: Colors.white,
      child: InkWell(
        onTap: () {
          // Handle university tap
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Expanded(
              flex: 3,
              child: ClipRRect(
                borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
                child: university.imageUrl.isNotEmpty
                    ? Image.network(
                  university.imageUrl,
                  fit: BoxFit.cover,
                  loadingBuilder: (context, child, loadingProgress) {
                    if (loadingProgress == null) return child;
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  },
                )
                    : Container(
                  color: Colors.grey[300],
                  child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
                ),
              ),
            ),
            Expanded(
              flex: 2,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      university.name,
                      style: cairoSemiBold.copyWith(fontSize: 16, color: Colors.black87),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    Spacer(),
                    Row(
                      children: [
                        Icon(Icons.link, size: 16, color: Colors.blue.shade600),
                        SizedBox(width: 4),
                        Expanded(
                          child: Text(
                            university.website,
                            style: cairoRegular.copyWith(fontSize: 12, color: Colors.blue.shade600),
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);
    return Container(
      padding: EdgeInsets.fromLTRB(16, 24, 16, 8),
      alignment: Alignment.centerRight,
      child: Text(
        title,
        style: cairoBold.copyWith(
          fontSize: 24,
          color: Colors.blue.shade800,
          letterSpacing: 0.5,
        ),
        textAlign: TextAlign.right,
      ),
    );
  }

  void _showEditMostajadatDialog(BuildContext context, Mostajadat mostajadat) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => AdminDashboardScreen(),
      ),
    );
  }

  void _showSearchDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('search'.tr(), style: GoogleFonts.cairo()),
        content: TextField(
          decoration: InputDecoration(
            hintText: 'enter_search_term'.tr(),
            hintStyle: GoogleFonts.cairo(),
          ),
          onChanged: (value) {
            setState(() {
              _searchQuery = value;
            });
          },
        ),
        actions: [
          TextButton(
            child: Text('cancel'.tr(), style: GoogleFonts.cairo()),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          TextButton(
            child: Text('search'.tr(), style: GoogleFonts.cairo()),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}


class MostajadatCard extends StatelessWidget {
  final Mostajadat mostajadat;

  const MostajadatCard({Key? key, required this.mostajadat}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final dateFormat = DateFormat('dd/MM/yyyy');
    final formattedDeadlineDate = mostajadat.deadlineDate != null
        ? dateFormat.format(mostajadat.deadlineDate!)
        : 'ØºÙŠØ± Ù…Ø­Ø¯Ø¯';

    Color getHeaderColor(String type) {
      switch (type.toLowerCase()) {
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§':
          return Colors.orange;
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§+1':
          return Colors.blue[700]!;
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§+2':
          return Colors.green[600]!;
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§+3':
          return Colors.purple[600]!;
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§+4':
          return Colors.red[600]!;
        case 'Ø¨ÙƒØ§Ù„ÙˆØ±ÙŠØ§+5':
          return Colors.teal[600]!;
        case 'Ø£Ø®Ø±Ù‰':
          return Colors.grey[600]!;
        default:
          return Colors.grey[600]!;
      }
    }

    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) =>
                MostajadatDetailsScreen(mostajadat: mostajadat),
          ),
        );
      },
      child: Padding(
        padding:
            const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(10.0),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(35.0),
                      child: Image.network(
                        mostajadat.cardImagePath ?? mostajadat.imageUrl, // Use cardImagePath if available
                        height: 70,
                        width: 70,
                        fit: BoxFit.cover,
                      ),
                    ),
                    Container(
                      padding: EdgeInsets.symmetric(
                          horizontal: 12.0, vertical: 6.0),
                      decoration: BoxDecoration(
                        color: mostajadat.type == 'Ø¯ÙˆÙ†ÙŠ'
                            ? Colors.red
                            : Colors.blue,
                        borderRadius: BorderRadius.circular(20.0),
                      ),
                      child: Text(
                        mostajadat.type,
                        style: GoogleFonts.cairo(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 10),
                Text(
                  mostajadat.title,
                  style: GoogleFonts.cairo(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                    color: Colors.black,
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.calendar_today,
                            size: 16, color: Colors.grey[600]),
                        SizedBox(width: 4),
                        Text(
                          'deadline'.tr() +
                              ': $formattedDeadlineDate',
                          style: GoogleFonts.cairo(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                    ElevatedButton(
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => MostajadatDetailsScreen(
                                mostajadat: mostajadat),
                          ),
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        padding: EdgeInsets.symmetric(
                            horizontal: 16, vertical: 8),
                        textStyle: GoogleFonts.cairo(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                      child: Text('details'.tr()),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


extension ListExtension<T> on List<T> {
  T? get lastOrNull => isNotEmpty ? last : null;
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\notifications_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class UserNotification {
  final String title;
  final String body;
  final DateTime timestamp;
  bool seen;

  UserNotification({
    required this.title,
    required this.body,
    required this.timestamp,
    this.seen = false,
  });

  Map<String, dynamic> toJson() => {
    'title': title,
    'body': body,
    'timestamp': timestamp.toIso8601String(),
    'seen': seen,
  };

  factory UserNotification.fromJson(Map<String, dynamic> json) => UserNotification(
    title: json['title'],
    body: json['body'],
    timestamp: DateTime.parse(json['timestamp']),
    seen: json['seen'] ?? false,
  );
}

class NotificationsScreen extends StatefulWidget {
  @override
  _NotificationsScreenState createState() => _NotificationsScreenState();
}

class _NotificationsScreenState extends State<NotificationsScreen> {
  List<UserNotification> notifications = [];

  @override
  void initState() {
    super.initState();
    _loadNotifications();
  }

  Future<void> _loadNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsJson = prefs.getStringList('notifications') ?? [];
    setState(() {
      notifications = notificationsJson
          .map((json) => UserNotification.fromJson(jsonDecode(json)))
          .toList();
    });
    _markAllAsSeen();
  }

  Future<void> _saveNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsJson = notifications
        .map((notification) => jsonEncode(notification.toJson()))
        .toList();
    await prefs.setStringList('notifications', notificationsJson);
  }

  void addNotification(UserNotification notification) {
    setState(() {
      notifications.insert(0, notification);
    });
    _saveNotifications();
  }

  void _markAllAsSeen() {
    for (var notification in notifications) {
      notification.seen = true;
    }
    _saveNotifications();
  }

  static Future<int> getUnseenNotificationsCount() async {
    final prefs = await SharedPreferences.getInstance();
    final notificationsJson = prefs.getStringList('notifications') ?? [];
    final notifications = notificationsJson
        .map((json) => UserNotification.fromJson(jsonDecode(json)))
        .toList();
    return notifications.where((notification) => !notification.seen).length;
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: Theme.of(context).copyWith(
        textTheme: GoogleFonts.cairoTextTheme(Theme.of(context).textTheme),
      ),
      child: Scaffold(
        backgroundColor: const Color(0xFFF5F5F5),
        appBar: AppBar(
          title: Text(
            'Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±Ø§Øª',
            style: GoogleFonts.cairo(
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
          backgroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
          iconTheme: const IconThemeData(color: Colors.black),
        ),
        body: notifications.isEmpty
            ? Center(
                child: Text(
                  'Ù„Ø§ ØªÙˆØ¬Ø¯ Ø¥Ø´Ø¹Ø§Ø±Ø§Øª',
                  style: GoogleFonts.cairo(fontSize: 18, color: Colors.grey),
                ),
              )
            : ListView.builder(
                itemCount: notifications.length,
                itemBuilder: (context, index) {
                  final notification = notifications[index];
                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(16),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 10,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: ListTile(
                        contentPadding: EdgeInsets.all(16),
                        title: Text(
                          notification.title,
                          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
                        ),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            SizedBox(height: 8),
                            Text(
                              notification.body,
                              style: GoogleFonts.cairo(),
                            ),
                            SizedBox(height: 8),
                            Text(
                              DateFormat.yMMMd().add_jm().format(notification.timestamp),
                              style: GoogleFonts.cairo(fontSize: 12, color: Colors.grey),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\profile_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:taleb_edu_platform/providers/auth_provider.dart';
import 'dart:io';
import '../models/user_model.dart';
import '../services/auth_service.dart';

class ProfileScreen extends ConsumerStatefulWidget {
  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends ConsumerState<ProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _bioController;
  File? _image;

  // Default cover image URL
  final String defaultCoverUrl = 'https://example.com/default_cover.jpg';

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController();
    _bioController = TextEditingController();
  }

  @override
  void dispose() {
    _nameController.dispose();
    _bioController.dispose();
    super.dispose();
  }

  Future<void> _updateProfile(UserModel user) async {
    if (_formKey.currentState!.validate()) {
      try {
        final authService = ref.read(authServiceProvider);
        
        Map<String, dynamic> updateData = {
          'name': _nameController.text,
          'bio': _bioController.text,
        };

        await authService.updateUserProfile(user.id, updateData, profileImage: _image);
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Profile updated successfully'),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            backgroundColor: Colors.green,
          )
        );
      } catch (e) {
        print('Error updating profile: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to update profile: ${e.toString()}'),
            behavior: SnackBarBehavior.floating,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            backgroundColor: Colors.red,
          )
        );
      }
    }
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
      });
    }
  }

  void _showSupportDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Support',
            style: GoogleFonts.poppins(
              fontWeight: FontWeight.bold,
              color: Colors.blue[800],
            ),
          ),
          content: Text('Need help? Contact our support team at support@example.com',
            style: GoogleFonts.poppins(),
          ),
          actions: [
            TextButton(
              child: Text('Close',
                style: GoogleFonts.poppins(color: Colors.blue[800]),
              ),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final userAsyncValue = ref.watch(currentUserProvider);

    return Scaffold(
      backgroundColor: Colors.grey[100],
      // Remove the floatingActionButton here
      // floatingActionButton: FloatingActionButton(
      //   onPressed: _showSupportDialog,
      //   child: Icon(Icons.support_agent),
      //   backgroundColor: Colors.blue[800],
      // ),
      body: userAsyncValue.when(
        data: (user) {
          if (user == null) {
            return _buildUserNotFound();
          }

          _nameController.text = user.name;
          _bioController.text = user.bio ?? '';

          return _buildProfileContent(user);
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => _buildErrorContent(error, stack),
      ),
    );
  }

  Widget _buildUserNotFound() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SvgPicture.asset(
            'assets/images/not_found.svg',
            height: 200,
          ),
          SizedBox(height: 20),
          Text(
            'User data not found',
            style: GoogleFonts.poppins(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.blue[800],
            ),
          ),
          SizedBox(height: 20),
          ElevatedButton.icon(
            onPressed: () async {
              await ref.refresh(currentUserProvider);
            },
            icon: Icon(Icons.refresh),
            label: Text('Refresh'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue[800],
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileContent(UserModel user) {
    return CustomScrollView(
      slivers: [
        SliverAppBar(
          expandedHeight: 200.0,
          floating: false,
          pinned: true,
          flexibleSpace: FlexibleSpaceBar(
            title: Text(user.name,
              style: GoogleFonts.poppins(
                fontWeight: FontWeight.bold,
                color: Colors.white,
                shadows: [Shadow(color: Colors.black45, blurRadius: 2)],
              ),
            ),
            background: Stack(
              fit: StackFit.expand,
              children: [
                Image.network(
                  user.photoUrl ?? defaultCoverUrl,
                  fit: BoxFit.cover,
                ),
                DecoratedBox(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [Colors.transparent, Colors.black.withOpacity(0.7)],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
        SliverToBoxAdapter(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildProfileHeader(user),
                SizedBox(height: 24),
                _buildProfileForm(user),
              
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildProfileHeader(UserModel user) {
    return Row(
      children: [
        GestureDetector(
          onTap: _pickImage,
          child: Stack(
            children: [
              CircleAvatar(
                radius: 50,
                backgroundImage: _image != null
                    ? FileImage(_image!)
                    : (user.photoUrl != null
                        ? NetworkImage(user.photoUrl!)
                        : null) as ImageProvider?,
                child: _image == null && user.photoUrl == null
                    ? Icon(Icons.person, size: 50, color: Colors.white)
                    : null,
              ),
              Positioned(
                bottom: 0,
                right: 0,
                child: Container(
                  padding: EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    color: Colors.blue[800],
                    shape: BoxShape.circle,
                  ),
                  child: Icon(Icons.camera_alt, color: Colors.white, size: 20),
                ),
              ),
            ],
          ),
        ),
        SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                user.name,
                style: GoogleFonts.poppins(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue[800],
                ),
              ),
              Text(
                user.email,
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildProfileForm(UserModel user) {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Edit Profile',
            style: GoogleFonts.poppins(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.blue[800],
            ),
          ),
          SizedBox(height: 16),
          _buildTextField(
            controller: _nameController,
            labelText: 'Name',
            icon: Icons.person_outline,
          ),
          SizedBox(height: 16),
          _buildTextField(
            controller: _bioController,
            labelText: 'Bio',
            icon: Icons.description_outlined,
            maxLines: 3,
          ),
          SizedBox(height: 24),
          Center(
            child: ElevatedButton.icon(
              onPressed: () => _updateProfile(user),
              icon: Icon(Icons.save),
              label: Text(
                'Update Profile',
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue[800],
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 12),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorContent(Object error, StackTrace stack) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, size: 64, color: Colors.red),
          SizedBox(height: 16),
          Text(
            'Oops! Something went wrong',
            style: GoogleFonts.poppins(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.red,
            ),
          ),
          SizedBox(height: 8),
          Text(
            'Error loading profile: $error',
            style: GoogleFonts.poppins(color: Colors.grey[600]),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String labelText,
    required IconData icon,
    int maxLines = 1,
  }) {
    return TextFormField(
      controller: controller,
      maxLines: maxLines,
      style: GoogleFonts.poppins(color: Colors.blue[800]),
      decoration: InputDecoration(
        labelText: labelText,
        labelStyle: GoogleFonts.poppins(color: Colors.blue[600]),
        prefixIcon: Icon(icon, color: Colors.blue[600]),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: BorderSide(color: Colors.blue[200]!),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(15),
          borderSide: BorderSide(color: Colors.blue[800]!),
        ),
        filled: true,
        fillColor: Colors.blue[50],
      ),
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'This field is required';
        }
        return null;
      },
    );
  }

  Widget _buildInterestChip(String interest) {
    return Chip(
      label: Text(
        interest,
        style: GoogleFonts.poppins(color: Colors.white),
      ),
      backgroundColor: Colors.blue[800],
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\school_detail_screen.dart
// File: lib/screens/school_detail_screen.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/models/school_model.dart';

class SchoolDetailScreen extends StatelessWidget {
  final School school;

  const SchoolDetailScreen({Key? key, required this.school}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          _buildSliverAppBar(),
          SliverToBoxAdapter(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildSchoolInfo(),
                  SizedBox(height: 24),
                  _buildSectionTitle('programs'.tr()),
                  _buildProgramsList(),
                  SizedBox(height: 24),
                  _buildSectionTitle('admission_requirements'.tr()),
                  _buildAdmissionRequirements(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSliverAppBar() {
    return SliverAppBar(
      expandedHeight: 200.0,
      floating: false,
      pinned: true,
      flexibleSpace: FlexibleSpaceBar(
        title: Text(school.name),
        background: school.imageUrl != null
            ? Image.network(
                school.imageUrl!,
                fit: BoxFit.cover,
              )
            : Container(
                color: Colors.grey[300],
                child: Icon(Icons.school, size: 80, color: Colors.white),
              ),
      ),
    );
  }

  Widget _buildSchoolInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          school.name,
          style: GoogleFonts.poppins(
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        SizedBox(height: 8),
        Text(
          school.description,
          style: GoogleFonts.poppins(
            fontSize: 16,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Text(
        title,
        style: GoogleFonts.poppins(
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget _buildProgramsList() {
    return ListView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      itemCount: school.programs.length,
      itemBuilder: (context, index) {
        return ListTile(
          leading: Icon(Icons.school),
          title: Text(
            school.programs[index],
            style: GoogleFonts.poppins(fontSize: 16),
          ),
        );
      },
    );
  }

  Widget _buildAdmissionRequirements() {
    return ListView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      itemCount: school.admissionRequirements.length,
      itemBuilder: (context, index) {
        final requirement = school.admissionRequirements.entries.elementAt(index);
        return ListTile(
          leading: Icon(Icons.check_circle_outline),
          title: Text(
            requirement.key,
            style: GoogleFonts.poppins(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          subtitle: Text(
            requirement.value.toString(),
            style: GoogleFonts.poppins(fontSize: 14),
          ),
        );
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\signin_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/providers/auth_provider.dart';
import 'package:taleb_edu_platform/screens/home_screen.dart';
import 'package:taleb_edu_platform/services/auth_service.dart';
import 'package:taleb_edu_platform/widgets/glassmorphic_container.dart';
import 'package:taleb_edu_platform/widgets/animated_gradient_background.dart';
import 'package:flutter_svg/flutter_svg.dart';

class SignInScreen extends ConsumerStatefulWidget {
  @override
  _SignInScreenState createState() => _SignInScreenState();
}

class _SignInScreenState extends ConsumerState<SignInScreen> with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _emailController;
  late TextEditingController _passwordController;
  bool _isLoading = false;
  bool _isPasswordVisible = false;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1500),
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _animationController.forward();
    
    _emailController = TextEditingController();
    _passwordController = TextEditingController();
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _signIn() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      try {
        final authService = ref.read(authServiceProvider);
        await authService.signInWithEmailAndPassword(
          _emailController.text.trim(),
          _passwordController.text.trim(),
        );
        context.go('/home');
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø¯Ø®ÙˆÙ„: ${e.toString()}'),
            backgroundColor: Colors.red.shade300,
          ),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  void _navigateToHome(BuildContext context) {
    Navigator.of(context).push(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => HomeScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: child,
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        body: Stack(
          children: [
            AnimatedGradientBackground(controller: _animationController),
            SafeArea(
              child: SingleChildScrollView(
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 24.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      _buildWelcomeText(),
                      SizedBox(height: 40),
                      _buildSignInForm(),
                      SizedBox(height: 24),
                      _buildSignUpPrompt(),
                      SizedBox(height: 16),
                      _buildSkipButton(context),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWelcomeText() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(height: 40),
          Text(
            'Ù…Ø±Ø­Ø¨Ù‹Ø§ Ø¨Ùƒ',
            style: GoogleFonts.cairo(
              fontSize: 36,
              fontWeight: FontWeight.bold,
              color: Colors.white,
              shadows: [
                Shadow(
                  blurRadius: 10.0,
                  color: Colors.black.withOpacity(0.3),
                  offset: Offset(0, 5),
                ),
              ],
            ),
          ),
          SizedBox(height: 8),
          Text(
            'Ø§Ø³ØªÙ‚Ø¯ Ù…Ù† Ø¬Ø¯ÙŠØ¯ Ù„Ù…Ø´Ø§Ù‡Ø¯Ø© Ù…Ø§ ÙŠØ«ÙŠØ± Ø§Ù‡ØªÙ…Ø§Ù…Ùƒ',
            style: GoogleFonts.cairo(
              fontSize: 18,
              color: Colors.white.withOpacity(0.8),
              shadows: [
                Shadow(
                  blurRadius: 5.0,
                  color: Colors.black.withOpacity(0.2),
                  offset: Offset(0, 2),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSignInForm() {
    return GlassmorphicContainer(
      borderRadius: 30,
      blur: 10,
      padding: EdgeInsets.all(30),
      alignment: Alignment.bottomCenter,
      gradient: LinearGradient(
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
        colors: [
          Color(0xFFffffff).withOpacity(0.2),
          Color(0xFFFFFFFF).withOpacity(0.1),
        ],
        stops: [0.1, 1],
      ),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildTextField(
              controller: _emailController,
              hintText: 'Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ',
              prefixIcon: Icons.email_outlined,
              keyboardType: TextInputType.emailAddress,
            ),
            SizedBox(height: 20),
            _buildTextField(
              controller: _passwordController,
              hintText: 'ÙƒÙ„Ù…Ø© Ø§Ù„Ù…Ø±ÙˆØ±',
              prefixIcon: Icons.lock_outline,
              obscureText: !_isPasswordVisible,
              suffixIcon: IconButton(
                icon: Icon(
                  _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                  color: Colors.white70,
                ),
                onPressed: () {
                  setState(() => _isPasswordVisible = !_isPasswordVisible);
                },
              ),
            ),
            SizedBox(height: 30),
            _buildSignInButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData prefixIcon,
    TextInputType? keyboardType,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return TextFormField(
      controller: controller,
      style: GoogleFonts.cairo(color: Colors.white, fontSize: 16),
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: GoogleFonts.cairo(color: Colors.white60, fontSize: 16),
        prefixIcon: Icon(prefixIcon, color: Colors.white70),
        suffixIcon: suffixIcon,
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
        contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide(color: Colors.white, width: 2),
        ),
      ),
      textAlign: TextAlign.right,
      textDirection: TextDirection.rtl,
      keyboardType: keyboardType,
      obscureText: obscureText,
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Ù‡Ø°Ø§ Ø§Ù„Ø­Ù‚Ù„ Ù…Ø·Ù„ÙˆØ¨';
        }
        return null;
      },
    );
  }

  Widget _buildSignInButton() {
    return Container(
      height: 60,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        gradient: LinearGradient(
          colors: [Color(0xFFFF9966), Color(0xFFFF5E62)],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        boxShadow: [
          BoxShadow(
            color: Color(0xFFFF5E62).withOpacity(0.5),
            spreadRadius: 1,
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: ElevatedButton(
        onPressed: _isLoading ? null : _signIn,
        child: _isLoading
            ? CircularProgressIndicator(color: Colors.white)
            : Text(
                'ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø¯Ø®ÙˆÙ„',
                style: GoogleFonts.cairo(fontSize: 18, fontWeight: FontWeight.bold),
              ),
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: Colors.transparent,
          disabledForegroundColor: Colors.white.withOpacity(0.38),
          disabledBackgroundColor: Colors.transparent,
          shadowColor: Colors.transparent,
          elevation: 0,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
        ),
      ),
    );
  }

  Widget _buildSignUpPrompt() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Ù„Ø§ ØªÙ…Ù„Ùƒ Ø­Ø³Ø§Ø¨ØŸ',
          style: GoogleFonts.cairo(color: Colors.white70, fontSize: 16),
        ),
        TextButton(
          onPressed: () => context.push('/signup'),
          child: Text(
            'Ø¥Ù†Ø´Ø§Ø¡ Ø­Ø³Ø§Ø¨',
            style: GoogleFonts.cairo(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSkipButton(BuildContext context) {
    return Container(
      height: 60,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        border: Border.all(color: Colors.white.withOpacity(0.5), width: 2),
      ),
      child: TextButton(
        onPressed: () => _navigateToHome(context),
        style: TextButton.styleFrom(
          foregroundColor: Colors.white,
          padding: EdgeInsets.symmetric(horizontal: 20),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30),
          ),
        ),
        child: Text(
          'ØªØ®Ø·ÙŠ',
          style: GoogleFonts.cairo(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 18,
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\signup_screen.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:taleb_edu_platform/providers/auth_provider.dart';
import 'package:taleb_edu_platform/services/auth_service.dart';
import 'package:taleb_edu_platform/widgets/glassmorphic_container.dart';
import 'package:taleb_edu_platform/widgets/animated_gradient_background.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:rive/rive.dart' hide LinearGradient;

class SignUpScreen extends ConsumerStatefulWidget {
  @override
  _SignUpScreenState createState() => _SignUpScreenState();
}

class _SignUpScreenState extends ConsumerState<SignUpScreen> with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _usernameController;
  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _passwordController;
  late TextEditingController _confirmPasswordController;
  late TextEditingController _regionPointController;
  late TextEditingController _nationalPointController;
  String? _selectedGender;
  String? _selectedBranch;
  File? _profileImage;
  final List<String> _genders = ['Ø°ÙƒØ±', 'Ø£Ù†Ø«Ù‰'];
  final List<String> _branches = [
    'Ø§Ù„Ø¹Ù„ÙˆÙ… Ø§Ù„ØªØ¬Ø±ÙŠØ¨ÙŠØ©',
    'Ø§Ù„Ø¹Ù„ÙˆÙ… Ø§Ù„Ø±ÙŠØ§Ø¶ÙŠØ©',
    'Ø§Ù„Ø¢Ø¯Ø§Ø¨ ÙˆØ§Ù„Ø¹Ù„ÙˆÙ… Ø§Ù„Ø¥Ù†Ø³Ø§Ù†ÙŠØ©',
    'Ø§Ù„ØªØ³ÙŠÙŠØ± ÙˆØ§Ù„ØªØ³ÙˆÙŠÙ‚',
    'Ø§Ù„ØªÙƒÙ†ÙˆÙ„ÙˆØ¬ÙŠØ§',
    'Ø§Ù„Ù„ØºØ§Øª Ø§Ù„Ø£Ø¬Ù†Ø¨ÙŠØ©',
    'Ø§Ù„ØªØ¹Ù„ÙŠÙ… Ø§Ù„Ø£ØµÙ„ÙŠ',
    'ØºÙŠØ± Ø°Ù„Ùƒ',
  ];

  bool _isLoading = false;
  bool _isPasswordVisible = false;
  bool _isConfirmPasswordVisible = false;
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 1000),
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _animationController.forward();

    _usernameController = TextEditingController();
    _nameController = TextEditingController();
    _emailController = TextEditingController();
    _passwordController = TextEditingController();
    _confirmPasswordController = TextEditingController();
    _regionPointController = TextEditingController();
    _nationalPointController = TextEditingController();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _regionPointController.dispose();
    _nationalPointController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _profileImage = File(pickedFile.path);
      });
    }
  }

  Future<void> _signUp() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      try {
        print("Attempting to sign up");
        final authService = ref.read(authServiceProvider);
        await authService.createUserWithEmailAndPassword(
          _emailController.text.trim(),
          _passwordController.text.trim(),
          _usernameController.text.trim(),
          additionalInfo: {
            'name': _nameController.text.trim(),
            'gender': _selectedGender,
            'branch': _selectedBranch,
            'regionPoint': _regionPointController.text,
            'nationalPoint': _nationalPointController.text,
          },
          profileImage: _profileImage,
        );
        print("Sign up successful, navigating to home");
        context.go('/home');
      } catch (e) {
        print('Error in _signUp method: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Ã™Ã˜Â´Ã™â€ž Ã˜Â§Ã™â€žÃ˜ÂªÃ˜Â³Ã˜Â¬Ã™Å Ã™â€ž: ${e.toString()}')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.rtl,
      child: Scaffold(
        body: Stack(
          children: [
            AnimatedGradientBackground(controller: _animationController),
            SafeArea(
              child: SingleChildScrollView(
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 24.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      _buildLogo(),
                      SizedBox(height: 20),
                      _buildWelcomeText(),
                      SizedBox(height: 40),
                      _buildSignUpForm(),
                      SizedBox(height: 24),
                      _buildSignInPrompt(),
                      SizedBox(height: 40),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLogo() {
    return Hero(
      tag: 'app_logo',
      child: Container(
        height: 120,
        width: 120,
        child: RiveAnimation.asset(
          'assets/animations/taleb_logo.riv',
          fit: BoxFit.contain,
        ),
      ),
    );
  }

  Widget _buildWelcomeText() {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Ø¥Ù†Ø´Ø§Ø¡ Ø­Ø³Ø§Ø¨',
            style: GoogleFonts.cairo(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 8),
          Text(
            'Ù‚Ù… Ø¨Ø§Ù„ØªØ³Ø¬ÙŠÙ„ Ù„Ø¨Ø¯Ø¡ Ø±Ø­Ù„ØªÙƒ Ø§Ù„ØªØ¹Ù„ÙŠÙ…ÙŠØ©',
            style: GoogleFonts.cairo(
              fontSize: 16,
              color: Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSignUpForm() {
    return GlassmorphicContainer(
      borderRadius: 20,
      blur: 20,
      padding: EdgeInsets.all(24),
      alignment: Alignment.bottomCenter,
      gradient: LinearGradient(
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
        colors: [
          Color(0xFFffffff).withOpacity(0.1),
          Color(0xFFFFFFFF).withOpacity(0.05),
        ],
        stops: [0.1, 1],
      ),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildProfileImagePicker(),
            SizedBox(height: 16),
            _buildTextField(
              controller: _usernameController,
              hintText: 'Ø§Ø³Ù… Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…',
              prefixIcon: Icons.person_outline,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _nameController,
              hintText: 'Ø§Ù„Ø§Ø³Ù… Ø§Ù„ÙƒØ§Ù…Ù„',
              prefixIcon: Icons.person,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _emailController,
              hintText: 'Ø§Ù„Ø¨Ø±ÙŠØ¯ Ø§Ù„Ø¥Ù„ÙƒØªØ±ÙˆÙ†ÙŠ',
              prefixIcon: Icons.email_outlined,
              keyboardType: TextInputType.emailAddress,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _regionPointController,
              hintText: 'Ù†Ù‚Ø·Ø© Ø§Ù„Ø¬Ù‡ÙˆÙŠ',
              prefixIcon: Icons.grade_outlined,
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _nationalPointController,
              hintText: 'Ù†Ù‚Ø·Ø© Ø§Ù„ÙˆØ·Ù†ÙŠ',
              prefixIcon: Icons.grade,
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            _buildDropdown(
              value: _selectedGender,
              items: _genders,
              hint: 'Ø§Ù„Ø¬Ù†Ø³',
              onChanged: (value) {
                setState(() {
                  _selectedGender = value;
                });
              },
            ),
            SizedBox(height: 16),
            _buildDropdown(
              value: _selectedBranch,
              items: _branches,
              hint: 'Ø§Ù„Ø´Ø¹Ø¨Ø©',
              onChanged: (value) {
                setState(() {
                  _selectedBranch = value;
                });
              },
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _passwordController,
              hintText: 'ÙƒÙ„Ù…Ø© Ø§Ù„Ù…Ø±ÙˆØ±',
              prefixIcon: Icons.lock_outline,
              obscureText: !_isPasswordVisible,
              suffixIcon: IconButton(
                icon: Icon(
                  _isPasswordVisible ? Icons.visibility : Icons.visibility_off,
                  color: Colors.white70,
                ),
                onPressed: () {
                  setState(() => _isPasswordVisible = !_isPasswordVisible);
                },
              ),
            ),
            SizedBox(height: 16),
            _buildTextField(
              controller: _confirmPasswordController,
              hintText: 'ØªØ£ÙƒÙŠØ¯ ÙƒÙ„Ù…Ø© Ø§Ù„Ù…Ø±ÙˆØ±',
              prefixIcon: Icons.lock_outline,
              obscureText: !_isConfirmPasswordVisible,
              suffixIcon: IconButton(
                icon: Icon(
                  _isConfirmPasswordVisible ? Icons.visibility : Icons.visibility_off,
                  color: Colors.white70,
                ),
                onPressed: () {
                  setState(() => _isConfirmPasswordVisible = !_isConfirmPasswordVisible);
                },
              ),
            ),
            SizedBox(height: 24),
            _buildSignUpButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileImagePicker() {
    return GestureDetector(
      onTap: _pickImage,
      child: CircleAvatar(
        radius: 50,
        backgroundColor: Colors.white.withOpacity(0.3),
        backgroundImage: _profileImage != null ? FileImage(_profileImage!) : null,
        child: _profileImage == null
            ? Icon(Icons.camera_alt, size: 40, color: Colors.white)
            : null,
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData prefixIcon,
    TextInputType? keyboardType,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return TextFormField(
      controller: controller,
      style: GoogleFonts.cairo(color: Colors.white),
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: GoogleFonts.cairo(color: Colors.white60),
        prefixIcon: Icon(prefixIcon, color: Colors.white70),
        suffixIcon: suffixIcon,
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
        contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
      ),
      keyboardType: keyboardType,
      obscureText: obscureText,
      textDirection: TextDirection.rtl,
      validator: (value) {
        if (value == null || value.isEmpty) {
          return 'Ù‡Ø°Ø§ Ø§Ù„Ø­Ù‚Ù„ Ù…Ø·Ù„ÙˆØ¨';
        }
        if (controller == _confirmPasswordController && value != _passwordController.text) {
          return 'ÙƒÙ„Ù…Ø§Øª Ø§Ù„Ù…Ø±ÙˆØ± ØºÙŠØ± Ù…ØªØ·Ø§Ø¨Ù‚Ø©';
        }
        return null;
      },
    );
  }

  Widget _buildDropdown({
    required String? value,
    required List<String> items,
    required String hint,
    required void Function(String?) onChanged,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      items: items.map((item) => DropdownMenuItem(value: item, child: Text(item))).toList(),
      onChanged: onChanged,
      style: GoogleFonts.cairo(color: Colors.white),
      decoration: InputDecoration(
        hintText: hint,
        hintStyle: GoogleFonts.cairo(color: Colors.white60),
        filled: true,
        fillColor: Colors.white.withOpacity(0.1),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: BorderSide.none,
        ),
        contentPadding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
      ),
      dropdownColor: Colors.blue[900],
      validator: (value) => value == null ? 'Ù‡Ø°Ø§ Ø§Ù„Ø­Ù‚Ù„ Ù…Ø·Ù„ÙˆØ¨' : null,
    );
  }

  Widget _buildSignUpButton() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        gradient: LinearGradient(
          colors: [Color(0xFFFF9966), Color(0xFFFF5E62)],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
      ),
      child: ElevatedButton(
        onPressed: _isLoading ? null : _signUp,
        child: _isLoading
            ? CircularProgressIndicator(color: Colors.white)
            : Text('Ø¥Ù†Ø´Ø§Ø¡ Ø­Ø³Ø§Ø¨', style: GoogleFonts.cairo(fontSize: 16, fontWeight: FontWeight.bold)),
        style: ElevatedButton.styleFrom(
          foregroundColor: Colors.white,
          backgroundColor: Colors.transparent,
          disabledForegroundColor: Colors.white.withOpacity(0.38),
          disabledBackgroundColor: Colors.white.withOpacity(0.12),
          shadowColor: Colors.transparent,
          padding: EdgeInsets.symmetric(vertical: 16),
          elevation: 0,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
        ),
      ),
    );
  }

  Widget _buildSignInPrompt() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Ù‡Ù„ Ù„Ø¯ÙŠÙƒ Ø­Ø³Ø§Ø¨ØŸ',
          style: GoogleFonts.cairo(color: Colors.white70),
        ),
        TextButton(
          onPressed: () => context.go('/signin'),
          child: Text(
            'ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø¯Ø®ÙˆÙ„',
            style: GoogleFonts.cairo(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ],
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\specialization_details_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
import 'package:taleb_edu_platform/screens/guidance_screen.dart';
import 'package:url_launcher/url_launcher.dart';

class SpecializationDetailsScreen extends ConsumerWidget {
  final String pathwayId;
  final Specialization specialization;

  const SpecializationDetailsScreen({
    Key? key,
    required this.pathwayId,
    required this.specialization,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final pathwaysAsyncValue = ref.watch(educationPathwayProvider);

    final TextStyle cairoBold = GoogleFonts.cairo(fontWeight: FontWeight.bold);
    final TextStyle cairoSemiBold = GoogleFonts.cairo(fontWeight: FontWeight.w600);
    final TextStyle cairoRegular = GoogleFonts.cairo(fontWeight: FontWeight.normal);

    return Scaffold(
      appBar: AppBar(
        title: Text(specialization.name, style: cairoBold.copyWith(fontSize: 18)),
      ),
      body: pathwaysAsyncValue.when(
        data: (pathways) {
          final selectedPathway = pathways.firstWhere((p) => p.id == pathwayId);
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Display Specialization details
              Container(
                padding: EdgeInsets.all(16),
                color: Theme.of(context).primaryColor.withOpacity(0.1),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      specialization.name,
                      style: cairoSemiBold.copyWith(fontSize: 24, color: Theme.of(context).primaryColor),
                    ),
                    SizedBox(height: 8),
                    Text(
                      specialization.description,
                      style: cairoRegular.copyWith(fontSize: 16),
                    ),
                    SizedBox(height: 16),
                    Row(
                      children: [
                        Icon(Icons.school, color: Theme.of(context).primaryColor),
                        SizedBox(width: 8),
                        Text(
                          '${specialization.universities.length} Universities',
                          style: cairoSemiBold.copyWith(fontSize: 16, color: Theme.of(context).primaryColor),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              SizedBox(height: 16),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Text(
                  'Universities offering ${specialization.name}',
                  style: GoogleFonts.cairo(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              // Display Universities for this Specialization
              Expanded(
                child: AnimationLimiter(
                  child: ListView.builder(
                    padding: EdgeInsets.all(16),
                    itemCount: specialization.universities.length,
                    itemBuilder: (context, index) {
                      return AnimationConfiguration.staggeredList(
                        position: index,
                        duration: const Duration(milliseconds: 375),
                        child: SlideAnimation(
                          verticalOffset: 50.0,
                          child: FadeInAnimation(
                            child: _buildUniversityCard(context, specialization.universities[index], cairoSemiBold, cairoRegular),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ),
              SizedBox(height: 16),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Text(
                  'Other Specializations in ${selectedPathway.name}',
                  style: GoogleFonts.cairo(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              // Display other Specializations within this Pathway
              Expanded(
                child: AnimationLimiter(
                  child: ListView.builder(
                    padding: EdgeInsets.all(16),
                    itemCount: selectedPathway.specializations.length,
                    itemBuilder: (context, index) {
                      final otherSpecialization = selectedPathway.specializations[index];
                      if (otherSpecialization.id != specialization.id) {
                        return AnimationConfiguration.staggeredList(
                          position: index,
                          duration: const Duration(milliseconds: 375),
                          child: SlideAnimation(
                            verticalOffset: 50.0,
                            child: FadeInAnimation(
                              child: ListTile(
                                title: Text(otherSpecialization.name),
                                onTap: () {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => SpecializationDetailsScreen(
                                        pathwayId: selectedPathway.id,
                                        specialization: otherSpecialization,
                                      ),
                                    ),
                                  );
                                },
                              ),
                            ),
                          ),
                        );
                      } else {
                        return SizedBox.shrink(); // Don't show the current specialization
                      }
                    },
                  ),
                ),
              ),
            ],
          );
        },
        loading: () => Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text('Error: $error')),
      ),
    );
  }

  Widget _buildUniversityCard(BuildContext context, University university, TextStyle cairoSemiBold, TextStyle cairoRegular) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => UniversityDetailsScreen(university: university),
            ),
          );
        },
        borderRadius: BorderRadius.circular(15),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.vertical(top: Radius.circular(15)),
              child: university.imageUrl.isNotEmpty
                  ? Image.network(
                university.imageUrl,
                height: 150,
                width: double.infinity,
                fit: BoxFit.cover,
                loadingBuilder: (context, child, loadingProgress) {
                  if (loadingProgress == null) return child;
                  return Container(
                    height: 150,
                    child: Center(child: CircularProgressIndicator()),
                  );
                },
              )
                  : Container(
                height: 150,
                color: Colors.grey[300],
                child: Icon(Icons.school, size: 50, color: Colors.grey[600]),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    university.name,
                    style: cairoSemiBold.copyWith(fontSize: 18, color: Colors.black87),
                  ),
                  SizedBox(height: 8),
                  Text(
                    university.description,
                    style: cairoRegular.copyWith(fontSize: 14, color: Colors.black54),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  SizedBox(height: 16),
                  Row(
                    children: [
                      Icon(Icons.link, size: 16, color: Theme.of(context).primaryColor),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          university.website,
                          style: cairoRegular.copyWith(fontSize: 14, color: Theme.of(context).primaryColor),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showUniversityDetails(BuildContext context, University university, TextStyle cairoSemiBold, TextStyle cairoRegular) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(university.name, style: cairoSemiBold),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (university.imageUrl.isNotEmpty)
                ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.network(
                    university.imageUrl,
                    height: 200,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
              SizedBox(height: 16),
              Text(university.description, style: cairoRegular),
              SizedBox(height: 16),
              Text('Website:', style: cairoSemiBold),
              InkWell(
                onTap: () => _launchURL(context, university.website),
                child: Text(
                  university.website,
                  style: cairoRegular.copyWith(color: Colors.blue, decoration: TextDecoration.underline),
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            child: Text('Close', style: cairoRegular),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  void _launchURL(BuildContext context, String url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Could not launch $url', style: GoogleFonts.cairo())),
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\splash_screen.dart
import 'package:easy_localization/easy_localization.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';

class SplashScreen extends ConsumerStatefulWidget {
  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends ConsumerState<SplashScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation _fadeAnimation;
  late Animation _scaleAnimation;

  @override
  void initState() {
    super.initState();
    print("SplashScreen initState called");
    _checkForInitialMessage();
    _controller = AnimationController(
      duration: Duration(milliseconds: 2000),
      vsync: this,
    );

    _fadeAnimation = Tween(begin: 0.0, end: 1.0).animate(
        CurvedAnimation(parent: _controller, curve: Interval(0.0, 0.5, curve: Curves.easeIn))
    );

    _scaleAnimation = Tween(begin: 0.5, end: 1.0).animate(
        CurvedAnimation(parent: _controller, curve: Interval(0.5, 1.0, curve: Curves.easeOut))
    );

    _controller.forward().then((_) {
      print("Animation completed");
    });
  }

  void _checkForInitialMessage() async {
    RemoteMessage? initialMessage = await FirebaseMessaging.instance.getInitialMessage();
    if (initialMessage != null) {
      // Handle the initial message, e.g., navigate to a specific screen
      print("Initial message received: ${initialMessage.messageId}");
      // You can add logic here to navigate to a specific screen based on the message
    }
    _navigateToLogin();
  }

  void _navigateToLogin() {
    print("Attempting to navigate to login screen");
    Future.delayed(Duration(milliseconds: 500), () {
      print("Navigation delay completed, going to /signin");
      if (mounted) {
        try {
          context.pushReplacement('/signin');
          print("Navigation to /signin successful");
        } catch (e) {
          print("Error navigating to /signin: $e");
        }
      } else {
        print("Widget is not mounted, cannot navigate");
      }
    });
  }

  @override
  void dispose() {
    print("SplashScreen dispose called");
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    print("SplashScreen build called");
    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return Opacity(
              opacity: _fadeAnimation.value,
              child: Transform.scale(
                scale: _scaleAnimation.value,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.school,
                      size: 100,
                      color: Color.fromARGB(255, 5, 29, 58),
                    ),
                    SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Image.asset(
                          'assets/images/my.png',
                          height: 40,
                          fit: BoxFit.contain,
                        ),
                        Text(
                          'Taleb Educational Platform'.tr(),
                          style: GoogleFonts.cairo(
                            fontWeight: FontWeight.bold,
                            color: Colors.black,
                            fontSize: 40,
                          ),
                        ),

                      ],
                    ),
                    SizedBox(height: 10),
                    Text(
                      'Ø£ÙƒØªØ´Ù Ù…Ø³ØªÙ‚Ø¨Ù„ÙƒØŒ Ø­Ù‚Ù‚ Ø·Ù…ÙˆØ­Ø§ØªÙƒ',
                      style: GoogleFonts.cairo(
                        fontSize: 16,
                        color: Colors.black54,
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\subcategory_screen.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/guidance_category_model.dart';
import 'package:taleb_edu_platform/screens/guidance_item_screen.dart';

class SubcategoryScreen extends StatelessWidget {
  final GuidanceCategory category;

  const SubcategoryScreen({Key? key, required this.category}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          category.name,
          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
        ),
      ),
      body: ListView.builder(
        itemCount: category.subcategories.length,
        itemBuilder: (context, index) {
          final subcategory = category.subcategories[index];
          return ExpansionTile(
            title: Text(
              subcategory.name,
              style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
            ),
            children: subcategory.items.map((item) {
              return ListTile(
                title: Text(
                  item.name,
                  style: GoogleFonts.cairo(),
                ),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => GuidanceItemScreen(item: item),
                    ),
                  );
                },
              );
            }).toList(),
          );
        },
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\support_screen.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:connectivity_plus/connectivity_plus.dart';

class SupportScreen extends ConsumerStatefulWidget {
  @override
  _SupportScreenState createState() => _SupportScreenState();
}

class _SupportScreenState extends ConsumerState<SupportScreen> with WidgetsBindingObserver {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  late String _userId;
  StreamSubscription? _messageSubscription;
  StreamSubscription? _connectivitySubscription;
  bool _isOnline = true;
  bool _isTyping = false;
  Timer? _typingTimer;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _userId = FirebaseAuth.instance.currentUser?.uid ?? '';
    _listenForNewMessages();
    _registerDeviceToken();
    _setupConnectivity();
    _messageController.addListener(_onTypingChanged);
  }

  Future<void> _registerDeviceToken() async {

  }

  void _setupConnectivity() {
    _connectivitySubscription = Connectivity().onConnectivityChanged.listen((result) {
      setState(() {
        _isOnline = result != ConnectivityResult.none;
      });
    });
  }

  void _onTypingChanged() {
    if (_messageController.text.isNotEmpty) {
      if (!_isTyping) {
        setState(() => _isTyping = true);
        _firestore.collection('user_states').doc(_userId).set({'isTyping': true});
      }
      _typingTimer?.cancel();
      _typingTimer = Timer(Duration(seconds: 2), () {
        setState(() => _isTyping = false);
        _firestore.collection('user_states').doc(_userId).set({'isTyping': false});
      });
    }
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _messageSubscription?.cancel();
    _connectivitySubscription?.cancel();
    _messageController.removeListener(_onTypingChanged);
    _messageController.dispose();
    _scrollController.dispose();
    _typingTimer?.cancel();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
    }
  }

  void _listenForNewMessages() {
    _messageSubscription = _firestore
        .collection('support_messages')
        .where('userId', isEqualTo: _userId)
        .where('isAdminMessage', isEqualTo: true)
        .where('read', isEqualTo: false)
        .snapshots()
        .listen((snapshot) {
      for (var change in snapshot.docChanges) {
        if (change.type == DocumentChangeType.added) {
          final newMessage = change.doc.data() as Map<String, dynamic>;
          final messageContent = newMessage['content'] as String;
        
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFFF5F5F5),
      appBar: AppBar(
        backgroundColor: Color(0xFF2196F3),
        title: Text(
          'support_chat'.tr(),
          style: GoogleFonts.cairo(
            fontWeight: FontWeight.bold,
            color: Color(0xFFFFFFFF),
          ),
        ),
        centerTitle: true,
        elevation: 0,
        actions: [
          IconButton(
            icon: Icon(_isOnline ? Icons.wifi : Icons.wifi_off),
            onPressed: () => ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(_isOnline ? 'online'.tr() : 'offline'.tr())),
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          if (!_isOnline)
            Container(
              color: Colors.red,
              padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
              child: Text(
                'offline_message'.tr(),
                style: GoogleFonts.cairo(color: Colors.white),
              ),
            ),
          Expanded(
            child: _buildMessageList(),
          ),
          _buildTypingIndicator(),
          _buildMessageInput(),
        ],
      ),
    );
  }

  Widget _buildMessageList() {
    return StreamBuilder<QuerySnapshot>(
      stream: _firestore
          .collection('support_messages')
          .where('userId', isEqualTo: _userId)
          .orderBy('timestamp', descending: true)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('error'.tr() + ': ${snapshot.error}'));
        } else {
          final messages = snapshot.data!.docs;
          WidgetsBinding.instance.addPostFrameCallback((_) => _scrollToBottom());
          return ListView.builder(
            controller: _scrollController,
            reverse: true,
            itemCount: messages.length,
            padding: EdgeInsets.symmetric(vertical: 16),
            itemBuilder: (context, index) {
              final messageData = messages[index].data() as Map<String, dynamic>;
              return _buildMessageBubble(messageData);
            },
          );
        }
      },
    );
  }

  Widget _buildMessageBubble(Map<String, dynamic> messageData) {
    final bool isUserMessage = !messageData['isAdminMessage'];
    final Timestamp? timestamp = messageData['timestamp'] as Timestamp?;
    final messageContent = messageData['content'] ?? '';

    return Align(
      alignment: isUserMessage ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: isUserMessage ? Color(0xFF2196F3) : Color(0xFFE0E0E0),
          borderRadius: isUserMessage
              ? BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                  bottomLeft: Radius.circular(20),
                )
              : BorderRadius.only(
                  topLeft: Radius.circular(20),
                  topRight: Radius.circular(20),
                  bottomRight: Radius.circular(20),
                ),
          boxShadow: [
            BoxShadow(
              color: Color(0x1A000000),
              blurRadius: 4,
              offset: Offset(2, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              messageContent,
              style: GoogleFonts.cairo(
                fontSize: 16,
                color: isUserMessage ? Color(0xFFFFFFFF) : Color(0xFF212121),
              ),
            ),
            SizedBox(height: 4),
            Text(
              timestamp != null
                  ? DateFormat('HH:mm').format(timestamp.toDate())
                  : 'time_not_available'.tr(),
              style: GoogleFonts.cairo(
                fontSize: 12,
                color: isUserMessage ? Color(0xB3FFFFFF) : Color(0xFF757575),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTypingIndicator() {
    return StreamBuilder<DocumentSnapshot>(
      stream: _firestore.collection('user_states').doc('admin').snapshots(),
      builder: (context, snapshot) {
        if (snapshot.hasData && snapshot.data!.exists) {
          final isAdminTyping = snapshot.data!.get('isTyping') ?? false;
          if (isAdminTyping) {
            return Container(
              padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
              child: Text(
                'admin_typing'.tr(),
                style: GoogleFonts.cairo(
                  color: Color(0xFF757575),
                  fontStyle: FontStyle.italic,
                ),
              ),
            );
          }
        }
        return SizedBox.shrink();
      },
    );
  }

  Widget _buildMessageInput() {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Color(0xFFFFFFFF),
        boxShadow: [
          BoxShadow(
            color: Color(0x1A000000),
            blurRadius: 4,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        children: [
          Expanded(
            child: TextField(
              controller: _messageController,
              style: GoogleFonts.cairo(color: Color(0xFF212121)),
              decoration: InputDecoration(
                hintText: 'type_message'.tr(),
                hintStyle: GoogleFonts.cairo(color: Color(0xFF9E9E9E)),
                border: InputBorder.none,
                contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              ),
              onSubmitted: (_) => _sendMessage(),
            ),
          ),
          SizedBox(width: 8),
          IconButton(
            icon: Icon(Icons.send, color: Color(0xFF2196F3)),
            onPressed: _sendMessage,
          ),
        ],
      ),
    );
  }

  void _sendMessage() async {
    if (_messageController.text.trim().isNotEmpty) {
      final newMessage = {
        'content': _messageController.text.trim(),
        'timestamp': FieldValue.serverTimestamp(),
        'isAdminMessage': false,
        'userId': _userId,
        'read': false,
      };

      try {
        await _firestore.collection('support_messages').add(newMessage);
        _messageController.clear();
        Future.delayed(Duration(milliseconds: 100), _scrollToBottom);
      } catch (e) {
        print('Error sending message: $e');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('failed_to_send_message'.tr())),
        );
      }
    }
  }

  void _scrollToBottom() {
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\university_customization_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/education_pathway.dart';
import 'package:taleb_edu_platform/providers/education_pathway_provider.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/screens/web_view_screen.dart';
import 'package:url_launcher/url_launcher.dart';

class UniversityCustomizationScreen extends ConsumerStatefulWidget {
  final University? university;
  final String pathwayId;
  final String specializationId;

  UniversityCustomizationScreen({
    this.university,
    required this.pathwayId,
    required this.specializationId,
  });

  @override
  _UniversityCustomizationScreenState createState() => _UniversityCustomizationScreenState();
}

class _UniversityCustomizationScreenState extends ConsumerState<UniversityCustomizationScreen> {
  late TextEditingController _nameController;
  late TextEditingController _descriptionController;
  late TextEditingController _websiteController;

  String? _headerImageUrl;
  List<ContentBlock> _contentBlocks = [];
  List<ButtonLink> _buttonLinks = [];
  List<IconLink> _iconLinks = [];

  TextSelection _selection = const TextSelection(baseOffset: 0, extentOffset: 0);
  final GlobalKey _textFieldKey = GlobalKey();

  late TextAlign _nameAlignment;
  late TextAlign _descriptionAlignment;
  late TextAlign _websiteAlignment;
  Map<int, TextAlign> _textAlignments = {};

  int _currentBlockIndex = 0;

  double _imageWidth = 200.0;
  double _imageHeight = 200.0;

  Color _nameColor = Colors.black;
  Color _descriptionColor = Colors.black;
  Color _websiteColor = Colors.blue;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.university?.name ?? '');
    _descriptionController = TextEditingController(text: widget.university?.description ?? '');
    _websiteController = TextEditingController(text: widget.university?.website ?? '');
    _headerImageUrl = widget.university?.imageUrl;
    _nameAlignment = TextAlign.center;
    _descriptionAlignment = TextAlign.start;
    _websiteAlignment = TextAlign.start;
    _loadSavedData();
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  Future<void> _loadSavedData() async {
    if (widget.university != null) {
      final docSnapshot = await FirebaseFirestore.instance
          .collection('universities')
          .doc(widget.university!.id)
          .get();

      if (docSnapshot.exists) {
        final data = docSnapshot.data() as Map<String, dynamic>;
        setState(() {
          _nameController.text = data['name'] ?? '';
          _descriptionController.text = data['description'] ?? '';
          _websiteController.text = data['website'] ?? '';
          _headerImageUrl = data['imageUrl'];
          _imageWidth = data['imageWidth'] ?? 200.0;
          _imageHeight = data['imageHeight'] ?? 200.0;
          _contentBlocks = (data['contentBlocks'] as List? ?? [])
              .map((block) => ContentBlock.fromMap(block))
              .toList();
          _buttonLinks = (data['buttonLinks'] as List<dynamic>? ?? [])
              .map((link) => ButtonLink.fromMap(link))
              .toList();
          _iconLinks = (data['iconLinks'] as List<dynamic>? ?? [])
              .map((link) => IconLink.fromMap(link))
              .toList();
          _nameColor = Color(data['nameColor'] ?? Colors.black.value);
          _descriptionColor = Color(data['descriptionColor'] ?? Colors.black.value);
          _websiteColor = Color(data['websiteColor'] ?? Colors.blue.value);
          _nameAlignment = TextAlign.values[data['nameAlignment'] ?? TextAlign.center.index];
          _descriptionAlignment = TextAlign.values[data['descriptionAlignment'] ?? TextAlign.start.index];
          _websiteAlignment = TextAlign.values[data['websiteAlignment'] ?? TextAlign.start.index];
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.university == null ? 'add_university'.tr() : 'edit_university'.tr(), style: GoogleFonts.cairo()),
        actions: [
          IconButton(
            icon: Icon(Icons.save),
            onPressed: _saveUniversity,
          ),
          IconButton(
            icon: Icon(Icons.preview),
            onPressed: _previewUniversity,
          ),
        ],
      ),
      body: Theme(
        data: Theme.of(context).copyWith(
          textTheme: Theme.of(context).textTheme.apply(
            bodyColor: Colors.black,
            displayColor: Colors.black,
          ),
          inputDecorationTheme: InputDecorationTheme(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Theme.of(context).primaryColor),
            ),
            filled: true,
            fillColor: Colors.grey.shade50,
            labelStyle: TextStyle(color: Colors.black),
            hintStyle: TextStyle(color: Colors.grey),
          ),
        ),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      _buildHeaderImageSection(),
                      SizedBox(height: 16),
                      _buildNameSection(),
                      SizedBox(height: 16),
                      _buildDescriptionSection(),
                      SizedBox(height: 16),
                      _buildWebsiteSection(),
                      SizedBox(height: 16),
                     
                    ],
                  ),
                ),
              ),
            ),
            _buildFormatToolbar(),
          ],
        ),
      ),
    );
  }

  Widget _buildFormatToolbar() {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 5,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8.0),
          child: Row(
            children: [
              _buildFormatButton(
                  Icons.format_bold, () => _applyTextStyle(weight: FontWeight.bold)),
              _buildFormatButton(Icons.format_italic,
                  () => _applyTextStyle(fontStyle: FontStyle.italic)),
              _buildFormatButton(Icons.format_underline,
                  () => _applyTextStyle(decoration: TextDecoration.underline)),
              _buildFormatButton(Icons.format_size, _showFontSizeDialog),
              _buildFormatButton(Icons.format_color_text, _showTextColorDialog),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(
                  Icons.format_align_left, () => _applyTextAlign(TextAlign.left)),
              _buildFormatButton(Icons.format_align_center,
                  () => _applyTextAlign(TextAlign.center)),
              _buildFormatButton(
                  Icons.format_align_right, () => _applyTextAlign(TextAlign.right)),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(Icons.format_list_bulleted, _insertBulletList),
              _buildFormatButton(Icons.format_list_numbered, _insertNumberedList),
              _buildFormatButton(Icons.link, _insertLink),
              VerticalDivider(width: 16, thickness: 1, color: Colors.grey[400]),
              _buildFormatButton(Icons.image, _insertImage),
              _buildFormatButton(Icons.code, _addCodeBlock),
              _buildFormatButton(Icons.format_quote, _addBlockquote),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFormatButton(IconData icon, VoidCallback onPressed) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 4),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(8),
          child: Container(
            padding: EdgeInsets.all(8),
            child: Icon(icon, size: 20, color: Colors.grey[800]),
          ),
        ),
      ),
    );
  }

  Widget _buildHeaderImageSection() {
    return GestureDetector(
      onTap: _pickHeaderImage,
      child: Container(
        height: 200,
        decoration: BoxDecoration(
          color: Colors.grey[300],
          image: _headerImageUrl != null
              ? DecorationImage(
                  image: NetworkImage(_headerImageUrl!),
                  fit: BoxFit.cover,
                )
              : null,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: Color.fromARGB(41, 158, 158, 158).withOpacity(0.5),
              spreadRadius: 2,
              blurRadius: 5,
              offset: Offset(0, 3),
            ),
          ],
        ),
        child: _headerImageUrl == null
            ? Center(
                child: Icon(Icons.add_photo_alternate,
                    size: 50, color: Colors.grey[600]),
              )
            : null,
      ),
    );
  }

  Widget _buildNameSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('University Name', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        TextFormField(
          controller: _nameController,
          textAlign: _nameAlignment,
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: _nameColor,
          ),
          decoration: InputDecoration(
            labelText: 'university_name'.tr(),
            alignLabelWithHint: true,
          ),
        ),
      ],
    );
  }

  Widget _buildDescriptionSection() {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text('Description', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
      SizedBox(height: 8),
      Container(
        height: 350, // Increased height
        child: TextFormField(
          controller: _descriptionController,
          textAlign: _descriptionAlignment,
          style: TextStyle(
            color: _descriptionColor,
          ),
          maxLines: null, // Allow unlimited lines
          expands: true, // Make the field expand to fill the container
          textAlignVertical: TextAlignVertical.top, // Align text to the top
          decoration: InputDecoration(
            labelText: 'university_description'.tr(),
            alignLabelWithHint: true,
            contentPadding: EdgeInsets.all(12), // Add some padding
          ),
        ),
      ),
    ],
  );
}
  Widget _buildWebsiteSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Website', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black)),
        SizedBox(height: 8),
        TextFormField(
          controller: _websiteController,
          textAlign: _websiteAlignment,
          style: TextStyle(
            color: _websiteColor,
            decoration: TextDecoration.underline,
          ),
          decoration: InputDecoration(
            labelText: 'university_website'.tr(),
            alignLabelWithHint: true,
          ),
        ),
      ],
    );
  }

  
  Widget _buildContentBlock(ContentBlock block, int index) {
    if (block is TextBlock) {
      return _buildTextBlock(block, index);
    } else if (block is ImageBlock) {
      return _buildImageBlock(block, index);
    } else if (block is CodeBlock) {
      return _buildCodeBlock(block, index);
    } else if (block is BlockquoteBlock) {
      return _buildBlockquoteBlock(block, index);
    }
    return SizedBox.shrink();
  }

  Widget _buildTextBlock(TextBlock block, int index) {
    return Focus(
      onFocusChange: (hasFocus) {
        if (hasFocus) {
          setState(() {
            _currentBlockIndex = index;
          });
        }
      },
      child: Container(
        margin: EdgeInsets.only(bottom: 12),
        child: TextFormField(
          key: index == 0 ? _textFieldKey : null,
          controller: block.controller,
          style: block.textStyle.copyWith(color: Colors.black),
          textAlign: _textAlignments[index] ?? TextAlign.start,
          maxLines: null,
          decoration: InputDecoration(
            contentPadding: EdgeInsets.all(12),
          ),
          onChanged: (text) {
            setState(() {
              block.text = text;
            });
          },
        ),
      ),
    );
  }

  Widget _buildImageBlock(ImageBlock block, int index) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 3,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          if (block.imageUrl != null)
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.network(
                block.imageUrl!,
                fit: BoxFit.cover,
                width: double.infinity,
              ),
            )
          else
            Container(
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Center(
                child: Icon(Icons.image, size: 50, color: Colors.grey[600]),
              ),
            ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
                onPressed: () => _pickImage(index),
              ),
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildCodeBlock(CodeBlock block, int index) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 8),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[200],
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.3),
            spreadRadius: 1,
            blurRadius: 3,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextFormField(
            controller: block.controller,
            maxLines: null,
            style: TextStyle(fontFamily: 'Courier', color: Colors.black),
            decoration: InputDecoration(
              border: InputBorder.none,
              hintText: 'enter_code_here'.tr(),
              hintStyle: TextStyle(color: Colors.grey),
            ),
            onChanged: (newText) {
              setState(() {
                _contentBlocks[index] = CodeBlock(text: newText);
              });
            },
          ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildBlockquoteBlock(BlockquoteBlock block, int index) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 8),
      padding: EdgeInsets.all(12),
      decoration: BoxDecoration(
        border: Border(left: BorderSide(color: Colors.grey, width: 4)),
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          TextFormField(
            controller: block.controller,
            maxLines: null,
            style: TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
            decoration: InputDecoration(
              border: InputBorder.none,
              hintText: 'enter_quote_here'.tr(),
              hintStyle: TextStyle(color: Colors.grey),
            ),
            onChanged: (newText) {
              setState(() {
                _contentBlocks[index] = BlockquoteBlock(text: newText);
              });
            },
          ),
          SizedBox(height: 8),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () => _removeContentBlock(index),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildAddContentButton() {
    return ElevatedButton.icon(
      icon: Icon(Icons.add),
      label: Text('add_content'.tr()),
      onPressed: _showAddContentDialog,
      style: ElevatedButton.styleFrom(
        foregroundColor: Colors.white,
        backgroundColor: Theme.of(context).primaryColor,
        padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }

  void _showAddContentDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('add_content'.tr(), style: TextStyle(color: Colors.black)),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: Icon(Icons.text_fields, color: Theme.of(context).primaryColor),
                title: Text('text'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addTextBlock();
                },
              ),
              ListTile(
                leading: Icon(Icons.image, color: Theme.of(context).primaryColor),
                title: Text('image'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addImage();
                },
              ),
              ListTile(
                leading: Icon(Icons.code, color: Theme.of(context).primaryColor),
                title: Text('code'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addCodeBlock();
                },
              ),
              ListTile(
                leading: Icon(Icons.format_quote, color: Theme.of(context).primaryColor),
                title: Text('quote'.tr(), style: TextStyle(color: Colors.black)),
                onTap: () {
                  Navigator.pop(context);
                  _addBlockquote();
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _addTextBlock() {
    setState(() {
      _contentBlocks.add(TextBlock(
          text: '', textStyle: TextStyle(color: Colors.black), alignment: TextAlign.start));
      _textAlignments[_contentBlocks.length - 1] = TextAlign.start;
    });
  }

  void _addImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks.add(ImageBlock(imageUrl: imageUrl));
        });
      }
    }
  }

  void _addCodeBlock() {
    setState(() {
      _contentBlocks.add(CodeBlock(text: ''));
    });
  }

  void _addBlockquote() {
    setState(() {
      _contentBlocks.add(BlockquoteBlock(text: ''));
    });
  }

  Future<String?> _uploadImage(File imageFile) async {
    try {
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('university_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await storageRef.putFile(imageFile);
      return await storageRef.getDownloadURL();
    } catch (e) {
      print('Error uploading image: $e');
      return null;
    }
  }

  void _removeContentBlock(int index) {
    setState(() {
      _contentBlocks.removeAt(index);
      _textAlignments.remove(index);
    });
  }

  void _pickHeaderImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _headerImageUrl = imageUrl;
        });
      }
    }
  }

  void _pickImage(int index) async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks[index] = ImageBlock(imageUrl: imageUrl);
        });
      }
    }
  }

  void _applyTextStyle({
    FontWeight? weight,
    FontStyle? fontStyle,
    TextDecoration? decoration,
    double? fontSize,
    Color? color
  }) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          TextStyle newStyle = block.textStyle.copyWith(
            fontWeight: weight ?? block.textStyle.fontWeight,
            fontStyle: fontStyle ?? block.textStyle.fontStyle,
            decoration: decoration ?? block.textStyle.decoration,
            fontSize: fontSize ?? block.textStyle.fontSize,
            color: color ?? block.textStyle.color,
          );
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: block.text,
            textStyle: newStyle,
            alignment: block.alignment
          );
        }
      }
    });
  }

  void _applyTextAlign(TextAlign alignment) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          _textAlignments[_currentBlockIndex] = alignment;
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: block.text,
            textStyle: block.textStyle,
            alignment: alignment,
          );
        }
      } else if (_currentBlockIndex == -1) {
        _nameAlignment = alignment;
      } else if (_currentBlockIndex == -2) {
        _descriptionAlignment = alignment;
      } else if (_currentBlockIndex == -3) {
        _websiteAlignment = alignment;
      }
    });
  }

  void _showFontSizeDialog() {
    double currentFontSize = 16.0;
    if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
      ContentBlock block = _contentBlocks[_currentBlockIndex];
      if (block is TextBlock) {
        currentFontSize = block.textStyle.fontSize ?? 16.0;
      }
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('font_size'.tr(), style: TextStyle(color: Colors.black)),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Slider(
                    value: currentFontSize,
                    min: 8,
                    max: 32,
                    divisions: 12,
                    label: currentFontSize.round().toString(),
                    onChanged: (double value) {
                      setState(() {
                        currentFontSize = value;
                      });
                    },
                  ),
                  Text('${currentFontSize.round()} px', style: TextStyle(color: Colors.black)),
                ],
              );
            },
          ),
          actions: <Widget>[
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: Text('apply'.tr()),
              onPressed: () {
                _applyTextStyle(fontSize: currentFontSize);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _showTextColorDialog() {
    Color currentColor = Colors.black;
    if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
      ContentBlock block = _contentBlocks[_currentBlockIndex];
      if (block is TextBlock) {
        currentColor = block.textStyle.color ?? Colors.black;
      }
    }

    _showColorDialog(currentColor, (color) {
      _applyTextStyle(color: color);
    });
  }

  void _showColorDialog(Color initialColor, Function(Color) onColorChanged) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Choose Color', style: TextStyle(color: Colors.black)),
          content: SingleChildScrollView(
            child: ColorPicker(
              pickerColor: initialColor,
              onColorChanged: onColorChanged,
              pickerAreaHeightPercent: 0.8,
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: Text('apply'.tr()),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _insertBulletList() {
    _insertListItem('â€¢ ');
  }

  void _insertNumberedList() {
    _insertListItem('1. ');
  }

  void _insertListItem(String prefix) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          String newText = block.text + '\n' + prefix;
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: newText,
            textStyle: block.textStyle,
            alignment: block.alignment,
          );
        }
      }
    });
  }

  void _insertLink() {
    String url = '';
    String linkText = '';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('insert_link'.tr(), style: TextStyle(color: Colors.black)),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: InputDecoration(
                  hintText: 'enter_url'.tr(),
                  hintStyle: TextStyle(color: Colors.grey),
                ),
                onChanged: (value) => url = value,
                style: TextStyle(color: Colors.black),
              ),
              SizedBox(height: 8),
              TextField(
                decoration: InputDecoration(
                  hintText: 'enter_link_text'.tr(),
                  hintStyle: TextStyle(color: Colors.grey),
                ),
                onChanged: (value) => linkText = value,
                style: TextStyle(color: Colors.black),
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('cancel'.tr()),
              onPressed: () => Navigator.of(context).pop(),
            ),
            ElevatedButton(
              child: Text('insert'.tr()),
              onPressed: () {
                _insertLinkToContent(url, linkText);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _insertLinkToContent(String url, String linkText) {
    setState(() {
      if (_currentBlockIndex >= 0 && _currentBlockIndex < _contentBlocks.length) {
        ContentBlock block = _contentBlocks[_currentBlockIndex];
        if (block is TextBlock) {
          String newText = block.text + '[$linkText]($url)';
          _contentBlocks[_currentBlockIndex] = TextBlock(
            text: newText,
            textStyle: block.textStyle,
            alignment: block.alignment,
          );
        }
      }
    });
  }

  void _insertImage() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? imageUrl = await _uploadImage(File(image.path));
      if (imageUrl != null) {
        setState(() {
          _contentBlocks.insert(
              _currentBlockIndex + 1, ImageBlock(imageUrl: imageUrl));
        });
      }
    }
  }

  

  Widget _buildButtonLinkItem(ButtonLink link) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 4),
      child: ListTile(
        title: Text(link.text, style: TextStyle(color: Colors.black)),
        subtitle: Text(link.url, style: TextStyle(color: Colors.grey[600])),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
              onPressed: () => _editButtonLink(link),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () => _removeButtonLink(link),
            ),
          ],
        ),
        onTap: () => _editButtonLink(link),
      ),
    );
  }

  

  Widget _buildIconLinkItem(IconLink link) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 4),
      child: ListTile(
        leading: link.iconUrl.isNotEmpty
            ? Image.network(link.iconUrl, width: 24, height: 24)
            : Icon(Icons.broken_image),
        title: Text(link.url, style: TextStyle(color: Colors.black)),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
              onPressed: () => _editIconLink(link),
            ),
            IconButton(
              icon: Icon(Icons.delete, color: Colors.red),
              onPressed: () => _removeIconLink(link),
            ),
          ],
        ),
        onTap: () => _editIconLink(link),
      ),
    );
  }

  void _addButtonLink() {
    showDialog(
      context: context,
      builder: (context) => _ButtonLinkDialog(
        onSave: (text, url) {
          setState(() {
            _buttonLinks.add(ButtonLink(text: text, url: url));
          });
        },
      ),
    );
  }

  void _editButtonLink(ButtonLink link) {
    showDialog(
      context: context,
      builder: (context) => _ButtonLinkDialog(
        initialText: link.text,
        initialUrl: link.url,
        onSave: (text, url) {
          setState(() {
            int index = _buttonLinks.indexOf(link);
            _buttonLinks[index] = ButtonLink(text: text, url: url);
          });
        },
      ),
    );
  }

  void _removeButtonLink(ButtonLink link) {
    setState(() {
      _buttonLinks.remove(link);
    });
  }

  void _addIconLink() {
    showDialog(
      context: context,
      builder: (context) => _IconLinkDialog(
        onSave: (iconUrl, url) {
          setState(() {
            _iconLinks.add(IconLink(iconUrl: iconUrl, url: url));
          });
        },
      ),
    );
  }

  void _editIconLink(IconLink link) {
    showDialog(
      context: context,
      builder: (context) => _IconLinkDialog(
        initialIconUrl: link.iconUrl,
        initialUrl: link.url,
        onSave: (iconUrl, url) {
          setState(() {
            int index = _iconLinks.indexOf(link);
            _iconLinks[index] = IconLink(iconUrl: iconUrl, url: url);
          });
        },
      ),
    );
  }

  void _removeIconLink(IconLink link) {
    setState(() {
      _iconLinks.remove(link);
    });
  }

  Future<void> _saveUniversity() async {
    try {
      final university = University(
        id: widget.university?.id ?? DateTime.now().millisecondsSinceEpoch.toString(),
        name: _nameController.text,
        description: _descriptionController.text,
        website: _websiteController.text,
        imageUrl: _headerImageUrl ?? '',
      );

      final universityData = {
        ...university.toMap(),
        'imageWidth': _imageWidth,
        'imageHeight': _imageHeight,
        'nameColor': _nameColor.value,
        'descriptionColor': _descriptionColor.value,
        'websiteColor': _websiteColor.value,
        'nameAlignment': _nameAlignment.index,
        'descriptionAlignment': _descriptionAlignment.index,
        'websiteAlignment': _websiteAlignment.index,
        'contentBlocks': _contentBlocks.map((block) => block.toMap()).toList(),
        'buttonLinks': _buttonLinks.map((link) => link.toMap()).toList(),
        'iconLinks': _iconLinks.map((link) => link.toMap()).toList(),
      };

      await FirebaseFirestore.instance
          .collection('universities')
          .doc(university.id)
          .set(universityData);

      await ref.read(educationPathwayProvider.notifier).updateUniversity(
            widget.pathwayId,
            widget.specializationId,
            university,
          );

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('university_saved_successfully'.tr())),
      );

      Navigator.of(context).pop();
    } catch (e) {
      print('Error saving university: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('failed_to_save_university'.tr())),
      );
    }
  }

  void _previewUniversity() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => UniversityPreviewScreen(
          name: _nameController.text,
          description: _descriptionController.text,
          website: _websiteController.text,
          imageUrl: _headerImageUrl ?? '',
          nameColor: _nameColor,
          descriptionColor: _descriptionColor,
          websiteColor: _websiteColor,
          nameAlignment: _nameAlignment,
          descriptionAlignment: _descriptionAlignment,
          websiteAlignment: _websiteAlignment,
          contentBlocks: _contentBlocks,
          buttonLinks: _buttonLinks,
          iconLinks: _iconLinks,
        ),
      ),
    );
  }
}

class _ButtonLinkDialog extends StatefulWidget {
  final String? initialText;
  final String? initialUrl;
  final Function(String, String) onSave;

  const _ButtonLinkDialog({
    Key? key,
    this.initialText,
    this.initialUrl,
    required this.onSave,
  }) : super(key: key);

  @override
  __ButtonLinkDialogState createState() => __ButtonLinkDialogState();
}

class __ButtonLinkDialogState extends State<_ButtonLinkDialog> {
  late TextEditingController _textController;
  late TextEditingController _urlController;

  @override
  void initState() {
    super.initState();
    _textController = TextEditingController(text: widget.initialText);
    _urlController = TextEditingController(text: widget.initialUrl);
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add/Edit Button Link', style: TextStyle(color: Colors.black)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _textController,
            decoration: InputDecoration(labelText: 'Button Text'),
            style: TextStyle(color: Colors.black),
          ),
          SizedBox(height: 8),
          TextField(
            controller: _urlController,
            decoration: InputDecoration(labelText: 'URL'),
            style: TextStyle(color: Colors.black),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSave(_textController.text, _urlController.text);
            Navigator.of(context).pop();
          },
          child: Text('Save'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
          ),
        ),
      ],
    );
  }
}

class _IconLinkDialog extends StatefulWidget {
  final String? initialIconUrl;
  final String? initialUrl;
  final Function(String, String) onSave;

  const _IconLinkDialog({
    Key? key,
    this.initialIconUrl,
    this.initialUrl,
    required this.onSave,
  }) : super(key: key);

  @override
  __IconLinkDialogState createState() => __IconLinkDialogState();
}

class __IconLinkDialogState extends State<_IconLinkDialog> {
  late TextEditingController _iconUrlController;
  late TextEditingController _urlController;
  String? _selectedIconUrl;

  @override
  void initState() {
    super.initState();
    _iconUrlController = TextEditingController(text: widget.initialIconUrl);
    _urlController = TextEditingController(text: widget.initialUrl);
    _selectedIconUrl = widget.initialIconUrl;
  }

  Future<void> _pickIcon() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      String? iconUrl = await _uploadImage(File(image.path));
      if (iconUrl != null) {
        setState(() {
          _selectedIconUrl = iconUrl;
          _iconUrlController.text = iconUrl;
        });
      }
    }
  }

  Future<String?> _uploadImage(File imageFile) async {
    try {
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('icon_images/${DateTime.now().millisecondsSinceEpoch}.jpg');
      await storageRef.putFile(imageFile);
      return await storageRef.getDownloadURL();
    } catch (e) {
      print('Error uploading image: $e');
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add/Edit Icon Link', style: TextStyle(color: Colors.black)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          GestureDetector(
            onTap: _pickIcon,
            child: Container(
              width: 100,
              height: 100,
              decoration: BoxDecoration(
                border: Border.all(color: Colors.grey),
                borderRadius: BorderRadius.circular(8),
              ),
              child: _selectedIconUrl != null
                  ? Image.network(_selectedIconUrl!, fit: BoxFit.cover)
                  : Icon(Icons.add_photo_alternate, size: 50, color: Colors.grey[600]),
            ),
          ),
          SizedBox(height: 16),
          TextField(
            controller: _urlController,
            decoration: InputDecoration(labelText: 'URL'),
            style: TextStyle(color: Colors.black),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSave(_selectedIconUrl ?? '', _urlController.text);
            Navigator.of(context).pop();
          },
          child: Text('Save'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Theme.of(context).primaryColor,
          ),
        ),
      ],
    );
  }
}

class UniversityPreviewScreen extends StatelessWidget {
  final String name;
  final String description;
  final String website;
  final String imageUrl;
  final Color nameColor;
  final Color descriptionColor;
  final Color websiteColor;
  final TextAlign nameAlignment;
  final TextAlign descriptionAlignment;
  final TextAlign websiteAlignment;
  final List<ContentBlock> contentBlocks;
  final List<ButtonLink> buttonLinks;
  final List<IconLink> iconLinks;

  UniversityPreviewScreen({
    required this.name,
    required this.description,
    required this.website,
    required this.imageUrl,
    required this.nameColor,
    required this.descriptionColor,
    required this.websiteColor,
    required this.nameAlignment,
    required this.descriptionAlignment,
    required this.websiteAlignment,
    required this.contentBlocks,
    required this.buttonLinks,
    required this.iconLinks,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('university_preview'.tr(), style: GoogleFonts.cairo()),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (imageUrl.isNotEmpty)
              Image.network(
                imageUrl,
                fit: BoxFit.cover,
                width: double.infinity,
                height: 200,
              ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    name,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: nameColor,
                    ),
                    textAlign: nameAlignment,
                  ),
                  SizedBox(height: 8),
                  Text(
                    description,
                    style: TextStyle(
                      fontSize: 16,
                      color: descriptionColor,
                    ),
                    textAlign: descriptionAlignment,
                  ),
                  SizedBox(height: 8),
                  InkWell(
                    onTap: () => _launchURL(context, website),
                    child: Text(
                      website,
                      style: TextStyle(
                        fontSize: 14,
                        color: websiteColor,
                        decoration: TextDecoration.underline,
                      ),
                      textAlign: websiteAlignment,
                    ),
                  ),
                  SizedBox(height: 16),
                  ...contentBlocks.map((block) => _buildContentBlockPreview(block)).toList(),
                  SizedBox(height: 16),
                  _buildButtonLinks(context),
                  SizedBox(height: 16),
                  _buildIconLinks(context),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContentBlockPreview(ContentBlock block) {
    if (block is TextBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Text(
          block.text,
          style: block.textStyle,
          textAlign: block.alignment ?? TextAlign.start,
        ),
      );
    } else if (block is ImageBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: block.imageUrl != null
            ? Image.network(
                block.imageUrl!,
                fit: BoxFit.cover,
                width: double.infinity,
              )
            : SizedBox.shrink(),
      );
    } else if (block is CodeBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Container(
          width: double.infinity,
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey[200],
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(
            block.text,
            style: TextStyle(fontFamily: 'Courier', color: Colors.black),
          ),
        ),
      );
    } else if (block is BlockquoteBlock) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 12.0),
        child: Container(
          width: double.infinity,
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            border: Border(left: BorderSide(color: Colors.grey, width: 4)),
          ),
          child: Text(
            block.text,
            style: TextStyle(fontStyle: FontStyle.italic, color: Colors.black),
          ),
        ),
      );
    }
    return SizedBox.shrink();
  }

  Widget _buildButtonLinks(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          'Button Links',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
        ),
        SizedBox(height: 8),
        ...buttonLinks.map((link) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 8.0),
            child: ElevatedButton(
              onPressed: () => _launchURL(context, link.url),
              child: Text(link.text),
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Theme.of(context).primaryColor,
                padding: EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          );
        }).toList(),
      ],
    );
  }

  Widget _buildIconLinks(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Icon Links',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
        ),
        SizedBox(height: 8),
        Wrap(
          spacing: 16,
          runSpacing: 16,
          children: iconLinks.map((link) {
            return InkWell(
              onTap: () => _launchURL(context, link.url),
              child: Column(
                children: [
                  Image.network(
                    link.iconUrl,
                    width: 40,
                    height: 40,
                    fit: BoxFit.contain,
                  ),
                  SizedBox(height: 4),
                  Text(
                    link.url,
                    style: TextStyle(fontSize: 12, color: Colors.black),
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
  
  void _launchURL(BuildContext context, String url) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => WebViewScreen(url: url),
      ),
    );
  }
}

abstract class ContentBlock {
  ContentBlock();

  Map<String, dynamic> toMap();
  
  factory ContentBlock.fromMap(Map<String, dynamic> map) {
    final type = map['type'];
    switch (type) {
      case 'text':
        return TextBlock.fromMap(map);
      case 'image':
        return ImageBlock.fromMap(map);
      case 'code':
        return CodeBlock.fromMap(map);
      case 'blockquote':
        return BlockquoteBlock.fromMap(map);
      default:
        throw Exception('Unknown content block type: $type');
    }
  }
}

class TextBlock extends ContentBlock {
  String text;
  TextStyle textStyle;
  TextAlign? alignment;
  TextEditingController controller;

  TextBlock({
    required this.text,
    required this.textStyle,
    this.alignment,
  }) : controller = TextEditingController(text: text),
       super();

  factory TextBlock.fromMap(Map<String, dynamic> map) {
    return TextBlock(
      text: map['text'] ?? '',
      textStyle: TextStyle(
        color: Color(map['textColor'] ?? Colors.black.value),
        fontSize: map['fontSize'] ?? 16.0,
      ),
      alignment: TextAlign.values[map['alignment'] ?? TextAlign.start.index],
    );
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'text',
      'text': text,
      'textColor': textStyle.color?.value,
      'fontSize': textStyle.fontSize,
      'alignment': alignment?.index,
    };
  }
}

class ImageBlock extends ContentBlock {
  String? imageUrl;

  ImageBlock({this.imageUrl}) : super();

  factory ImageBlock.fromMap(Map<String, dynamic> map) {
    return ImageBlock(imageUrl: map['imageUrl']);
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'image',
      'imageUrl': imageUrl,
    };
  }
}

class CodeBlock extends ContentBlock {
  String text;
  TextEditingController controller;

  CodeBlock({required this.text}) : controller = TextEditingController(text: text), super();

  factory CodeBlock.fromMap(Map<String, dynamic> map) {
    return CodeBlock(text: map['text'] ?? '');
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'code',
      'text': text,
    };
  }
}

class BlockquoteBlock extends ContentBlock {
  String text;
  TextEditingController controller;

  BlockquoteBlock({required this.text}) : controller = TextEditingController(text: text), super();

  factory BlockquoteBlock.fromMap(Map<String, dynamic> map) {
    return BlockquoteBlock(text: map['text'] ?? '');
  }

  @override
  Map<String, dynamic> toMap() {
    return {
      'type': 'blockquote',
      'text': text,
    };
  }
}

class ButtonLink {
  final String text;
  final String url;

  ButtonLink({required this.text, required this.url});

  Map<String, dynamic> toMap() {
    return {
      'text': text,
      'url': url,
    };
  }

  factory ButtonLink.fromMap(Map<String, dynamic> map) {
    return ButtonLink(
      text: map['text'] ?? '',
      url: map['url'] ?? '',
    );
  }
}

class IconLink {
  final String iconUrl;
  final String url;

  IconLink({required this.iconUrl, required this.url});

  Map<String, dynamic> toMap() {
    return {
      'iconUrl': iconUrl,
      'url': url,
    };
  }

  factory IconLink.fromMap(Map<String, dynamic> map) {
    return IconLink(
      iconUrl: map['iconUrl'] ?? '',
      url: map['url'] ?? '',
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\updates_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/providers/announcement_provider.dart';
import 'package:taleb_edu_platform/widgets/announcement_list_item.dart';
import 'package:taleb_edu_platform/screens/announcement_details_screen.dart';

class UpdatesScreen extends ConsumerStatefulWidget {
  @override
  _UpdatesScreenState createState() => _UpdatesScreenState();
}

class _UpdatesScreenState extends ConsumerState<UpdatesScreen> {
  final ScrollController _scrollController = ScrollController();
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
  }

  @override
  void dispose() {
    _scrollController.removeListener(_onScroll);
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {
      _loadMoreAnnouncements();
    }
  }

  Future<void> _loadMoreAnnouncements() async {
    if (!_isLoading) {
      setState(() => _isLoading = true);
      await ref.read(announcementNotifierProvider.notifier).loadMore();
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final announcementsAsyncValue = ref.watch(announcementsProvider);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Updates',
          style: GoogleFonts.cairo(fontWeight: FontWeight.bold),
        ),
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.refresh(announcementNotifierProvider);
          await ref.read(announcementNotifierProvider.notifier).loadInitial(); 
        },
        child: announcementsAsyncValue.when(
          data: (announcements) => ListView.builder(
            controller: _scrollController,
            itemCount: announcements.length + 1,
            itemBuilder: (context, index) {
              if (index < announcements.length) {
                return AnnouncementListItem(
                  announcement: announcements[index],
                  onTap: () => Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => AnnouncementDetailsScreen(announcement: announcements[index]),
                    ),
                  ),
                );
              } else if (_isLoading) {
                return Center(child: CircularProgressIndicator());
              } else {
                return SizedBox.shrink();
              }
            },
          ),
          loading: () => Center(child: CircularProgressIndicator()),
          error: (error, stackTrace) => Center(child: Text('Error: $error')),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\screens\web_view_screen.dart
// File: lib/screens/web_view_screen.dart

import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:google_fonts/google_fonts.dart';

class WebViewScreen extends StatefulWidget {
  final String url;

  const WebViewScreen({Key? key, required this.url}) : super(key: key);

  @override
  _WebViewScreenState createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late WebViewController _controller;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageStarted: (String url) {
            setState(() {
              _isLoading = true;
            });
          },
          onPageFinished: (String url) {
            setState(() {
              _isLoading = false;
            });
          },
        ),
      )
      ..loadRequest(Uri.parse(widget.url));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ØªØµÙØ­ Ø§Ù„Ù…ÙˆÙ‚Ø¹', style: GoogleFonts.cairo(fontWeight: FontWeight.bold)),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              _controller.reload();
            },
          ),
        ],
      ),
      body: Stack(
        children: [
          WebViewWidget(controller: _controller),
          if (_isLoading)
            Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\auth_service.dart
import 'dart:io';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/user_model.dart';
import 'package:taleb_edu_platform/services/firebase_service.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';
import 'package:taleb_edu_platform/services/notification_service.dart';
import 'package:taleb_edu_platform/services/storage_service.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseService().auth;
  final FirestoreService _firestoreService = FirestoreService();
  final StorageService _storageService = StorageService();
  final GoogleSignIn _googleSignIn = GoogleSignIn();
  final FacebookAuth _facebookAuth = FacebookAuth.instance;
  final NotificationService _notificationService;

  AuthService(this._notificationService);


  FirebaseAuth get auth => _auth;

  Stream<User?> get authStateChanges => _auth.authStateChanges();

  Future<UserModel?> getCurrentUser() async {
    final user = _auth.currentUser;
    if (user != null) {
      print('Current user ID: ${user.uid}');
      try {
        UserModel? userModel = await _getUserDocument(user.uid);
        if (userModel == null) {
          userModel = await _createUserDocument(user);
        }
        // Update OneSignal player ID
        String? playerId = await _notificationService.getDeviceToken();
        if (playerId != null && playerId != userModel.fcmToken) {
          userModel = userModel.copyWith(fcmToken: playerId);
          await _firestoreService.updateDocument('users', user.uid, {'fcmToken': playerId});
        }
        return userModel;
      } catch (e) {
        print('Error retrieving or creating user document: $e');
        return null;
      }
    } else {
      print('No current user found in FirebaseAuth');
    }
    return null;
  }

  Future<bool> isUserAdmin() async {
    User? user = _auth.currentUser;
    if (user != null) {
      try {
        IdTokenResult tokenResult = await user.getIdTokenResult(true);
        return tokenResult.claims?['admin'] == true;
      } catch (e) {
        print('Error checking admin status: $e');
        return false;
      }
    }
    return false;
  }

  Future<UserModel?> _getUserDocument(String uid) async {
    try {
      final doc = await _firestoreService.getDocument('users', uid);
      if (doc.exists) {
        print('User document found in Firestore');
        return UserModel.fromFirestore(doc);
      } else {
        print('No user document found in Firestore for user $uid');
        return null;
      }
    } catch (e) {
      print('Error retrieving user document: $e');
      return null;
    }
  }

  Future<UserModel> _createUserDocument(User user, {Map<String, dynamic>? additionalInfo}) async {
    String? playerId = await _notificationService.getDeviceToken();
    final newUser = UserModel(
      id: user.uid,
      name: additionalInfo?['name'] ?? user.displayName ?? 'New User',
      email: user.email ?? '',
      photoUrl: user.photoURL,
      createdAt: DateTime.now(),
      lastLogin: DateTime.now(),
      username: additionalInfo?['username'] ?? '',
      gender: additionalInfo?['gender'],
      branch: additionalInfo?['branch'],
      regionPoint: additionalInfo?['regionPoint'],
      nationalPoint: additionalInfo?['nationalPoint'],
      fcmToken: playerId,
    );
    try {
      await _firestoreService.setDocument('users', user.uid, newUser.toMap());
      print('Created new user document for ${user.uid}');
      return newUser;
    } catch (e) {
      print('Error creating user document: $e');
      throw Exception('Failed to create user document: $e');
    }
  }

  Future<UserCredential> signInWithEmailAndPassword(String email, String password) async {
    try {
      print('Attempting to sign in with email: $email');
      final credential = await _auth.signInWithEmailAndPassword(email: email, password: password);
      print('User signed in successfully: ${credential.user?.uid}');
      await _createOrUpdateUser(credential.user!);
      return credential;
    } catch (e) {
      print('Error signing in: $e');
      throw _handleAuthException(e);
    }
  }

  Future<UserCredential> createUserWithEmailAndPassword(
    String email,
    String password,
    String username,
    {
      required Map<String, dynamic> additionalInfo,
      File? profileImage,
    }
  ) async {
    try {
      print('Attempting to create user with email: $email');
      final userCredential = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      print('User created successfully: ${userCredential.user?.uid}');
      
      String? photoUrl;
      if (profileImage != null) {
        photoUrl = await _uploadProfileImage(userCredential.user!.uid, profileImage);
      }

      final newUser = UserModel(
        id: userCredential.user!.uid,
        name: additionalInfo['name'] ?? '',
        email: email,
        username: username,
        photoUrl: photoUrl,
        createdAt: DateTime.now(),
        lastLogin: DateTime.now(),
        gender: additionalInfo['gender'],
        branch: additionalInfo['branch'],
        regionPoint: additionalInfo['regionPoint'],
        nationalPoint: additionalInfo['nationalPoint'],
      );

      await _firestoreService.setDocument('users', userCredential.user!.uid, newUser.toMap());
      print('User data added to Firestore');

      // Update OneSignal player ID
      String? playerId = await _notificationService.getDeviceToken();
      if (playerId != null) {
        await _firestoreService.updateDocument('users', userCredential.user!.uid, {'fcmToken': playerId});
      }

      return userCredential;
    } catch (e) {
      print('Error creating user: $e');
      throw _handleAuthException(e);
    }
  }

  Future<String> _uploadProfileImage(String userId, File imageFile) async {
    try {
      final imagePath = 'profile_images/$userId/profile.jpg';
      final downloadUrl = await _storageService.uploadFile(imagePath, imageFile);
      print('Profile image uploaded successfully');
      return downloadUrl;
    } catch (e) {
      print('Error uploading profile image: $e');
      throw Exception('Failed to upload profile image: $e');
    }
  }

  Future<UserCredential> signInWithGoogle() async {
    try {
      print('Attempting Google Sign-In');
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      final GoogleSignInAuthentication? googleAuth = await googleUser?.authentication;

      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth?.accessToken,
        idToken: googleAuth?.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      print('Google Sign-In successful: ${userCredential.user?.uid}');
      await _createOrUpdateUser(userCredential.user!);
      return userCredential;
    } catch (e) {
      print('Error in Google Sign-In: $e');
      throw _handleAuthException(e);
    }
  }

  Future<UserCredential> signInWithFacebook() async {
    try {
      print('Attempting Facebook Sign-In');
      final LoginResult loginResult = await _facebookAuth.login();

      if (loginResult.status == LoginStatus.success) {
        final AccessToken? accessToken = loginResult.accessToken;
        final OAuthCredential facebookAuthCredential = FacebookAuthProvider.credential(accessToken!.token);
        final userCredential = await _auth.signInWithCredential(facebookAuthCredential);
        print('Facebook Sign-In successful: ${userCredential.user?.uid}');
        await _createOrUpdateUser(userCredential.user!);
        return userCredential;
      } else {
        throw Exception('Facebook login failed: ${loginResult.status}');
      }
    } catch (e) {
      print('Error in Facebook Sign-In: $e');
      throw _handleAuthException(e);
    }
  }

  Future<void> signOut() async {
    try {
      print('Attempting to sign out');
      await _googleSignIn.signOut();
      await _facebookAuth.logOut();
      await _auth.signOut();
      print('Sign out successful');
    } catch (e) {
      print('Error signing out: $e');
      throw _handleAuthException(e);
    }
  }

  Future<void> resetPassword(String email) async {
    try {
      print('Attempting to send password reset email to: $email');
      await _auth.sendPasswordResetEmail(email: email);
      print('Password reset email sent successfully');
    } catch (e) {
      print('Error sending password reset email: $e');
      throw _handleAuthException(e);
    }
  }

  Future<void> updateUserProfile(String userId, Map<String, dynamic> data, {File? profileImage}) async {
    try {
      print('Updating user profile for user: $userId');
      if (profileImage != null) {
        final photoUrl = await _uploadProfileImage(userId, profileImage);
        data['photoUrl'] = photoUrl;
      }
      await _firestoreService.updateDocument('users', userId, data);
      print('User profile updated successfully');
    } catch (e) {
      print('Error updating user profile: $e');
      throw Exception('Failed to update user profile: $e');
    }
  }

  Future<void> deleteUser(String userId) async {
    try {
      print('Attempting to delete user: $userId');
      await _firestoreService.deleteDocument('users', userId);
      await _auth.currentUser?.delete();
      print('User deleted successfully');
    } catch (e) {
      print('Error deleting user: $e');
      throw _handleAuthException(e);
    }
  }

  Future<void> _createOrUpdateUser(User user) async {
    try {
      print('Checking if user document exists for: ${user.uid}');
      final userData = await _getUserDocument(user.uid);

      if (userData != null) {
        print('Updating existing user data');
        await _updateUserLastLogin(user.uid);
      } else {
        print('Creating new user document');
        await _createUserDocument(user);
      }
    } catch (e) {
      print('Error in _createOrUpdateUser: $e');
    }
  }

  Future<void> _updateUserLastLogin(String userId) async {
    try {
      print('Updating last login for user: $userId');
      await _firestoreService.updateDocument('users', userId, {'lastLogin': DateTime.now()});
      print('Last login updated successfully');
    } catch (e) {
      print('Error updating last login: $e');
    }
  }

  Exception _handleAuthException(dynamic e) {
    if (e is FirebaseAuthException) {
      print('FirebaseAuthException: ${e.code} - ${e.message}');
      switch (e.code) {
        case 'user-not-found':
          return Exception('No user found for that email.');
        case 'wrong-password':
          return Exception('Wrong password provided.');
        case 'email-already-in-use':
          return Exception('The email address is already in use.');
        case 'invalid-email':
          return Exception('The email address is invalid.');
        case 'user-disabled':
          return Exception('This user account has been disabled.');
        case 'operation-not-allowed':
          return Exception('This operation is not allowed.');
        case 'weak-password':
          return Exception('The password provided is too weak.');
        case 'account-exists-with-different-credential':
          return Exception('An account already exists with the same email address but different sign-in credentials.');
        default:
          return Exception('Authentication error: ${e.message}');
      }
    }
    print('Unexpected error in AuthService: $e');
    return Exception('An unexpected error occurred: $e');
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\fcm_service.dart
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final fcmServiceProvider = Provider<FCMService>((ref) => FCMService());

class FCMService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<void> initialize() async {
    await _firebaseMessaging.requestPermission();

    String? token = await _firebaseMessaging.getToken();
    if (token != null) {
      await _saveTokenLocally(token);
      await _saveTokenToFirestore(token);
    }

    _firebaseMessaging.onTokenRefresh.listen((String token) async {
      await _saveTokenLocally(token);
      await _saveTokenToFirestore(token);
    });
  }

  Future<void> _saveTokenLocally(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('fcm_token', token);
  }

  Future<String?> getLocalToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('fcm_token');
  }

  Future<void> _saveTokenToFirestore(String token) async {
    String? userId = _getCurrentUserId();
    if (userId != null) {
      await _firestore.collection('users').doc(userId).set({
        'fcmToken': token,
        'lastUpdated': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
  }

  String? _getCurrentUserId() {
    return _auth.currentUser?.uid;
  }

  Future<void> updateTokenForUser(String userId) async {
    String? token = await getLocalToken();
    if (token != null) {
      await _firestore.collection('users').doc(userId).set({
        'fcmToken': token,
        'lastUpdated': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
  }

  Future<void> sendNotificationToAllUsers({
    required String title,
    required String body,
  }) async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('users').get();
      List<String> tokens = snapshot.docs
          .map((doc) => doc.get('fcmToken') as String?)
          .where((token) => token != null)
          .cast<String>()
          .toList();

      for (String token in tokens) {
        await _sendNotification(token, title, body);
      }
    } catch (e) {
      print('Error sending notifications: $e');
      throw e;
    }
  }

  Future<void> _sendNotification(String token, String title, String body) async {
    try {
      await _firestore.collection('notifications').add({
        'token': token,
        'title': title,
        'body': body,
        'createdAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      print('Error sending individual notification: $e');
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\firebase_service.dart
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';

class FirebaseService {
  static final FirebaseService _instance = FirebaseService._internal();

  factory FirebaseService() {
    return _instance;
  }

  FirebaseService._internal();

  FirebaseAuth? _auth;
  FirebaseFirestore? _firestore;
  FirebaseStorage? _storage;

  Future<void> initializeFirebase() async {
    await Firebase.initializeApp();
    _auth = FirebaseAuth.instance;
    _firestore = FirebaseFirestore.instance;
    _storage = FirebaseStorage.instance;
  }

  FirebaseAuth get auth {
    return _auth!;
  }

  FirebaseFirestore get firestore {
    return _firestore!;
  }

  FirebaseStorage get storage {
    return _storage!;
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\firestore_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/models/message_model.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';
import 'package:taleb_edu_platform/models/news_model.dart';
import 'package:taleb_edu_platform/models/school_model.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';
import 'package:taleb_edu_platform/models/support_message.dart';

class FirestoreService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  FirebaseFirestore get firestore => _firestore;

  Stream<QuerySnapshot> getCollectionStream(String collection) {
    return _firestore.collection(collection).snapshots();
  }

  Future<void> setDocument(String collection, String documentId, Map<String, dynamic> data) async {
    try {
      await _firestore.collection(collection).doc(documentId).set(data);
      print('Document set in $collection with ID: $documentId');
    } catch (e) {
      print('Error setting document: $e');
      throw Exception('Failed to set document: $e');
    }
  }

  Future<void> addDocument(String collection, Map<String, dynamic> data) async {
    try {
      DocumentReference docRef = await _firestore.collection(collection).add(data);
      print('Document added to $collection with ID: ${docRef.id}');
    } catch (e) {
      print('Error adding document: $e');
      throw Exception('Failed to add document: $e');
    }
  }

  Future<void> updateDocument(String collection, String documentId, Map<String, dynamic> data) async {
    try {
      DocumentReference docRef = _firestore.collection(collection).doc(documentId);
      DocumentSnapshot docSnapshot = await docRef.get();

      if (docSnapshot.exists) {
        await docRef.update(data);
        print('Document updated in $collection: $documentId');
      } else {
        print('Document $documentId does not exist in collection $collection.');
        throw Exception('Document not found');
      }
    } catch (e) {
      print('Error updating document: $e');
      throw Exception('Failed to update document: $e');
    }
  }

  Future<void> deleteDocument(String collection, String documentId) async {
    try {
      await _firestore.collection(collection).doc(documentId).delete();
      print('Document deleted from $collection: $documentId');
    } catch (e) {
      print('Error deleting document: $e');
      throw Exception('Failed to delete document: $e');
    }
  }

  Future<DocumentSnapshot> getDocument(String collection, String documentId) async {
    try {
      DocumentSnapshot doc = await _firestore.collection(collection).doc(documentId).get();
      print('Document retrieved from $collection: $documentId');
      return doc;
    } catch (e) {
      print('Error getting document: $e');
      throw Exception('Failed to get document: $e');
    }
  }

  Future<QuerySnapshot> getCollection(String collection) async {
    try {
      QuerySnapshot querySnapshot = await _firestore.collection(collection).get();
      print('Collection retrieved: $collection');
      return querySnapshot;
    } catch (e) {
      print('Error getting collection: $e');
      throw Exception('Failed to get collection: $e');
    }
  }

  Future<QuerySnapshot> queryCollection(String collection, List<List<dynamic>> conditions) async {
    try {
      Query query = _firestore.collection(collection);
      for (var condition in conditions) {
        query = query.where(condition[0], isEqualTo: condition[1]);
      }
      QuerySnapshot querySnapshot = await query.get();
      print('Query executed on collection: $collection');
      return querySnapshot;
    } catch (e) {
      print('Error querying collection: $e');
      throw Exception('Failed to query collection: $e');
    }
  }

  Stream<List<Message>> getMessagesStream() {
    return _firestore
        .collection('messages')
        .orderBy('timestamp', descending: false)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) => Message.fromFirestore(doc)).toList();
    });
  }

  Future<void> addMessage(Message message) async {
    try {
      await _firestore.collection('messages').add(message.toMap());
    } catch (e) {
      print('Error adding message: $e');
      throw Exception('Failed to add message: $e');
    }
  }

  Future<List<School>> getSchools() async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('schools').get();
      return snapshot.docs.map((doc) => School.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching schools: $e');
      throw Exception('Failed to fetch schools: $e');
    }
  }

  Future<void> addApplication(Map<String, dynamic> applicationData) async {
    try {
      await _firestore.collection('applications').add(applicationData);
    } catch (e) {
      print('Error adding application: $e');
      throw Exception('Failed to submit application: $e');
    }
  }

  Future<List<News>> getRecentNews() async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('news')
          .orderBy('date', descending: true)
          .limit(5)
          .get();
      return snapshot.docs.map((doc) => News.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching recent news: $e');
      throw Exception('Failed to fetch recent news: $e');
    }
  }

  Future<void> addReactionToNews(String newsId, String reaction, String userId) async {
    DocumentReference newsRef = _firestore.collection('news').doc(newsId);

    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot newsDoc = await transaction.get(newsRef);

      if (!newsDoc.exists) {
        throw Exception("News post does not exist!");
      }

      Map<String, dynamic> data = newsDoc.data() as Map<String, dynamic>;
      List<Map<String, dynamic>> reactions = List<Map<String, dynamic>>.from(data['reactions'] ?? []);

      reactions.removeWhere((r) => r['userId'] == userId);

      reactions.add({
        'emoji': reaction,
        'userId': userId,
      });

      transaction.update(newsRef, {'reactions': reactions});
    });
  }

  Future<void> addCommentToNews(String newsId, Map<String, dynamic> comment) async {
    DocumentReference newsRef = _firestore.collection('news').doc(newsId);
    await newsRef.update({
      'comments': FieldValue.arrayUnion([comment])
    });
  }

  Future<List<Mostajadat>> getMostajadat() async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('mostajadat')
          .orderBy('date', descending: true)
          .get();
      return snapshot.docs.map((doc) => Mostajadat.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching mostajadat: $e');
      throw Exception('Failed to fetch mostajadat: $e');
    }
  }

  Future<List<Announcement>> getAnnouncements() async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('announcements').get();
      return snapshot.docs.map((doc) => Announcement.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching announcements: $e');
      throw Exception('Failed to fetch announcements: $e');
    }
  }

  Stream<List<SupportTicket>> getAllSupportTickets() {
    return _firestore.collection('support_tickets').snapshots().map((snapshot) {
      return snapshot.docs.map((doc) => _ticketFromFirestore(doc)).toList();
    });
  }

  Stream<SupportTicket> getSupportTicket(String ticketId) {
    return _firestore.collection('support_tickets').doc(ticketId).snapshots().map(_ticketFromFirestore);
  }

  Future<List<SupportTicket>> getUserTickets(String userId) async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('support_tickets')
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true)
          .get();

      return snapshot.docs.map((doc) => _ticketFromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching user tickets: $e');
      throw Exception('Failed to fetch user tickets: $e');
    }
  }

  Future<SupportTicket> createSupportTicket(String userId) async {
    try {
      DocumentReference docRef = await _firestore.collection('support_tickets').add({
        'userId': userId,
        'status': TicketStatus.open.toString(),
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        'messages': [],
      });

      DocumentSnapshot doc = await docRef.get();
      return _ticketFromFirestore(doc);
    } catch (e) {
      print('Error creating support ticket: $e');
      throw Exception('Failed to create support ticket: $e');
    }
  }

  Future<SupportTicket> addMessageToTicket(String ticketId, TicketMessage message) async {
    try {
      await _firestore.collection('support_tickets').doc(ticketId).update({
        'messages': FieldValue.arrayUnion([{
          'senderId': message.senderId,
          'content': message.content,
          'timestamp': message.timestamp.toIso8601String(),
        }]),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      DocumentSnapshot doc = await _firestore.collection('support_tickets').doc(ticketId).get();
      return _ticketFromFirestore(doc);
    } catch (e) {
      print('Error adding message to ticket: $e');
      throw Exception('Failed to add message to ticket: $e');
    }
  }

  Future<SupportTicket> updateTicketStatus(String ticketId, TicketStatus newStatus) async {
    try {
      await _firestore.collection('support_tickets').doc(ticketId).update({
        'status': newStatus.toString(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      DocumentSnapshot doc = await _firestore.collection('support_tickets').doc(ticketId).get();
      return _ticketFromFirestore(doc);
    } catch (e) {
      print('Error updating ticket status: $e');
      throw Exception('Failed to update ticket status: $e');
    }
  }

  Future<SupportTicket> closeTicket(String ticketId) async {
    try {
      await _firestore.collection('support_tickets').doc(ticketId).update({
        'status': TicketStatus.closed.toString(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      DocumentSnapshot doc = await _firestore.collection('support_tickets').doc(ticketId).get();
      return _ticketFromFirestore(doc);
    } catch (e) {
      print('Error closing ticket: $e');
      throw Exception('Failed to close ticket: $e');
    }
  }

  Future<List<SupportMessage>> getSupportMessages(String userId) async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('support_messages')
          .where('senderId', isEqualTo: userId)
          .orderBy('timestamp')
          .get();

      return snapshot.docs.map((doc) => SupportMessage.fromFirestore(doc)).toList();
    } catch (e) {
      print('Error fetching support messages: $e');
      throw Exception('Failed to fetch support messages: $e');
    }
  }

  Future<SupportMessage> addSupportMessage(SupportMessage message) async {
    try {
      DocumentReference docRef = await _firestore.collection('support_messages').add(message.toMap());
      DocumentSnapshot docSnapshot = await docRef.get();
      return SupportMessage.fromFirestore(docSnapshot);
    } catch (e) {
      print('Error adding support message: $e');
      throw Exception('Failed to add support message: $e');
    }
  }

  SupportTicket _ticketFromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return SupportTicket(
      id: doc.id,
      userId: data['userId'],
      messages: (data['messages'] as List<dynamic>? ?? []).map((m) => TicketMessage(
        senderId: m['senderId'],
        content: m['content'],
        timestamp: DateTime.parse(m['timestamp']),
      )).toList(),
      status: TicketStatus.values.firstWhere((e) => e.toString() == data['status']),
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      updatedAt: (data['updatedAt'] as Timestamp).toDate(),
    );
  }
}

final firestoreServiceProvider = Provider<FirestoreService>((ref) => FirestoreService());


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\institution_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:taleb_edu_platform/models/institution_model.dart';

class InstitutionService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Institution>> getInstitutions() async {
    QuerySnapshot snapshot = await _firestore.collection('institutions').get();
    return snapshot.docs.map((doc) => Institution.fromFirestore(doc)).toList();
  }

  Future<void> addInstitution(Institution institution) async {
    await _firestore.collection('institutions').add(institution.toMap());
  }

  Future<void> updateInstitution(Institution institution) async {
    await _firestore.collection('institutions').doc(institution.id).update(institution.toMap());
  }

  Future<void> deleteInstitution(String id) async {
    await _firestore.collection('institutions').doc(id).delete();
  }

  Future<void> addCategory(String institutionId, UniversityCategory category) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        categories.add(category.toMap());
        transaction.update(institutionRef, {'categories': categories});
      }
    });
  }

  Future<void> updateCategory(String institutionId, UniversityCategory category) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        int categoryIndex = categories.indexWhere((c) => c['id'] == category.id);
        if (categoryIndex != -1) {
          categories[categoryIndex] = category.toMap();
          transaction.update(institutionRef, {'categories': categories});
        }
      }
    });
  }

  Future<void> deleteCategory(String institutionId, String categoryId) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        categories.removeWhere((c) => c['id'] == categoryId);
        transaction.update(institutionRef, {'categories': categories});
      }
    });
  }

  Future<void> addFaculty(String institutionId, String categoryId, Faculty faculty) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        int categoryIndex = categories.indexWhere((c) => c['id'] == categoryId);
        if (categoryIndex != -1) {
          List<dynamic> faculties = List.from(categories[categoryIndex]['faculties'] ?? []);
          faculties.add(faculty.toMap());
          categories[categoryIndex]['faculties'] = faculties;
          transaction.update(institutionRef, {'categories': categories});
        }
      }
    });
  }

  Future<void> updateFaculty(String institutionId, String categoryId, Faculty faculty) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        int categoryIndex = categories.indexWhere((c) => c['id'] == categoryId);
        if (categoryIndex != -1) {
          List<dynamic> faculties = List.from(categories[categoryIndex]['faculties'] ?? []);
          int facultyIndex = faculties.indexWhere((f) => f['id'] == faculty.id);
          if (facultyIndex != -1) {
            faculties[facultyIndex] = faculty.toMap();
            categories[categoryIndex]['faculties'] = faculties;
            transaction.update(institutionRef, {'categories': categories});
          }
        }
      }
    });
  }

  Future<void> deleteFaculty(String institutionId, String categoryId, String facultyId) async {
    DocumentReference institutionRef = _firestore.collection('institutions').doc(institutionId);
    await _firestore.runTransaction((transaction) async {
      DocumentSnapshot snapshot = await transaction.get(institutionRef);
      if (snapshot.exists) {
        List<dynamic> categories = List.from(snapshot.get('categories') ?? []);
        int categoryIndex = categories.indexWhere((c) => c['id'] == categoryId);
        if (categoryIndex != -1) {
          List<dynamic> faculties = List.from(categories[categoryIndex]['faculties'] ?? []);
          faculties.removeWhere((f) => f['id'] == facultyId);
          categories[categoryIndex]['faculties'] = faculties;
          transaction.update(institutionRef, {'categories': categories});
        }
      }
    });
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\notification_service.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:taleb_edu_platform/services/firestore_service.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class NotificationService {
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirestoreService _firestoreService;
  final String _oneSignalRestApiKey = "OWNlYjlmYWUtNThlNS00ZjQ1LTk5ZTctOTc2OTRjNWJkODAy";
  final String _oneSignalAppId = "3b76c84e-346f-4ee7-8e8f-ae54a407bc92";

  NotificationService(this._firestoreService);

  Future<void> initialize() async {
    await _firebaseMessaging.requestPermission();

    String? token = await _firebaseMessaging.getToken();
    if (token != null) {
      await _saveTokenLocally(token);
      await _saveTokenToFirestore(token);
    }

    _firebaseMessaging.onTokenRefresh.listen((String token) async {
      await _saveTokenLocally(token);
      await _saveTokenToFirestore(token);
    });

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print("Received foreground message: ${message.messageId}");
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print("Opened app from background state: ${message.messageId}");
    });

    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

    OneSignal.shared.setLogLevel(OSLogLevel.verbose, OSLogLevel.none);
    OneSignal.shared.setAppId(_oneSignalAppId);

    setupOneSignalHandlers();
  }

  void setupOneSignalHandlers() {
    OneSignal.shared.setNotificationWillShowInForegroundHandler((OSNotificationReceivedEvent event) {
      print("Notification received in foreground: ${event.notification.body}");
      event.complete(event.notification);
    });

    OneSignal.shared.setNotificationOpenedHandler((OSNotificationOpenedResult result) {
      print("Opened notification: ${result.notification.body}");
      handleNotificationResponse(result);
    });

    OneSignal.shared.setPermissionObserver((OSPermissionStateChanges changes) {
      print("Permission state changed: ${changes.to.status}");
    });

    OneSignal.shared.setSubscriptionObserver((OSSubscriptionStateChanges changes) {
      print("Subscription state changed: ${changes.to.userId != null}");
    });

    OneSignal.shared.setEmailSubscriptionObserver((OSEmailSubscriptionStateChanges changes) {
      print("Email subscription state changed: ${changes.to.emailUserId != null}");
    });
  }

  Future<void> setOneSignalExternalUserId(String userId) async {
    await OneSignal.shared.setExternalUserId(userId);
  }

  Future<String?> getDeviceToken() async {
    return await _firebaseMessaging.getToken();
  }

  Future<void> _saveTokenLocally(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('fcm_token', token);
  }

  Future<String?> getLocalToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('fcm_token');
  }

  Future<void> _saveTokenToFirestore(String token) async {
    String? userId = _getCurrentUserId();
    if (userId != null) {
      await _firestore.collection('users').doc(userId).set({
        'fcmToken': token,
        'lastUpdated': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
  }

  String? _getCurrentUserId() {
    return _auth.currentUser?.uid;
  }

  Future<void> updateTokenForUser(String userId) async {
    String? token = await getLocalToken();
    if (token != null) {
      await _firestore.collection('users').doc(userId).set({
        'fcmToken': token,
        'lastUpdated': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
    }
  }

  Future<void> sendNotificationToAllUsers({
    required String title,
    required String body,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      final notification = {
        "app_id": _oneSignalAppId,
        "contents": {"en": body},
        "headings": {"en": title},
        "included_segments": ["All"],
        "data": additionalData,
      };

      final response = await http.post(
        Uri.parse('https://onesignal.com/api/v1/notifications'),
        headers: {
          "Authorization": "Basic $_oneSignalRestApiKey",
          "Content-Type": "application/json"
        },
        body: jsonEncode(notification),
      );

      if (response.statusCode != 200) {
        throw Exception('Failed to send notification: ${response.body}');
      }

      print("Notification sent successfully: ${response.body}");

    } catch (e) {
      print('Error sending notifications: $e');
      throw e;
    }
  }

  Future<void> sendNotificationToUser({
    required String userId,
    required String title,
    required String body,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      DocumentSnapshot userDoc = await _firestore.collection('users').doc(userId).get();
      String? token = userDoc.get('fcmToken') as String?;
      if (token != null) {
        final notification = {
          "app_id": _oneSignalAppId,
          "contents": {"en": body},
          "headings": {"en": title},
          "include_player_ids": [token],
          "data": additionalData,
        };

        final response = await http.post(
          Uri.parse('https://onesignal.com/api/v1/notifications'),
          headers: {
            "Authorization": "Basic $_oneSignalRestApiKey",
            "Content-Type": "application/json"
          },
          body: jsonEncode(notification),
        );

        if (response.statusCode != 200) {
          throw Exception('Failed to send notification: ${response.body}');
        }

        print("Notification sent successfully: ${response.body}");
      }
    } catch (e) {
      print('Error sending notification to user: $e');
      throw e;
    }
  }

  void handleNotificationResponse(OSNotificationOpenedResult result) {
    Map<String, dynamic>? additionalData = result.notification.additionalData;
    if (additionalData != null && additionalData.containsKey('type')) {
      switch (additionalData['type']) {
        case 'news':
          break;
        case 'announcement':
          break;
        case 'message':
          break;
        default:
          break;
      }
    }
  }
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print("Handling a background message: ${message.messageId}");
}

final notificationServiceProvider = Provider<NotificationService>((ref) {
  final firestoreService = ref.watch(firestoreServiceProvider);
  return NotificationService(firestoreService);
});


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\share_service.dart
// File: lib/services/share_service.dart

import 'package:share_plus/share_plus.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:taleb_edu_platform/models/school_model.dart';
import 'package:easy_localization/easy_localization.dart';

class ShareService {
  Future<void> shareAnnouncement(Announcement announcement, School school) async {
    final String shareText = '''
${announcement.title}

${announcement.description}

${'school'.tr()}: ${school.name}
${'category'.tr()}: ${announcement.category}
${'date'.tr()}: ${DateFormat('yyyy-MM-dd').format(announcement.date)}

${'shared_via'.tr()} Taleb Educational Platform
''';

    try {
      await Share.share(shareText, subject: announcement.title);
    } catch (e) {
      print('Error sharing announcement: $e');
      throw Exception('Failed to share announcement: $e');
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\services\storage_service.dart
import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'firebase_service.dart';

class StorageService {
  final FirebaseStorage _storage = FirebaseService().storage;

  Future<String> uploadFile(String path, File file) async {
    try {
      final ref = _storage.ref().child(path);
      final uploadTask = ref.putFile(file);
      final snapshot = await uploadTask.whenComplete(() {});
      final downloadUrl = await snapshot.ref.getDownloadURL();
      print('File uploaded successfully. Download URL: $downloadUrl');
      return downloadUrl;
    } on FirebaseException catch (e) {
      print('Error uploading file: ${e.code} - ${e.message}');
      if (e.code == 'unauthorized') {
        throw Exception('User is not authorized to upload files. Please check your permissions.');
      } else {
        throw Exception('Failed to upload file: ${e.message}');
      }
      } catch (e) {
      print('Unexpected error uploading file: $e');
      throw Exception('An unexpected error occurred while uploading the file.');
    }
  }

  Future<void> deleteFile(String path) async {
    try {
      await _storage.ref().child(path).delete();
      print('File deleted successfully: $path');
    } on FirebaseException catch (e) {
      print('Error deleting file: ${e.code} - ${e.message}');
      throw Exception('Failed to delete file: ${e.message}');
    } catch (e) {
      print('Unexpected error deleting file: $e');
      throw Exception('An unexpected error occurred while deleting the file.');
    }
  }

  Future<String> getDownloadURL(String path) async {
    try {
      final downloadUrl = await _storage.ref().child(path).getDownloadURL();
      print('Download URL retrieved: $downloadUrl');
      return downloadUrl;
    } on FirebaseException catch (e) {
      print('Error getting download URL: ${e.code} - ${e.message}');
      throw Exception('Failed to get download URL: ${e.message}');
    } catch (e) {
      print('Unexpected error getting download URL: $e');
      throw Exception('An unexpected error occurred while getting the download URL.');
    }
  }
}

final storageServiceProvider = Provider<StorageService>((ref) => StorageService());


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\animated_gradient_background.dart
import 'package:flutter/material.dart';

class AnimatedGradientBackground extends StatelessWidget {
  final AnimationController controller;

  const AnimatedGradientBackground({
    Key? key,
    required this.controller,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: controller,
      builder: (context, child) {
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFF1A237E),
                Color(0xFF0D47A1),
                Color(0xFF01579B),
                Color(0xFF0288D1),
              ],
              stops: [
                0,
                0.3 + (0.2 * controller.value),
                0.6 + (0.2 * controller.value),
                1,
              ],
            ),
          ),
        );
      },
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\announcement_card.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';

class AnnouncementCard extends StatelessWidget {
  final Announcement announcement;

  const AnnouncementCard({Key? key, required this.announcement}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: () {
          // TODO: Navigate to announcement details
        },
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildProfileImage(),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      announcement.title,
                      style: GoogleFonts.cairo(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      DateFormat('dd/MM/yyyy').format(announcement.date),
                      style: GoogleFonts.cairo(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                    ),
                    SizedBox(height: 8),
                    _buildEducationLevelChip(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileImage() {
    return CircleAvatar(
      radius: 30,
      backgroundImage: NetworkImage(announcement.schoolImageUrl ?? ''),
      backgroundColor: Colors.grey[300],
    );
  }

  Widget _buildEducationLevelChip() {
    Color chipColor;
    switch (announcement.category) {
      case 'bac':
        chipColor = Colors.green;
        break;
      case 'bac+2':
        chipColor = Colors.blue;
        break;
      default:
        chipColor = Colors.grey;
    }

    return Chip(
      label: Text(
        announcement.category,
        style: GoogleFonts.cairo(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
      ),
      backgroundColor: chipColor,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\announcement_carousel.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';
import 'package:intl/intl.dart';
import 'package:cached_network_image/cached_network_image.dart'; // Import cached_network_image

class AnnouncementCarousel extends StatelessWidget {
  final List<Announcement> announcements;

  const AnnouncementCarousel({Key? key, required this.announcements}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CarouselSlider(
      options: CarouselOptions(
        height: 300.0, // Increased height
        aspectRatio: 16 / 9,
        viewportFraction: 0.8,
        initialPage: 0,
        enableInfiniteScroll: true,
        reverse: false,
        autoPlay: true,
        autoPlayInterval: Duration(seconds: 3),
        autoPlayAnimationDuration: Duration(milliseconds: 800),
        autoPlayCurve: Curves.fastOutSlowIn,
        enlargeCenterPage: true,
        scrollDirection: Axis.horizontal,
      ),
      items: announcements.map((announcement) {
        return Builder(
          builder: (BuildContext context) {
            return Container(
              width: MediaQuery.of(context).size.width,
              margin: EdgeInsets.symmetric(horizontal: 5.0),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10),
              ),
              child: Stack( // Using Stack to overlay gradient
                children: [
                  ClipRRect( // ClipRRect to apply rounded corners to image
                    borderRadius: BorderRadius.circular(10),
                    child: CachedNetworkImage( // Using CachedNetworkImage for better image loading
                      imageUrl: announcement.schoolImageUrl ?? '',
                      width: MediaQuery.of(context).size.width,
                      height: 300, // Matching Carousel height
                      fit: BoxFit.cover,
                      placeholder: (context, url) => Center(child: CircularProgressIndicator()),
                      errorWidget: (context, url, error) => Icon(Icons.error),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      gradient: LinearGradient(
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter,
                        colors: [Colors.transparent, Colors.black.withOpacity(0.8)],
                      ),
                    ),
                  ),
                  Positioned.fill( // Positioned.fill to cover the entire image with padding
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.end,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              CircleAvatar(
                                backgroundImage: NetworkImage(announcement.schoolImageUrl ?? ''),
                                radius: 25,
                              ),
                              SizedBox(width: 10),
                              Expanded(
                                child: Text(
                                  announcement.title,
                                  style: GoogleFonts.cairo(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white,
                                  ),
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 8),
                          Row(
                            children: [
                              Text(
                                DateFormat('dd/MM/yyyy').format(announcement.date),
                                style: GoogleFonts.cairo(
                                  fontSize: 14,
                                  color: Colors.white70,
                                ),
                              ),
                              SizedBox(width: 10),
                              _buildEducationLevelChip(announcement.category),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            );
          },
        );
      }).toList(),
    );
  }

  Widget _buildEducationLevelChip(String category) {
    Color chipColor;
    String label;
    switch (category) {
      case 'bac':
        chipColor = Colors.green;
        label = 'Ø¨Ø§Ùƒ';
        break;
      case 'bac+2':
        chipColor = Colors.blue;
        label = 'Ø¨Ø§Ùƒ+2';
        break;
      default:
        chipColor = Colors.orange;
        label = category;
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: chipColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        label,
        style: GoogleFonts.cairo(
          fontSize: 12,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\announcement_list_item.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/announcement_model.dart';

class AnnouncementListItem extends StatelessWidget {
  final Announcement announcement;
  final VoidCallback onTap;

  const AnnouncementListItem({
    Key? key,
    required this.announcement,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.all(16),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CircleAvatar(
              radius: 30,
              backgroundImage: NetworkImage(announcement.schoolImageUrl ?? ''),
            ),
            SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    announcement.title,
                    style: GoogleFonts.cairo(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  SizedBox(height: 4),
                  Row(
                    children: [
                      Text(
                        DateFormat('dd/MM/yyyy').format(announcement.date),
                        style: GoogleFonts.cairo(
                          fontSize: 14,
                          color: Colors.grey[600],
                        ),
                      ),
                      SizedBox(width: 8),
                      _buildEducationLevelChip(announcement.category),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEducationLevelChip(String category) {
    Color chipColor;
    String label;
    switch (category) {
      case 'bac':
        chipColor = Colors.green;
        label = 'Ø¨Ø§Ùƒ';
        break;
      case 'bac+2':
        chipColor = Colors.blue;
        label = 'Ø¨Ø§Ùƒ+2';
        break;
      default:
        chipColor = Colors.orange;
        label = category;
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: chipColor.withOpacity(0.1),
        border: Border.all(color: chipColor),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        label,
        style: GoogleFonts.cairo(
          fontSize: 12,
          fontWeight: FontWeight.bold,
          color: chipColor,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\category_card.dart
// File: lib/widgets/category_grid.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';

class CategoryGrid extends StatelessWidget {
  final List<Map<String, dynamic>> categories = [
    {'name': 'bac', 'icon': Icons.school},
    {'name': 'bac+2', 'icon': Icons.business},
    {'name': 'bac+3', 'icon': Icons.architecture},
    {'name': 'other', 'icon': Icons.more_horiz},
  ];

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        childAspectRatio: 1.5,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: categories.length,
      itemBuilder: (context, index) {
        return _buildCategoryCard(context, categories[index]);
      },
    );
  }

  Widget _buildCategoryCard(BuildContext context, Map<String, dynamic> category) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: InkWell(
        onTap: () {
          // TODO: Navigate to category-specific screen
        },
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                category['icon'],
                size: 40,
                color: Theme.of(context).primaryColor,
              ),
              SizedBox(height: 8),
              Text(
                category['name'].tr(),
                style: GoogleFonts.poppins(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\chat_bubble.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';

class ChatBubble extends StatelessWidget {
  final TicketMessage message;
  final bool isUser;

  const ChatBubble({Key? key, required this.message, required this.isUser}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Align(
        alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
        child: Container(
          constraints: BoxConstraints(
            maxWidth: MediaQuery.of(context).size.width * 0.7,
          ),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          decoration: BoxDecoration(
            color: isUser ? Color(0xFF2196F3) : Color(0xFFE0E0E0),
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.2),
                spreadRadius: 2,
                blurRadius: 5,
                offset: Offset(0, 3),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                message.content,
                style: GoogleFonts.poppins(
                  color: isUser ? Colors.white : Colors.black87,
                  fontSize: 16,
                ),
              ),
              SizedBox(height: 4),
              Align(
                alignment: Alignment.bottomRight,
                child: Text(
                  DateFormat('HH:mm').format(message.timestamp),
                  style: GoogleFonts.poppins(
                    color: isUser ? Colors.white70 : Colors.grey[600],
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\custom_app_bar.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';

class CustomAppBar extends ConsumerStatefulWidget {
  final Function(int) onSectionTap;

  const CustomAppBar({Key? key, required this.onSectionTap}) : super(key: key);

  @override
  ConsumerState<CustomAppBar> createState() => _CustomAppBarState();
}

class _CustomAppBarState extends ConsumerState<CustomAppBar> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late List<Animation<double>> _animations;
  late Animation<Color?> _colorAnimation;
  int _selectedIndex = 0;

  final List<_SectionInfo> _sections = [
    _SectionInfo(Icons.feed, 'Ù…Ø³ØªØ¬Ø¯Ø§Øª', Color(0xFF3498db)),
    _SectionInfo(Icons.work, 'Ù…Ø¨Ø§Ø±ÙŠØ§Øª ÙˆØ¸ÙŠÙÙŠØ©', Color(0xFF2ecc71)),
    _SectionInfo(Icons.school, 'Ø§Ù„ØªÙˆØ¬ÙŠÙ‡', Color(0xFFe74c3c)),
  ];

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _animations = _sections.map((section) {
      return Tween<double>(begin: 0.0, end: 1.0).animate(
        CurvedAnimation(
          parent: _controller,
          curve: const Interval(0.0, 1.0, curve: Curves.easeInOut),
        ),
      );
    }).toList();

    _colorAnimation = ColorTween(
      begin: _sections[0].color,
      end: _sections[0].color,
    ).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _onTap(int index) {
    if (_selectedIndex != index) {
      setState(() {
        _selectedIndex = index;
      });
      _colorAnimation = ColorTween(
        begin: _colorAnimation.value ?? _sections[_selectedIndex].color,
        end: _sections[index].color,
      ).animate(_controller);
      _controller.forward(from: 0.0);
      widget.onSectionTap(index);
    }
  }

  @override
  Widget build(BuildContext context) {
    return SliverAppBar(
      floating: true,
      pinned: true,
      snap: false,
      expandedHeight: 120.0,
      backgroundColor: _colorAnimation.value ?? _sections[_selectedIndex].color,
      automaticallyImplyLeading: false, // This line removes the back icon
      flexibleSpace: FlexibleSpaceBar(
        background: AnimatedBuilder(
          animation: _colorAnimation,
          builder: (context, child) {
            return Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    _colorAnimation.value ?? _sections[_selectedIndex].color,
                    _colorAnimation.value?.withOpacity(0.8) ?? _sections[_selectedIndex].color.withOpacity(0.8),
                  ],
                ),
              ),
              child: SafeArea(
                child: Column(
                  children: [
                    SizedBox(height: 10),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Padding(
                          padding: const EdgeInsets.only(left: 16.0),
                          child: Text(
                            _sections[_selectedIndex].label,
                            style: GoogleFonts.poppins(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.notifications, color: Colors.white),
                          onPressed: () {
                            // Handle notifications
                          },
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
      bottom: PreferredSize(
        preferredSize: const Size.fromHeight(64),
        child: Container(
          height: 64,
          padding: const EdgeInsets.only(bottom: 8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: List.generate(_sections.length, (index) => 
              _buildSection(index, _sections[index].icon, _sections[index].label)
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSection(int index, IconData icon, String label) {
    final isSelected = _selectedIndex == index;
    return GestureDetector(
      onTap: () => _onTap(index),
      child: AnimatedBuilder(
        animation: _controller,
        builder: (context, child) {
          return Container(
            padding: const EdgeInsets.symmetric(horizontal: 16.0),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  color: isSelected ? Colors.white : Colors.transparent,
                  width: 3.0,
                ),
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  icon,
                  color: Colors.white,
                  size: 24 + (isSelected ? _animations[index].value * 4 : 0),
                ),
                SizedBox(height: 4),
                Text(
                  label,
                  style: GoogleFonts.cairo(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class _SectionInfo {
  final IconData icon;
  final String label;
  final Color color;

  _SectionInfo(this.icon, this.label, this.color);
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\custom_bottom_navigation.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:ui';
import 'package:easy_localization/easy_localization.dart';

class CustomBottomNavigation extends StatelessWidget {
  final int currentIndex;
  final Function(int) onTap;

  const CustomBottomNavigation({
    Key? key,
    required this.currentIndex,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 65,
      margin: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(30),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.7),
              borderRadius: BorderRadius.circular(30),
              border: Border.all(color: Colors.white.withOpacity(0.5), width: 1.5),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  spreadRadius: 0,
                  offset: Offset(0, 5),
                ),
              ],
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildNavItem(context, Icons.home_rounded, 'home'.tr(), 0),
                _buildNavItem(context, Icons.school_rounded, 'mostajadat'.tr(), 1),
                _buildNavItem(context, Icons.support_agent_rounded, 'support'.tr(), 2),
                _buildNavItem(context, Icons.person_rounded, 'profile'.tr(), 3),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNavItem(BuildContext context, IconData icon, String label, int index) {
    final isSelected = currentIndex == index;
    return Expanded(
      child: GestureDetector(
        onTap: () => onTap(index),
        child: Container(
          height: double.infinity,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              AnimatedContainer(
                duration: Duration(milliseconds: 200),
                padding: EdgeInsets.all(isSelected ? 7 : 4),
                decoration: BoxDecoration(
                  color: isSelected ? Theme.of(context).primaryColor.withOpacity(0.1) : Colors.transparent,
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  icon,
                  size: 24,
                  color: isSelected ? Theme.of(context).primaryColor : Colors.grey[600],
                ),
              ),
              SizedBox(height: 3),
              Text(
                label,
                style: GoogleFonts.cairo(
                  fontSize: 11,
                  fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  color: isSelected ? Theme.of(context).primaryColor : Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void handleNotificationNavigation(BuildContext context, String screen) {
    switch (screen) {
      case 'home':
        // Navigate to home screen
        break;
      case 'mostajadat':
        // Navigate to mostajadat screen
        break;
      case 'support':
        // Navigate to support screen
        break;
      case 'profile':
        // Navigate to profile screen
        break;
      default:
        // Default navigation
        break;
    }
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\custom_button.dart
import 'package:flutter/material.dart';

class NeuButton extends StatefulWidget {
  final Widget child;
  final VoidCallback? onPressed; // Make onPressed nullable
  final Color color;
  final double height;
  final double width;

  const NeuButton({
    Key? key,
    required this.child,
    required this.onPressed, // Now onPressed is nullable
    this.color = Colors.white,
    this.height = 50,
    this.width = double.infinity,
  }) : super(key: key);

  @override
  _NeuButtonState createState() => _NeuButtonState();
}

class _NeuButtonState extends State<NeuButton> {
  bool _isPressed = false;

  void _onPointerDown(PointerDownEvent event) {
    setState(() {
      _isPressed = true;
    });
  }

  void _onPointerUp(PointerUpEvent event) {
    setState(() {
      _isPressed = false;
    });
    // Call onPressed only if it's not null
    widget.onPressed?.call(); 
  }

  @override
  Widget build(BuildContext context) {
    return Listener(
      onPointerDown: _onPointerDown,
      onPointerUp: _onPointerUp,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 150),
        height: widget.height,
        width: widget.width,
        decoration: BoxDecoration(
          color: widget.color,
          borderRadius: BorderRadius.circular(50),
          boxShadow: _isPressed
              ? []
              : [
                
                  
                ],
        ),
        child: Center(child: widget.child),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\custom_text_field.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class CustomTextField extends StatelessWidget {
  final TextEditingController controller;
  final String labelText;
  final String? hintText;
  final int maxLines;
  final String? Function(String?)? validator;
  final TextInputType keyboardType;
  final bool obscureText;
  final Widget? suffixIcon;
  final VoidCallback? onTap;
  final bool readOnly;
  final TextInputAction textInputAction;

  const CustomTextField({
    Key? key,
    required this.controller,
    required this.labelText,
    this.hintText,
    this.maxLines = 1,
    this.validator,
    this.keyboardType = TextInputType.text,
    this.obscureText = false,
    this.suffixIcon,
    this.onTap,
    this.readOnly = false,
    this.textInputAction = TextInputAction.next,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: labelText,
        hintText: hintText,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Theme.of(context).primaryColor),
        ),
        filled: true,
        fillColor: Colors.grey.shade50,
        labelStyle: GoogleFonts.cairo(color: Colors.grey.shade700),
        hintStyle: GoogleFonts.cairo(color: Colors.grey.shade500),
        suffixIcon: suffixIcon,
      ),
      style: GoogleFonts.cairo(color: Colors.black87),
      maxLines: maxLines,
      validator: validator,
      keyboardType: keyboardType,
      obscureText: obscureText,
      onTap: onTap,
      readOnly: readOnly,
      textInputAction: textInputAction,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\dynamic_text.dart
import 'package:flutter/material.dart';

class DynamicText extends StatefulWidget {
  final String text;
  final double fontSize;
  final FontWeight fontWeight;
  final Color color;

  const DynamicText({
    Key? key,
    required this.text,
    required this.fontSize,
    required this.fontWeight,
    required this.color,
  }) : super(key: key);

  @override
  _DynamicTextState createState() => _DynamicTextState();
}

class _DynamicTextState extends State<DynamicText> {
  @override
  Widget build(BuildContext context) {
    return AnimatedDefaultTextStyle(
      style: TextStyle(
        fontSize: widget.fontSize,
        fontWeight: widget.fontWeight,
        color: widget.color, // Now expecting a non-nullable Color
      ),
      child: Text(widget.text),
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\glassmorphic_container.dart
import 'package:flutter/material.dart';
import 'dart:ui';

class GlassmorphicContainer extends StatelessWidget {
  final Widget child;
  final double borderRadius;
  final double blur;
  final Gradient gradient;
  final EdgeInsetsGeometry padding;
  final Alignment alignment;

  const GlassmorphicContainer({
    Key? key,
    required this.child,
    this.borderRadius = 0,
    this.blur = 10,
    required this.gradient,
    this.padding = EdgeInsets.zero,
    this.alignment = Alignment.center,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(borderRadius),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: blur, sigmaY: blur),
        child: Container(
          decoration: BoxDecoration(
            gradient: gradient,
            borderRadius: BorderRadius.circular(borderRadius),
          ),
          padding: padding,
          alignment: alignment,
          child: child,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\glass_card.dart
import 'package:flutter/material.dart';
import 'dart:ui';

class GlassCard extends StatelessWidget {
  final Widget child;
  final double borderRadius;
  final double blur;
  final Color backgroundColor;

  const GlassCard({
    Key? key,
    required this.child,
    this.borderRadius = 20,
    this.blur = 10,
    this.backgroundColor = Colors.white,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(borderRadius),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: blur, sigmaY: blur),
        child: Container(
          decoration: BoxDecoration(
            color: backgroundColor.withOpacity(0.2),
            borderRadius: BorderRadius.circular(borderRadius),
            border: Border.all(
              color: backgroundColor.withOpacity(0.2),
              width: 1.5,
            ),
          ),
          child: child,
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\message_bubble.dart
// File: lib/widgets/message_bubble.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/message_model.dart';

class MessageBubble extends StatelessWidget {
  final Message message;

  const MessageBubble({Key? key, required this.message}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: message.isFromUser ? Alignment.centerRight : Alignment.centerLeft,
      child: Container(
        margin: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
        padding: EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: message.isFromUser ? Colors.blue[100] : Colors.grey[200],
          borderRadius: BorderRadius.circular(20),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              message.text,
              style: GoogleFonts.poppins(
                fontSize: 16,
                color: Colors.black87,
              ),
            ),
            SizedBox(height: 4),
            Text(
              DateFormat('HH:mm').format(message.timestamp),
              style: GoogleFonts.poppins(
                fontSize: 12,
                color: Colors.black54,
              ),
            ),
          ],
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\mostajadat_card.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/mostajadat_modal.dart';

Widget buildMostajadatCard(Mostajadat mostajadat) {
  final dateFormat = DateFormat('dd/MM/yyyy');
  final formattedDeadlineDate = mostajadat.deadlineDate != null
      ? dateFormat.format(mostajadat.deadlineDate!)
      : 'ØºÙŠØ± Ù…Ø­Ø¯Ø¯';

  Color getHeaderColor(String type) {
    switch (type.toLowerCase()) {
      case 'Ø¨Ø§Ùƒ':
        return Colors.orange;
      case 'Ø¨Ø§Ùƒ+1':
        return Colors.blue[700]!;
      case 'Ø¨Ø§Ùƒ+2':
        return Colors.green[600]!;
      case 'Ø¨Ø§Ùƒ+3':
        return Colors.purple[600]!;
      case 'Ø¨Ø§Ùƒ+4':
        return Colors.red[600]!;
      case 'Ø¨Ø§Ùƒ+5':
        return Colors.teal[600]!;
      case 'Ø£Ø®Ø±Ù‰':
        return Colors.grey[600]!;
      default:
        return Colors.grey[600]!;
    }
  }

  return Container(
    margin: const EdgeInsets.symmetric(vertical: 8),
    decoration: BoxDecoration(
      color: Colors.white,
      borderRadius: BorderRadius.circular(12),
      boxShadow: [
        BoxShadow(
          color: Colors.grey.withOpacity(0.2),
          spreadRadius: 1,
          blurRadius: 6,
          offset: Offset(0, 3),
        ),
      ],
    ),
    child: Column(
      children: [
        Container(
          padding: EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: getHeaderColor(mostajadat.type),
            borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
          ),
          child: Row(
            children: [
              CircleAvatar(
                radius: 20,
                backgroundColor: Colors.white,
                backgroundImage: NetworkImage(mostajadat.imageUrl),
              ),
              SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      mostajadat.title,
                      style: GoogleFonts.cairo(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 4),
                    Text(
                      mostajadat.type,
                      style: GoogleFonts.cairo(
                        fontSize: 14,
                        color: Colors.white.withOpacity(0.8),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(12),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.calendar_today, size: 16, color: Colors.grey[600]),
                  SizedBox(width: 4),
                  Text(
                    'Ø§Ø®Ø± Ø£Ø¬Ù„: $formattedDeadlineDate',
                    style: GoogleFonts.cairo(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8),
              Align(
                alignment: Alignment.centerLeft,
                child: ElevatedButton(
                  onPressed: () {
                    // Handle button press
                  },
                  child: Text(
                    'Ø§Ù„ØªÙØ§ØµÙŠÙ„',
                    style: GoogleFonts.cairo(fontSize: 14),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: getHeaderColor(mostajadat.type),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    ),
  );
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\opportunity_card.dart


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\recent_news_list.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:taleb_edu_platform/models/news_model.dart';
import 'package:taleb_edu_platform/providers/news_provider.dart';

class RecentNewsList extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final newsAsyncValue = ref.watch(recentNewsProvider);

    return newsAsyncValue.when(
      data: (newsList) {
        return ListView.builder(
          shrinkWrap: true,
          physics: NeverScrollableScrollPhysics(),
          itemCount: newsList.length,
          itemBuilder: (context, index) {
            return _buildNewsCard(context, newsList[index]);
          },
        );
      },
      loading: () => Center(child: CircularProgressIndicator()),
      error: (_, __) => Center(child: Text('Ø®Ø·Ø£ ÙÙŠ ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø£Ø®Ø¨Ø§Ø±')),
    );
  }

  Widget _buildNewsCard(BuildContext context, News news) {
    return Card(
      margin: EdgeInsets.only(bottom: 16),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () {
          // TODO: Navigate to news detail screen
        },
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  news.imageUrl ?? 'https://via.placeholder.com/80',
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      news.title,
                      style: GoogleFonts.cairo(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 4),
                    Text(
                      news.summary,
                      style: GoogleFonts.cairo(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 8),
                    Text(
                      DateFormat('dd/MM/yyyy').format(news.date),
                      style: GoogleFonts.cairo(
                        fontSize: 12,
                        color: Colors.grey[500],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\school_card.dart
// File: lib/widgets/school_card.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:taleb_edu_platform/models/school_model.dart';
import 'package:taleb_edu_platform/screens/school_detail_screen.dart';

class SchoolCard extends StatelessWidget {
  final School school;

  const SchoolCard({Key? key, required this.school}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => SchoolDetailScreen(school: school),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  school.imageUrl,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      school.name,
                      style: GoogleFonts.poppins(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      school.description,
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
              Icon(Icons.chevron_right),
            ],
          ),
        ),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\school_info_card.dart
// File: lib/widgets/school_info_card.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:taleb_edu_platform/models/school_model.dart';
import 'package:taleb_edu_platform/screens/school_detail_screen.dart';

class SchoolInfoCard extends StatelessWidget {
  final School school;

  const SchoolInfoCard({Key? key, required this.school}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () {
          Navigator.of(context).push(
            MaterialPageRoute(
              builder: (context) => SchoolDetailScreen(school: school),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              _buildSchoolImage(),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      school.name,
                      style: GoogleFonts.poppins(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 4),
                    Text(
                      school.description,
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: Colors.grey[600],
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 8),
                    Text(
                      'view_school_details'.tr(),
                      style: GoogleFonts.poppins(
                        fontSize: 14,
                        color: Theme.of(context).primaryColor,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSchoolImage() {
    return Container(
      width: 80,
      height: 80,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        image: school.imageUrl != null
            ? DecorationImage(
                image: NetworkImage(school.imageUrl!),
                fit: BoxFit.cover,
              )
            : null,
      ),
      child: school.imageUrl == null
          ? Icon(Icons.school, size: 40, color: Colors.grey[400])
          : null,
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\status_badge.dart
import 'package:flutter/material.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';

class StatusBadge extends StatelessWidget {
  final TicketStatus status;

  const StatusBadge({Key? key, required this.status}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    Color color;
    String text;

    switch (status) {
      case TicketStatus.open:
        color = Colors.green;
        text = 'Open';
        break;
      case TicketStatus.inProgress:
        color = Colors.orange;
        text = 'In Progress';
        break;
      case TicketStatus.resolved:
        color = Colors.blue;
        text = 'Resolved';
        break;
      case TicketStatus.closed:
        color = Colors.red;
        text = 'Closed';
        break;
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color),
      ),
      child: Text(
        text,
        style: TextStyle(color: color, fontWeight: FontWeight.bold),
      ),
    );
  }
}


    File: C:\Users\LENOVO\Desktop\taleb\lib\widgets\ticket_list_item.dart
import 'package:flutter/material.dart';
import 'package:taleb_edu_platform/models/support_ticket.dart';

class TicketListItem extends StatelessWidget {
  final SupportTicket ticket;
  final VoidCallback onTap;

  const TicketListItem({
    Key? key,
    required this.ticket,
    required this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text('Ticket #${ticket.id}'),
      subtitle: Text('Status: ${ticket.status.toString().split('.').last}'),
      trailing: Text(ticket.updatedAt.toString()),
      onTap: onTap,
    );
  }
}

